{"version":3,"file":"static/js/467.8e4a40d6.chunk.js","mappings":"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","sources":["components/common/CopyButton.tsx","components/common/LogPathChild.tsx","components/common/PaiTrialChild.tsx","components/common/PaiTrialLog.tsx","components/common/TrialLog.tsx","components/common/PanelMonacoEditor.tsx","components/common/OpenRow.tsx","components/experiment/overview/params/basicInfoStyles.ts","components/experiment/trialdetail/chart/Duration.tsx","components/experiment/trialdetail/ChangeColumnComponent.tsx","components/experiment/trialdetail/chart/Para.tsx","components/experiment/trialdetail/chart/Intermediate.tsx","components/experiment/trialdetail/table/tableFunction/search/searchFunction.ts","components/fluent/ModalTheme.tsx","components/experiment/trialdetail/table/tableFunction/Compare.tsx","components/experiment/trialdetail/table/tableFunction/CustomizedTrial.tsx","components/experiment/trialdetail/table/tableFunction/tensorboard/TensorboardDialog.tsx","components/experiment/trialdetail/table/tableFunction/tensorboard/TensorboardUI.tsx","components/experiment/trialdetail/table/tableFunction/search/SearchParameterConditions.tsx","components/experiment/trialdetail/table/tableFunction/search/GeneralSearch.tsx","components/experiment/trialdetail/table/tableFunction/search/Search.tsx","components/experiment/trialdetail/table/tableFunction/killTrial/Killjob.tsx","components/common/ExpandableDetails.tsx","components/common/PaginationTable.tsx","components/experiment/trialdetail/table/TableList.tsx","components/experiment/trialdetail/TrialsDetail.tsx","components/experiment/trialdetail/chart/DefaultMetricPoint.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport copy from 'copy-to-clipboard';\nimport { IconButton, FontSizes, TooltipHost } from '@fluentui/react';\nimport { TOOLTIP_BACKGROUND_COLOR } from '@static/const';\n\nconst COPIED_TOOLTIP_CLOSE_DELAY = 1000;\n\nconst CopyButton = ({ value, hideTooltip }): any => {\n    const ref = useRef(null);\n    return (\n        <div>\n            <IconButton\n                iconProps={{ iconName: 'Copy' }}\n                styles={{ icon: [{ fontSize: FontSizes.small }] }}\n                onClick={(event: React.SyntheticEvent<EventTarget>): void => {\n                    event.stopPropagation();\n                    copy(value);\n                    ref.current && (ref as any).current.show();\n                    setTimeout(() => {\n                        ref.current !== null && (ref as any).current.dismiss();\n                    }, COPIED_TOOLTIP_CLOSE_DELAY);\n                }}\n                onMouseDown={(e): void => {\n                    e.stopPropagation();\n                }}\n                onMouseUp={(e): void => {\n                    e.stopPropagation();\n                }}\n            />\n            <TooltipHost\n                hidden={hideTooltip}\n                content='Copied'\n                componentRef={ref}\n                delay={0}\n                tooltipProps={{\n                    calloutProps: {\n                        styles: {\n                            beak: { background: TOOLTIP_BACKGROUND_COLOR },\n                            beakCurtain: { background: TOOLTIP_BACKGROUND_COLOR },\n                            calloutMain: { background: TOOLTIP_BACKGROUND_COLOR }\n                        }\n                    }\n                }}\n            />\n        </div>\n    );\n};\n\nCopyButton.propTypes = {\n    value: PropTypes.string.isRequired,\n    hideTooltip: PropTypes.bool\n};\n\nexport default CopyButton;\n","import * as React from 'react';\n\ninterface LogpathChildProps {\n    eachLogpath: string;\n    logName: string;\n}\n\nclass LogPathChild extends React.Component<LogpathChildProps, {}> {\n    constructor(props: LogpathChildProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { eachLogpath, logName } = this.props;\n        const isLink = /^http/gi.test(eachLogpath);\n\n        return (\n            <div className='logpath'>\n                <span className='logName'>{logName}</span>\n                {isLink ? (\n                    <a className='logContent logHref' rel='noopener noreferrer' href={eachLogpath} target='_blank'>\n                        {eachLogpath}\n                    </a>\n                ) : (\n                    <span className='logContent'>{eachLogpath}</span>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default LogPathChild;\n","import * as React from 'react';\nimport { DOWNLOAD_IP } from '@static/const';\nimport LogPathChild from './LogPathChild';\n\ninterface PaiTrialChildProps {\n    logString: string;\n    id: string;\n    logCollect: boolean;\n}\n\nclass PaiTrialChild extends React.Component<PaiTrialChildProps, {}> {\n    constructor(props: PaiTrialChildProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { logString, id, logCollect } = this.props;\n        return (\n            <div>\n                {logString === '' ? null : (\n                    <div>\n                        {logCollect ? (\n                            <a\n                                target='_blank'\n                                rel='noopener noreferrer'\n                                href={`${DOWNLOAD_IP}/trial_${id}.log`}\n                                style={{ marginRight: 10 }}\n                            >\n                                Trial stdout\n                            </a>\n                        ) : (\n                            <LogPathChild eachLogpath={logString} logName='Trial stdout:' />\n                        )}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default PaiTrialChild;\n","import * as React from 'react';\nimport { DOWNLOAD_IP } from '@static/const';\nimport PaiTrialChild from './PaiTrialChild';\nimport LogPathChild from './LogPathChild';\n\ninterface PaitrialLogProps {\n    logStr: string;\n    id: string;\n    logCollection: boolean;\n}\n\nclass PaitrialLog extends React.Component<PaitrialLogProps, {}> {\n    constructor(props: PaitrialLogProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { logStr, id, logCollection } = this.props;\n        const isTwopath = logStr.indexOf(',') !== -1 ? true : false;\n        return (\n            <div>\n                <div>\n                    {isTwopath ? (\n                        <div>\n                            {logCollection ? (\n                                <div>\n                                    <a\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                        href={`${DOWNLOAD_IP}/trial_${id}.log`}\n                                        style={{ marginRight: 10 }}\n                                    >\n                                        Trial stdout\n                                    </a>\n                                    <a target='_blank' rel='noopener noreferrer' href={logStr.split(',')[1]}>\n                                        NFS log\n                                    </a>\n                                </div>\n                            ) : (\n                                <div>\n                                    <LogPathChild eachLogpath={logStr.split(',')[0]} logName='Trial stdout:' />\n                                    <LogPathChild eachLogpath={logStr.split(',')[1]} logName='Log on NFS:' />\n                                </div>\n                            )}\n                        </div>\n                    ) : (\n                        <PaiTrialChild logString={logStr} id={id} logCollect={logCollection} />\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PaitrialLog;\n","import * as React from 'react';\nimport LogPathChild from './LogPathChild';\n\ninterface TrialLogProps {\n    logStr: string;\n    id: string;\n}\n\nclass TrialLog extends React.Component<TrialLogProps, {}> {\n    constructor(props: TrialLogProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { logStr } = this.props;\n\n        return (\n            <div>\n                <LogPathChild eachLogpath={logStr} logName='Log path:' />\n            </div>\n        );\n    }\n}\n\nexport default TrialLog;\n","import * as React from 'react';\nimport { Stack, Panel, PrimaryButton } from '@fluentui/react';\nimport MonacoEditor from 'react-monaco-editor';\nimport { caclMonacoEditorHeight } from '@static/function';\nimport '@style/logPanel.scss';\n\ninterface LogPanelProps {\n    hideConfigPanel: () => void;\n    panelName: string;\n    panelContent: string;\n}\n\ninterface LogPanelState {\n    panelInnerHeight: number;\n}\n\n/**\n * search space\n * config\n * retiarii parameter\n * panel\n */\n\nclass PanelMonacoEditor extends React.Component<LogPanelProps, LogPanelState> {\n    constructor(props: LogPanelProps) {\n        super(props);\n\n        this.state = {\n            panelInnerHeight: window.innerHeight\n        };\n    }\n\n    // use arrow function for change window size met error: this.setState is not a function\n    setLogPanelHeight = (): void => {\n        this.setState(() => ({ panelInnerHeight: window.innerHeight, innerWidth: window.innerWidth }));\n    };\n\n    async componentDidMount(): Promise<void> {\n        window.addEventListener('resize', this.setLogPanelHeight);\n    }\n\n    componentWillUnmount(): void {\n        window.removeEventListener('resize', this.setLogPanelHeight);\n    }\n\n    render(): React.ReactNode {\n        const { hideConfigPanel, panelName, panelContent } = this.props;\n        const { panelInnerHeight } = this.state;\n        const monacoEditorHeight = caclMonacoEditorHeight(panelInnerHeight);\n        return (\n            <Stack>\n                <Panel\n                    isOpen={true}\n                    hasCloseButton={false}\n                    isFooterAtBottom={true}\n                    isLightDismiss={true}\n                    onLightDismissClick={hideConfigPanel}\n                >\n                    <div className='panel'>\n                        <div>\n                            <div className='panelName'>{panelName}</div>\n                            <MonacoEditor\n                                height={monacoEditorHeight}\n                                language='json'\n                                theme='vs-light'\n                                value={panelContent}\n                                options={{\n                                    minimap: { enabled: false },\n                                    readOnly: true,\n                                    automaticLayout: true,\n                                    wordWrap: 'on'\n                                }}\n                            />\n                        </div>\n                        <PrimaryButton text='Close' className='configClose' onClick={hideConfigPanel} />\n                    </div>\n                </Panel>\n            </Stack>\n        );\n    }\n}\n\nexport default PanelMonacoEditor;\n","import * as React from 'react';\nimport * as copy from 'copy-to-clipboard';\nimport { Stack, PrimaryButton, Pivot, PivotItem, DefaultButton } from '@fluentui/react';\nimport JSONTree from 'react-json-tree';\nimport { Trial } from '@model/trial';\nimport { MANAGER_IP, RETIARIIPARAMETERS } from '@static/const';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport { reformatRetiariiParameter } from '@static/function';\nimport PaiTrialLog from './PaiTrialLog';\nimport TrialLog from './TrialLog';\nimport MessageInfo from './MessageInfo';\nimport PanelMonacoEditor from './PanelMonacoEditor';\nimport '@style/experiment/overview/overview.scss';\nimport '@style/copyParameter.scss';\nimport '@style/openRow.scss';\n\n/**\n *  netron URL must be synchronized with ts/nni_manager/rest_server/index.ts`.\n *  Remember to update it if the value is changed or this file is moved.\n **/\n\ninterface OpenRowProps {\n    trialId: string;\n}\n\ninterface OpenRowState {\n    typeInfo: string;\n    info: string;\n    isHidenInfo: boolean;\n    showRetiaParamPanel: boolean;\n}\n\nclass OpenRow extends React.Component<OpenRowProps, OpenRowState> {\n    constructor(props: OpenRowProps) {\n        super(props);\n        this.state = {\n            typeInfo: '',\n            info: '',\n            isHidenInfo: true,\n            showRetiaParamPanel: false\n        };\n    }\n\n    hideMessageInfo = (): void => {\n        this.setState(() => ({ isHidenInfo: true }));\n    };\n\n    hideRetiaParam = (): void => {\n        this.setState(() => ({ showRetiaParamPanel: false }));\n    };\n\n    isshowRetiaParamPanel = (): void => {\n        this.setState(() => ({ showRetiaParamPanel: true }));\n    };\n\n    /**\n     * info: message content\n     * typeInfo: message type: success | error...\n     * continuousTime: show time, 2000ms\n     */\n    getCopyStatus = (info: string, typeInfo: string): void => {\n        this.setState(() => ({ info, typeInfo, isHidenInfo: false }));\n        setTimeout(this.hideMessageInfo, 2000);\n    };\n\n    copyParams = (trial: Trial): void => {\n        // get copy parameters\n        const params = JSON.stringify(reformatRetiariiParameter(trial.description.parameters as any), null, 4);\n        if (copy.default(params)) {\n            this.getCopyStatus('Success copy parameters to clipboard in form of python dict !', 'success');\n        } else {\n            this.getCopyStatus('Failed !', 'error');\n        }\n    };\n\n    openTrialLog = (filename: string): void => {\n        window.open(`${MANAGER_IP}/trial-file/${this.props.trialId}/${filename}`);\n    };\n\n    openModelOnnx = (): void => {\n        // TODO: netron might need prefix.\n        window.open(`/netron/index.html?url=${MANAGER_IP}/trial-file/${this.props.trialId}/model.onnx`);\n    };\n\n    render(): React.ReactNode {\n        const { isHidenInfo, typeInfo, info, showRetiaParamPanel } = this.state;\n        const trialId = this.props.trialId;\n        const trial = TRIALS.getTrial(trialId);\n        const logPathRow = trial.info.logPath || \"This trial's log path is not available.\";\n        const originParameters = trial.description.parameters;\n        const hasVisualHyperParams = RETIARIIPARAMETERS in originParameters;\n        return (\n            <Stack className='openRow'>\n                <Stack className='openRowContent'>\n                    <Pivot>\n                        <PivotItem headerText='Parameters' key='1' itemIcon='TestParameter'>\n                            {trial.info.hyperParameters !== undefined ? (\n                                <Stack id='description'>\n                                    <Stack className='bgHyper'>\n                                        <JSONTree\n                                            hideRoot={true}\n                                            shouldExpandNode={(): boolean => true} // default expandNode\n                                            getItemString={(): null => null} // remove the {} items\n                                            data={reformatRetiariiParameter(originParameters as any)}\n                                        />\n                                    </Stack>\n                                    <Stack horizontal className='copy'>\n                                        <PrimaryButton\n                                            onClick={this.copyParams.bind(this, trial)}\n                                            text='Copy as json'\n                                            styles={{ root: { width: 128, marginRight: 10 } }}\n                                        />\n                                        {hasVisualHyperParams && (\n                                            <DefaultButton\n                                                onClick={this.isshowRetiaParamPanel}\n                                                text='Original parameters'\n                                            />\n                                        )}\n                                        {/* copy success | failed message info */}\n                                        {!isHidenInfo && <MessageInfo typeInfo={typeInfo} info={info} />}\n                                        {showRetiaParamPanel && (\n                                            <PanelMonacoEditor\n                                                hideConfigPanel={this.hideRetiaParam}\n                                                panelName='Retiarii parameters'\n                                                panelContent={JSON.stringify(originParameters, null, 2)}\n                                            />\n                                        )}\n                                    </Stack>\n                                </Stack>\n                            ) : (\n                                <Stack className='logpath'>\n                                    <span className='logName'>Error: </span>\n                                    <span className='error'>{`This trial's parameters are not available.'`}</span>\n                                </Stack>\n                            )}\n                        </PivotItem>\n                        <PivotItem headerText='Log' key='2' itemIcon='M365InvoicingLogo'>\n                            {\n                                // FIXME: this should not be handled in web UI side\n                                EXPERIMENT.trainingServicePlatform !== 'local' ? (\n                                    <PaiTrialLog\n                                        logStr={logPathRow}\n                                        id={trialId}\n                                        logCollection={EXPERIMENT.logCollectionEnabled}\n                                    />\n                                ) : (\n                                    <div>\n                                        <TrialLog logStr={logPathRow} id={trialId} />\n                                        {/* view each trial log in drawer*/}\n                                        <div id='trialog'>\n                                            <div className='copy' style={{ marginTop: 15 }}>\n                                                <PrimaryButton\n                                                    onClick={this.openTrialLog.bind(this, 'trial.log')}\n                                                    text='View trial log'\n                                                />\n                                                <PrimaryButton\n                                                    onClick={this.openTrialLog.bind(this, 'stderr')}\n                                                    text='View trial error'\n                                                    styles={{ root: { marginLeft: 15 } }}\n                                                />\n                                                <PrimaryButton\n                                                    onClick={this.openTrialLog.bind(this, 'stdout')}\n                                                    text='View trial stdout'\n                                                    styles={{ root: { marginLeft: 15 } }}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                        </PivotItem>\n                        {EXPERIMENT.metadata.tag.includes('retiarii') ? (\n                            <PivotItem headerText='Visualization' key='3' itemIcon='FlowChart'>\n                                <div id='visualization'>\n                                    <div id='visualizationText'>Visualize models with 3rd-party tools.</div>\n                                    <PrimaryButton\n                                        onClick={this.openModelOnnx.bind(this)}\n                                        text='Netron'\n                                        styles={{ root: { marginLeft: 15 } }}\n                                    />\n                                </div>\n                            </PivotItem>\n                        ) : null}\n                    </Pivot>\n                </Stack>\n            </Stack>\n        );\n    }\n}\n\nexport default OpenRow;\n","import { FontWeights, mergeStyleSets, getTheme } from '@fluentui/react';\n\nconst theme = getTheme();\n\nexport const styles = mergeStyleSets({\n    buttonArea: {\n        verticalAlign: 'top',\n        display: 'inline-block',\n        textAlign: 'center',\n        // margin: '0 100px',\n        minWidth: 30,\n        height: 30\n    },\n    callout: {\n        maxWidth: 300\n    },\n    header: {\n        padding: '18px 24px 12px'\n    },\n    title: [\n        theme.fonts.xLarge,\n        {\n            margin: 0,\n            color: theme.palette.neutralPrimary,\n            fontWeight: FontWeights.semilight\n        }\n    ],\n    inner: {\n        height: '100%',\n        padding: '0 24px 20px'\n    },\n    actions: {\n        position: 'relative',\n        marginTop: 20,\n        width: '100%',\n        whiteSpace: 'nowrap'\n    },\n    subtext: [\n        theme.fonts.small,\n        {\n            margin: 0,\n            color: theme.palette.neutralPrimary,\n            fontWeight: FontWeights.semilight\n        }\n    ],\n    link: [\n        theme.fonts.medium,\n        {\n            color: theme.palette.neutralPrimary\n        }\n    ],\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        padding: '0 24px 24px'\n    }\n});\n","import * as React from 'react';\nimport ReactEcharts from 'echarts-for-react';\nimport { TableObj, EventMap } from '@static/interface';\nimport { filterDuration, convertDuration } from '@static/function';\nimport 'echarts/lib/chart/bar';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/title';\n\ninterface Runtrial {\n    trialId: string[];\n    trialTime: number[];\n}\n\ninterface DurationProps {\n    source: Array<TableObj>;\n}\n\ninterface DurationState {\n    startDuration: number; // for record data zoom\n    endDuration: number;\n    durationSource: {};\n}\n\nclass Duration extends React.Component<DurationProps, DurationState> {\n    constructor(props: DurationProps) {\n        super(props);\n        this.state = {\n            startDuration: 0, // for record data zoom\n            endDuration: 100,\n            durationSource: this.initDuration(this.props.source)\n        };\n    }\n\n    initDuration = (source: Array<TableObj>): any => {\n        const trialId: number[] = [];\n        const trialTime: number[] = [];\n        const trialJobs = source.filter(filterDuration);\n\n        trialJobs.forEach(item => {\n            trialId.push(item.sequenceId);\n            trialTime.push(item.duration);\n        });\n        return {\n            tooltip: {\n                trigger: 'axis',\n                axisPointer: {\n                    type: 'shadow'\n                },\n                formatter: (data: any): React.ReactNode =>\n                    '<div>' +\n                    '<div>Trial No.: ' +\n                    data[0].dataIndex +\n                    '</div>' +\n                    '<div>Duration: ' +\n                    convertDuration(data[0].data) +\n                    '</div>' +\n                    '</div>'\n            },\n            grid: {\n                bottom: '3%',\n                containLabel: true,\n                left: '1%',\n                right: '5%'\n            },\n            dataZoom: [\n                {\n                    id: 'dataZoomY',\n                    type: 'inside',\n                    yAxisIndex: [0],\n                    filterMode: 'empty',\n                    start: 0,\n                    end: 100\n                }\n            ],\n            xAxis: {\n                name: 'Time/s',\n                type: 'value'\n            },\n            yAxis: {\n                name: 'Trial No.',\n                type: 'category',\n                data: trialId,\n                nameTextStyle: {\n                    padding: [0, 0, 0, 30]\n                }\n            },\n            series: [\n                {\n                    type: 'bar',\n                    data: trialTime\n                }\n            ]\n        };\n    };\n\n    getOption = (dataObj: Runtrial): any => {\n        const { startDuration, endDuration } = this.state;\n        return {\n            tooltip: {\n                trigger: 'axis',\n                axisPointer: {\n                    type: 'shadow'\n                },\n                enterable: true,\n                formatter: (data: any): React.ReactNode =>\n                    `<div class=\"tooldetailAccuracy\">\n                        <div>Trial No.: ${data[0].dataIndex}</div>\n                        <div>Duration: ${convertDuration(data[0].data)}</div>\n                    </div>\n                    `\n            },\n            grid: {\n                bottom: '3%',\n                containLabel: true,\n                left: '1%',\n                right: '5%'\n            },\n            dataZoom: [\n                {\n                    id: 'dataZoomY',\n                    type: 'inside',\n                    yAxisIndex: [0],\n                    filterMode: 'empty',\n                    start: startDuration,\n                    end: endDuration\n                }\n            ],\n            xAxis: {\n                name: 'Time',\n                type: 'value'\n            },\n            yAxis: {\n                name: 'Trial',\n                type: 'category',\n                data: dataObj.trialId,\n                nameTextStyle: {\n                    padding: [0, 0, 0, 30]\n                }\n            },\n            series: [\n                {\n                    type: 'bar',\n                    data: dataObj.trialTime\n                }\n            ]\n        };\n    };\n\n    drawDurationGraph = (source: Array<TableObj>): void => {\n        // why this function run two times when props changed?\n        const trialId: string[] = [];\n        const trialTime: number[] = [];\n        const trialRun: Runtrial[] = [];\n        const trialJobs = source.filter(filterDuration);\n        Object.keys(trialJobs).map(item => {\n            const temp = trialJobs[item];\n            trialId.push(temp.sequenceId);\n            trialTime.push(temp.duration);\n        });\n        trialRun.push({\n            trialId: trialId,\n            trialTime: trialTime\n        });\n        this.setState({\n            durationSource: this.getOption(trialRun[0])\n        });\n    };\n\n    componentDidMount(): void {\n        const { source } = this.props;\n        this.drawDurationGraph(source);\n    }\n\n    componentDidUpdate(prevProps: DurationProps): void {\n        // add this if to prevent endless loop\n        if (this.props.source !== prevProps.source) {\n            this.drawDurationGraph(this.props.source);\n        }\n    }\n\n    render(): React.ReactNode {\n        const { durationSource } = this.state;\n        const onEvents = { dataZoom: this.durationDataZoom };\n\n        return (\n            <div className='graph'>\n                <ReactEcharts\n                    option={durationSource}\n                    style={{ width: '94%', height: 412, margin: '0 auto', marginTop: 15 }}\n                    theme='nni_theme'\n                    notMerge={true} // update now\n                    onEvents={onEvents}\n                />\n            </div>\n        );\n    }\n\n    private durationDataZoom = (e: EventMap): void => {\n        if (e.batch !== undefined) {\n            this.setState(() => ({\n                startDuration: e.batch[0].start !== null ? e.batch[0].start : 0,\n                endDuration: e.batch[0].end !== null ? e.batch[0].end : 100\n            }));\n        }\n    };\n}\n\nexport default Duration;\n","import * as React from 'react';\nimport { Dialog, DialogType, DialogFooter, Checkbox, PrimaryButton, DefaultButton } from '@fluentui/react';\n\n/**\n * changeColumnComponent file is for [customized table column, customized hyper-parameter graph yAxis]\n * and currently it uses localstorage to store the customized results\n */\n\ninterface ChangeColumnState {\n    // buffer, not saved yet\n    currentSelected: string[];\n}\n\ninterface ChangeColumnProps {\n    allColumns: SimpleColumn[]; // all column List\n    selectedColumns: string[]; // user selected column list\n    onSelectedChange: (val: string[]) => void;\n    onHideDialog: () => void;\n    minSelected?: number;\n    whichComponent: string; // which component use this component\n}\n\ninterface SimpleColumn {\n    key: string; // key for management\n    name: string; // name to display\n}\n\n//interface CheckBoxItems {\n//    label: string;\n//    checked: boolean;\n//    onChange: () => void;\n//}\n\nclass ChangeColumnComponent extends React.Component<ChangeColumnProps, ChangeColumnState> {\n    constructor(props: ChangeColumnProps) {\n        super(props);\n        this.state = {\n            currentSelected: this.props.selectedColumns\n        };\n    }\n\n    makeChangeHandler = (label: string): any => {\n        return (ev: any, checked: boolean): void => this.onCheckboxChange(ev, label, checked);\n    };\n\n    onCheckboxChange = (\n        ev: React.FormEvent<HTMLElement | HTMLInputElement> | undefined,\n        label: string,\n        val?: boolean\n    ): void => {\n        const source: string[] = [...this.state.currentSelected];\n        if (val === true) {\n            if (!source.includes(label)) {\n                source.push(label);\n                this.setState({ currentSelected: source });\n            }\n        } else {\n            // remove from source\n            const result = source.filter(item => item !== label);\n            this.setState({ currentSelected: result });\n        }\n    };\n\n    saveUserSelectColumn = (): void => {\n        const { currentSelected } = this.state;\n        const { allColumns, onSelectedChange, whichComponent } = this.props;\n        const selectedColumns = allColumns.map(column => column.key).filter(key => currentSelected.includes(key));\n        onSelectedChange(selectedColumns);\n        if (whichComponent === 'table') {\n            localStorage.setItem('columns', JSON.stringify(selectedColumns));\n        } else {\n            localStorage.setItem('paraColumns', JSON.stringify(selectedColumns));\n        }\n        this.hideDialog();\n    };\n\n    // user exit dialog\n    cancelOption = (): void => {\n        // reset select column\n        this.setState({ currentSelected: this.props.selectedColumns }, () => {\n            this.hideDialog();\n        });\n    };\n\n    private hideDialog = (): void => {\n        this.props.onHideDialog();\n    };\n\n    render(): React.ReactNode {\n        const { allColumns, minSelected } = this.props;\n        const { currentSelected } = this.state;\n        return (\n            <div>\n                <Dialog\n                    hidden={false}\n                    dialogContentProps={{\n                        type: DialogType.largeHeader,\n                        title: 'Customize columns',\n                        subText: 'You can choose which columns you wish to see.'\n                    }}\n                    modalProps={{\n                        isBlocking: false,\n                        styles: { main: { maxWidth: 450 } }\n                    }}\n                >\n                    <div className='columns-height'>\n                        {allColumns.map(item => (\n                            <Checkbox\n                                key={item.key}\n                                label={item.name}\n                                checked={currentSelected.includes(item.key)}\n                                onChange={this.makeChangeHandler(item.key)}\n                                styles={{ root: { marginBottom: 8 } }}\n                            />\n                        ))}\n                    </div>\n                    <DialogFooter>\n                        <PrimaryButton\n                            text='Save'\n                            onClick={this.saveUserSelectColumn}\n                            disabled={currentSelected.length < (minSelected === undefined ? 1 : minSelected)}\n                        />\n                        <DefaultButton text='Cancel' onClick={this.cancelOption} />\n                    </DialogFooter>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default ChangeColumnComponent;\n","import * as React from 'react';\nimport * as d3 from 'd3';\nimport { Dropdown, IDropdownOption, Stack, DefaultButton } from '@fluentui/react';\nimport ParCoords from 'parcoord-es';\nimport { SearchSpace } from '@model/searchspace';\nimport { filterByStatus } from '@static/function';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport { TableObj, SingleAxis, MultipleAxes } from '@static/interface';\nimport ChangeColumnComponent from '../ChangeColumnComponent';\n\nimport 'parcoord-es/dist/parcoords.css';\nimport '@style/button.scss';\nimport '@style/experiment/trialdetail/para.scss';\n\ninterface ParaState {\n    dimName: string[];\n    selectedPercent: string;\n    primaryMetricKey: string;\n    noChart: boolean;\n    customizeColumnsDialogVisible: boolean;\n    availableDimensions: string[];\n    chosenDimensions: string[];\n}\n\ninterface ParaProps {\n    trials: Array<TableObj>;\n    searchSpace: SearchSpace;\n}\n\nclass Para extends React.Component<ParaProps, ParaState> {\n    private paraRef = React.createRef<HTMLDivElement>();\n    private pcs: any;\n\n    private chartMulineStyle = {\n        width: '100%',\n        height: 392,\n        margin: '0 auto'\n    };\n    private innerChartMargins = {\n        top: 32,\n        right: 20,\n        bottom: 20,\n        left: 28\n    };\n\n    constructor(props: ParaProps) {\n        super(props);\n        this.state = {\n            dimName: [],\n            primaryMetricKey: 'default',\n            selectedPercent: '1',\n            noChart: true,\n            customizeColumnsDialogVisible: false,\n            availableDimensions: [],\n            chosenDimensions:\n                localStorage.getItem('paraColumns') !== null\n                    ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                      JSON.parse(localStorage.getItem('paraColumns')!)\n                    : []\n        };\n    }\n\n    // get percent value number\n    percentNum = (event: React.FormEvent<HTMLDivElement>, item?: IDropdownOption): void => {\n        if (item !== undefined) {\n            this.setState({ selectedPercent: item.key.toString() }, () => {\n                this.renderParallelCoordinates();\n            });\n        }\n    };\n\n    // select all final keys\n    updateEntries = (event: React.FormEvent<HTMLDivElement>, item: any): void => {\n        if (item !== undefined) {\n            this.setState({ primaryMetricKey: item.key }, () => {\n                this.renderParallelCoordinates();\n            });\n        }\n    };\n\n    componentDidMount(): void {\n        this.renderParallelCoordinates();\n    }\n\n    componentDidUpdate(prevProps: ParaProps): void {\n        // FIXME: redundant update\n        if (this.props.trials !== prevProps.trials || this.props.searchSpace !== prevProps.searchSpace) {\n            this.renderParallelCoordinates();\n        }\n    }\n\n    render(): React.ReactNode {\n        const { selectedPercent, noChart, customizeColumnsDialogVisible, availableDimensions, chosenDimensions } =\n            this.state;\n\n        return (\n            <div className='parameter'>\n                <Stack horizontal className='para-filter' horizontalAlign='end'>\n                    <DefaultButton\n                        text='Add/Remove axes'\n                        onClick={(): void => {\n                            this.setState({ customizeColumnsDialogVisible: true });\n                        }}\n                        styles={{ root: { marginRight: 10 } }}\n                    />\n                    <Dropdown\n                        selectedKey={selectedPercent}\n                        onChange={this.percentNum}\n                        options={[\n                            { key: '0.01', text: 'Top 1%' },\n                            { key: '0.05', text: 'Top 5%' },\n                            { key: '0.2', text: 'Top 20%' },\n                            { key: '1', text: 'Top 100%' }\n                        ]}\n                        styles={{ dropdown: { width: 120 } }}\n                        className='para-filter-percent'\n                    />\n                    {this.finalKeysDropdown()}\n                </Stack>\n                {customizeColumnsDialogVisible && availableDimensions.length > 0 && (\n                    <ChangeColumnComponent\n                        selectedColumns={chosenDimensions}\n                        allColumns={availableDimensions.map(dim => ({ key: dim, name: dim }))}\n                        onSelectedChange={(selected: string[]): void => {\n                            this.setState({ chosenDimensions: selected }, () => {\n                                this.renderParallelCoordinates();\n                            });\n                        }}\n                        onHideDialog={(): void => {\n                            this.setState({ customizeColumnsDialogVisible: false });\n                        }}\n                        minSelected={2}\n                        whichComponent='para'\n                    />\n                )}\n                <div className='parcoords' style={this.chartMulineStyle} ref={this.paraRef} />\n                {noChart && <div className='nodata'>No data</div>}\n            </div>\n        );\n    }\n\n    private finalKeysDropdown(): any {\n        const { primaryMetricKey } = this.state;\n        if (TRIALS.finalKeys().length === 1) {\n            return null;\n        } else {\n            const finalKeysDropdown: any = [];\n            TRIALS.finalKeys().forEach(item => {\n                finalKeysDropdown.push({\n                    key: item,\n                    text: item\n                });\n            });\n            return (\n                <div>\n                    <span className='para-filter-text para-filter-middle'>Metrics</span>\n                    <Dropdown\n                        selectedKey={primaryMetricKey}\n                        options={finalKeysDropdown}\n                        onChange={this.updateEntries}\n                        styles={{ root: { width: 150, display: 'inline-block' } }}\n                        className='para-filter-percent'\n                    />\n                </div>\n            );\n        }\n    }\n\n    /**\n     * Render the parallel coordinates. Using trial data as base and leverage\n     * information from search space at a best effort basis.\n     * @param source Array of trial data\n     * @param searchSpace Search space\n     */\n    private renderParallelCoordinates(): void {\n        const { searchSpace } = this.props;\n        const percent = parseFloat(this.state.selectedPercent);\n        const { primaryMetricKey, chosenDimensions } = this.state;\n\n        const inferredSearchSpace = TRIALS.inferredSearchSpace(searchSpace);\n        const inferredMetricSpace = TRIALS.inferredMetricSpace();\n        let convertedTrials = this.getTrialsAsObjectList(inferredSearchSpace, inferredMetricSpace);\n\n        const dimensions: [string, any][] = [];\n        let colorDim: string | undefined = undefined,\n            colorScale: any = undefined;\n        // treat every axis as numeric to fit for brush\n        for (const [k, v] of inferredSearchSpace.axes) {\n            dimensions.push([\n                k,\n                {\n                    type: 'number',\n                    yscale: this.convertToD3Scale(v)\n                }\n            ]);\n        }\n        for (const [k, v] of inferredMetricSpace.axes) {\n            const scale = this.convertToD3Scale(v);\n            if (k === primaryMetricKey && scale !== undefined && scale.interpolate) {\n                // set color for primary metrics\n                // `colorScale` is used to produce a color range, while `scale` is to produce a pixel range\n                colorScale = this.convertToD3Scale(v, false);\n                convertedTrials.sort((a, b) => (EXPERIMENT.optimizeMode === 'minimize' ? a[k] - b[k] : b[k] - a[k]));\n                // filter top trials\n                if (percent != 1) {\n                    const keptTrialNum = Math.max(Math.ceil(convertedTrials.length * percent), 1);\n                    convertedTrials = convertedTrials.slice(0, keptTrialNum);\n                    const domain = d3.extent(convertedTrials, item => item[k]);\n                    scale.domain([domain[0], domain[1]]);\n                    colorScale.domain([domain[0], domain[1]]);\n                    if (colorScale !== undefined) {\n                        colorScale.domain(domain);\n                    }\n                }\n                // reverse the converted trials to show the top ones upfront\n                convertedTrials.reverse();\n                const assignColors = (scale: any): void => {\n                    scale.range([0, 1]); // fake a range to perform invert\n                    const [scaleMin, scaleMax] = scale.domain();\n                    const pivot = scale.invert(0.5);\n                    scale\n                        .domain([scaleMin, pivot, scaleMax])\n                        .range(['#90EE90', '#FFC400', '#CA0000'])\n                        .interpolate(d3.interpolateHsl);\n                };\n                assignColors(colorScale);\n                colorDim = k;\n            }\n            dimensions.push([\n                k,\n                {\n                    type: 'number',\n                    yscale: scale\n                }\n            ]);\n        }\n\n        if (convertedTrials.length === 0 || dimensions.length <= 1) {\n            return;\n        }\n\n        const firstRun = this.pcs === undefined;\n        if (firstRun) {\n            this.pcs = ParCoords()(this.paraRef.current);\n        }\n        this.pcs\n            .data(convertedTrials)\n            .dimensions(\n                dimensions\n                    .filter(([d, _]) => chosenDimensions.length === 0 || chosenDimensions.includes(d))\n                    .reduce((obj, entry) => ({ ...obj, [entry[0]]: entry[1] }), {})\n            );\n        if (firstRun) {\n            this.pcs\n                .margin(this.innerChartMargins)\n                .alphaOnBrushed(0.2)\n                .smoothness(0.1)\n                .brushMode('1D-axes')\n                .reorderable()\n                .interactive();\n        }\n        if (colorScale !== undefined) {\n            this.pcs.color(d => (colorScale as any)(d[colorDim as any]));\n        }\n        this.pcs.render();\n        if (firstRun) {\n            this.setState({ noChart: false });\n        }\n\n        // set new available dims\n        this.setState({\n            availableDimensions: dimensions.map(e => e[0]),\n            chosenDimensions: chosenDimensions.length === 0 ? dimensions.map(e => e[0]) : chosenDimensions\n        });\n    }\n\n    private getTrialsAsObjectList(inferredSearchSpace: MultipleAxes, inferredMetricSpace: MultipleAxes): {}[] {\n        const { trials } = this.props;\n        const succeededTrials = trials.filter(filterByStatus);\n\n        return succeededTrials.map(s => {\n            const entries = Array.from(s.parameters(inferredSearchSpace).entries());\n            entries.push(...Array.from(s.metrics(inferredMetricSpace).entries()));\n            const ret = {};\n            for (const [k, v] of entries) {\n                ret[k.fullName] = v;\n            }\n            return ret;\n        });\n    }\n\n    private getRange(): [number, number] {\n        // Documentation is lacking.\n        // Reference: https://github.com/syntagmatic/parallel-coordinates/issues/308\n        // const range = this.pcs.height() - this.pcs.margin().top - this.pcs.margin().bottom;\n        const range = this.chartMulineStyle.height - this.innerChartMargins.top - this.innerChartMargins.bottom;\n        return [range, 1];\n    }\n\n    private convertToD3Scale(axis: SingleAxis, initRange: boolean = true): any {\n        const padLinear = ([x0, x1], k = 0.1): [number, number] => {\n            const dx = ((x1 - x0) * k) / 2;\n            return [x0 - dx, x1 + dx];\n        };\n        const padLog = ([x0, x1], k = 0.1): [number, number] => {\n            const [y0, y1] = padLinear([Math.log(x0), Math.log(x1)], k);\n            return [Math.exp(y0), Math.exp(y1)];\n        };\n        let scaleInst: any = undefined;\n        if (axis.scale === 'ordinal') {\n            if (axis.nested) {\n                // TODO: handle nested entries\n                scaleInst = d3.scalePoint().domain(Array.from(axis.domain.keys())).padding(0.2);\n            } else {\n                scaleInst = d3.scalePoint().domain(axis.domain).padding(0.2);\n            }\n        } else if (axis.scale === 'log') {\n            scaleInst = d3.scaleLog().domain(padLog(axis.domain));\n        } else if (axis.scale === 'linear') {\n            scaleInst = d3.scaleLinear().domain(padLinear(axis.domain));\n        }\n        if (initRange) {\n            scaleInst = scaleInst.range(this.getRange());\n        }\n        return scaleInst;\n    }\n}\n\nexport default Para;\n","import * as React from 'react';\nimport { Stack, PrimaryButton, Toggle, IStackTokens } from '@fluentui/react';\nimport { TooltipForIntermediate, TableObj, Intermedia, EventMap } from '@static/interface';\nimport { reformatRetiariiParameter } from '@static/function';\nimport ReactEcharts from 'echarts-for-react';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/title';\n\nconst stackTokens: IStackTokens = {\n    childrenGap: 20\n};\n\ninterface IntermediateState {\n    detailSource: Array<TableObj>;\n    interSource: object;\n    filterSource: Array<TableObj>;\n    eachIntermediateNum: number; // trial's intermediate number count\n    isLoadconfirmBtn: boolean;\n    isFilter?: boolean | undefined;\n    length: number;\n    clickCounts: number; // user filter intermediate click confirm btn's counts\n    startMediaY: number;\n    endMediaY: number;\n}\n\ninterface IntermediateProps {\n    source: Array<TableObj>;\n}\n\nclass Intermediate extends React.Component<IntermediateProps, IntermediateState> {\n    static intervalMediate = 1;\n    public pointInput!: HTMLInputElement | null;\n    public minValInput!: HTMLInputElement | null;\n    public maxValInput!: HTMLInputElement | null;\n\n    constructor(props: IntermediateProps) {\n        super(props);\n        this.state = {\n            detailSource: [],\n            interSource: {},\n            filterSource: [],\n            eachIntermediateNum: 1,\n            isLoadconfirmBtn: false,\n            isFilter: false,\n            length: 100000,\n            clickCounts: 0,\n            startMediaY: 0,\n            endMediaY: 100\n        };\n    }\n\n    drawIntermediate = (source: Array<TableObj>): void => {\n        if (source.length > 0) {\n            this.setState({\n                length: source.length,\n                detailSource: source\n            });\n            const { startMediaY, endMediaY } = this.state;\n            const trialIntermediate: Array<Intermedia> = [];\n            Object.keys(source).map(item => {\n                const temp = source[item];\n                trialIntermediate.push({\n                    name: temp.id,\n                    trialNum: temp.sequenceId,\n                    data: temp.description.intermediate,\n                    type: 'line',\n                    hyperPara: temp.description.parameters\n                });\n            });\n            // find max intermediate number\n            trialIntermediate.sort((a, b) => {\n                return b.data.length - a.data.length;\n            });\n            const legend: string[] = [];\n            // max length\n            const length = trialIntermediate[0].data.length;\n            const xAxis: number[] = [];\n            Object.keys(trialIntermediate).map(item => {\n                const temp = trialIntermediate[item];\n                legend.push(temp.name);\n            });\n            for (let i = 1; i <= length; i++) {\n                xAxis.push(i);\n            }\n            const option = {\n                tooltip: {\n                    trigger: 'item',\n                    enterable: true,\n                    confine: true,\n                    formatter: function (data: TooltipForIntermediate): React.ReactNode {\n                        const trialId = data.seriesName;\n                        let parameters = {};\n                        let trialNum = 0;\n                        const temp = trialIntermediate.find(key => key.name === trialId);\n                        if (temp !== undefined) {\n                            parameters = temp.hyperPara;\n                            trialNum = temp.trialNum;\n                        }\n                        return `\n                            <div class=\"tooldetailAccuracy\">\n                                <div>Trial No.: ${trialNum}</div> \n                                <div>Trial ID: ${trialId}</div>\n                                <div>Intermediate: ${data.data}</div>\n                                <div>Parameters: <pre>${JSON.stringify(\n                                    reformatRetiariiParameter(parameters),\n                                    null,\n                                    4\n                                )}</pre>\n                                </div>\n                            </div>\n                        `;\n                    }\n                },\n                grid: {\n                    left: '5%',\n                    top: 40,\n                    containLabel: true\n                },\n                xAxis: {\n                    type: 'category',\n                    // name: '# Intermediate',\n                    boundaryGap: false,\n                    data: xAxis\n                },\n                yAxis: {\n                    type: 'value',\n                    name: 'Metric',\n                    scale: true\n                },\n                dataZoom: [\n                    {\n                        id: 'dataZoomY',\n                        type: 'inside',\n                        yAxisIndex: [0],\n                        filterMode: 'none',\n                        start: startMediaY,\n                        end: endMediaY\n                    }\n                ],\n                series: trialIntermediate\n            };\n            this.setState({\n                interSource: option\n            });\n        } else {\n            const nullData = {\n                grid: {\n                    left: '5%',\n                    top: 40,\n                    containLabel: true\n                },\n                xAxis: {\n                    type: 'category',\n                    boundaryGap: false\n                },\n                yAxis: {\n                    type: 'value',\n                    name: 'Metric'\n                }\n            };\n            this.setState({ interSource: nullData });\n        }\n    };\n\n    // confirm btn function [filter data]\n    filterLines = (): void => {\n        const filterSource: Array<TableObj> = [];\n        this.setState({ isLoadconfirmBtn: true }, () => {\n            const { source } = this.props;\n            // get input value\n            const pointVal = this.pointInput !== null ? this.pointInput.value : '';\n            const minVal = this.minValInput !== null ? this.minValInput.value : '';\n            const maxVal = this.maxValInput !== null ? this.maxValInput.value : '';\n            // user not input message\n            if (pointVal === '' || minVal === '') {\n                alert('Please input filter message');\n            } else {\n                // user not input max value\n                const position = JSON.parse(pointVal);\n                const min = JSON.parse(minVal);\n                if (maxVal === '') {\n                    Object.keys(source).map(item => {\n                        const temp = source[item];\n                        const val = temp.description.intermediate[position - 1];\n                        if (val >= min) {\n                            filterSource.push(temp);\n                        }\n                    });\n                } else {\n                    const max = JSON.parse(maxVal);\n                    Object.keys(source).map(item => {\n                        const temp = source[item];\n                        const val = temp.description.intermediate[position - 1];\n                        if (val >= min && val <= max) {\n                            filterSource.push(temp);\n                        }\n                    });\n                }\n                this.setState({ filterSource: filterSource });\n                this.drawIntermediate(filterSource);\n            }\n            const counts = this.state.clickCounts + 1;\n            this.setState({ isLoadconfirmBtn: false, clickCounts: counts });\n        });\n    };\n\n    switchTurn = (ev: React.MouseEvent<HTMLElement>, checked?: boolean): void => {\n        this.setState({ isFilter: checked });\n        if (checked === false) {\n            this.drawIntermediate(this.props.source);\n        }\n    };\n\n    componentDidMount(): void {\n        const { source } = this.props;\n        this.drawIntermediate(source);\n    }\n\n    componentDidUpdate(prevProps: IntermediateProps, prevState: any): void {\n        if (this.props.source !== prevProps.source || this.state.isFilter !== prevState.isFilter) {\n            const { isFilter, filterSource } = this.state;\n            const { source } = this.props;\n\n            if (isFilter === true) {\n                const pointVal = this.pointInput !== null ? this.pointInput.value : '';\n                const minVal = this.minValInput !== null ? this.minValInput.value : '';\n                if (pointVal === '' && minVal === '') {\n                    this.drawIntermediate(source);\n                } else {\n                    this.drawIntermediate(filterSource);\n                }\n            } else {\n                this.drawIntermediate(source);\n            }\n        }\n    }\n\n    render(): React.ReactNode {\n        const { interSource, isLoadconfirmBtn, isFilter } = this.state;\n        const IntermediateEvents = { dataZoom: this.intermediateDataZoom };\n\n        return (\n            <div>\n                {/* style in para.scss */}\n                <Stack horizontal horizontalAlign='end' tokens={stackTokens} className='meline intermediate'>\n                    {isFilter ? (\n                        <div>\n                            <span className='filter-x'># Intermediate result</span>\n                            <input\n                                // placeholder=\"point\"\n                                ref={(input): any => (this.pointInput = input)}\n                                className='strange'\n                            />\n                            <span>Metric range</span>\n                            <input\n                                // placeholder=\"range\"\n                                ref={(input): any => (this.minValInput = input)}\n                            />\n                            <span className='hyphen'>-</span>\n                            <input\n                                // placeholder=\"range\"\n                                ref={(input): any => (this.maxValInput = input)}\n                            />\n                            <PrimaryButton text='Confirm' onClick={this.filterLines} disabled={isLoadconfirmBtn} />\n                        </div>\n                    ) : null}\n                    {/* filter message */}\n                    <Stack horizontal className='filter-toggle'>\n                        <span>Filter</span>\n                        <Toggle onChange={this.switchTurn} />\n                    </Stack>\n                </Stack>\n                <div className='intermediate-graph graph'>\n                    <ReactEcharts\n                        option={interSource}\n                        style={{ width: '100%', height: 400, margin: '0 auto' }}\n                        notMerge={true} // update now\n                        onEvents={IntermediateEvents}\n                    />\n                    <div className='xAxis'># Intermediate result</div>\n                </div>\n            </div>\n        );\n    }\n\n    private intermediateDataZoom = (e: EventMap): void => {\n        if (e.batch !== undefined) {\n            this.setState(() => ({\n                startMediaY: e.batch[0].start !== null ? e.batch[0].start : 0,\n                endMediaY: e.batch[0].end !== null ? e.batch[0].end : 100\n            }));\n        }\n    };\n}\n\nexport default Intermediate;\n","import { mergeStyleSets } from '@fluentui/react';\nimport { trialJobStatus } from '@static/const';\nimport { EXPERIMENT } from '@static/datamodel';\nimport { TableObj, SearchItems } from '@static/interface';\n\nconst classNames = mergeStyleSets({\n    menu: {\n        textAlign: 'center',\n        maxWidth: 600,\n        selectors: {\n            '.ms-ContextualMenu-item': {\n                height: 'auto'\n            }\n        }\n    },\n    item: {\n        display: 'inline-block',\n        width: 40,\n        height: 40,\n        lineHeight: 40,\n        textAlign: 'center',\n        verticalAlign: 'middle',\n        marginBottom: 8,\n        cursor: 'pointer',\n        selectors: {\n            '&:hover': {\n                backgroundColor: '#eaeaea'\n            }\n        }\n    },\n    categoriesList: {\n        margin: 0,\n        padding: 0,\n        listStyleType: 'none'\n    },\n    button: {\n        width: '40%',\n        margin: '2%'\n    }\n});\n\nfunction getDropdownOptions(parameter): any {\n    if (parameter === 'StatusNNI') {\n        return trialJobStatus.map(item => ({\n            key: item,\n            text: item\n        }));\n    } else {\n        return EXPERIMENT.searchSpace[parameter]._value.map(item => ({\n            key: item.toString(),\n            text: item.toString()\n        }));\n    }\n}\n\n// change origin data according to parameter type, string -> number\nconst convertParametersValue = (searchItems: SearchItems[], relation: Map<string, string>): SearchItems[] => {\n    const choice: any[] = [];\n    const copySearchItems = JSON.parse(JSON.stringify(searchItems));\n    copySearchItems.forEach(item => {\n        if (relation.get(item.name) === 'number') {\n            if (item.isChoice === true) {\n                item.choice.forEach(ele => {\n                    choice.push(JSON.parse(ele));\n                });\n                item.choice = choice;\n            } else {\n                item.value1 = JSON.parse(item.value1);\n                if (item.value2 !== '') {\n                    item.value2 = JSON.parse(item.value2);\n                }\n            }\n        }\n    });\n\n    return copySearchItems;\n};\n// relation: trial parameter -> type {conv_size -> number}\nconst getTrialsBySearchFilters = (\n    arr: TableObj[],\n    searchItems: SearchItems[],\n    relation: Map<string, string>\n): TableObj[] => {\n    const que = convertParametersValue(searchItems, relation);\n    // start to filter data by ['Trial id', 'Trial No.', 'Status'] [...parameters]...\n    que.forEach(element => {\n        if (element.name === 'Trial id') {\n            arr = arr.filter(trial => trial.id.toUpperCase().includes(element.value1.toUpperCase()));\n        } else if (element.name === 'Trial No.') {\n            arr = arr.filter(trial => trial.sequenceId.toString() === element.value1);\n        } else if (element.name === 'StatusNNI') {\n            arr = searchChoiceFilter(arr, element, 'status');\n        } else {\n            const parameter = `space/${element.name}`;\n\n            if (element.isChoice === true) {\n                arr = searchChoiceFilter(arr, element, element.name);\n            } else {\n                if (element.operator === '=') {\n                    arr = arr.filter(trial => trial[parameter] === element.value1);\n                } else if (element.operator === '>') {\n                    arr = arr.filter(trial => trial[parameter] > element.value1);\n                } else if (element.operator === '<') {\n                    arr = arr.filter(trial => trial[parameter] < element.value1);\n                } else if (element.operator === 'between') {\n                    arr = arr.filter(trial => trial[parameter] > element.value1 && trial[parameter] < element.value2);\n                } else {\n                    // operator is '≠'\n                    arr = arr.filter(trial => trial[parameter] !== element.value1);\n                }\n            }\n        }\n    });\n\n    return arr;\n};\n\n// isChoice = true: status and trial parameters\nfunction findTrials(arr: TableObj[], choice: string[], filed: string): TableObj[] {\n    const newResult: TableObj[] = [];\n    const parameter = filed === 'status' ? 'status' : `space/${filed}`;\n    arr.forEach(trial => {\n        choice.forEach(item => {\n            if (trial[parameter] === item) {\n                newResult.push(trial);\n            }\n        });\n    });\n\n    return newResult;\n}\n\nfunction searchChoiceFilter(arr: TableObj[], element: SearchItems, field: string): TableObj[] {\n    if (element.operator === '=') {\n        return findTrials(arr, element.choice, field);\n    } else {\n        let choice;\n        if (field === 'status') {\n            choice = trialJobStatus.filter(index => !new Set(element.choice).has(index));\n        } else {\n            choice = EXPERIMENT.searchSpace[field]._value.filter(index => !new Set(element.choice).has(index));\n        }\n        return findTrials(arr, choice, field);\n    }\n}\n\n// click Apply btn: set searchBox value now\nfunction getSearchInputValueBySearchList(searchFilter): string {\n    let str = ''; // store search input value\n\n    searchFilter.forEach(item => {\n        const filterName = item.name === 'StatusNNI' ? 'Status' : item.name;\n\n        if (item.isChoice === false) {\n            // id, No, !choice parameter\n            if (item.name === 'Trial id' || item.name === 'Trial No.') {\n                str = str + `${item.name}:${item.value1}; `;\n            } else {\n                // !choice parameter\n                if (['=', '≠', '>', '<'].includes(item.operator)) {\n                    str = str + `${filterName}${item.operator === '=' ? ':' : item.operator}${item.value1}; `;\n                } else {\n                    // between\n                    str = str + `${filterName}:[${item.value1},${item.value2}]; `;\n                }\n            }\n        } else {\n            // status, choice parameter\n            str = str + `${filterName}${item.operator === '=' ? ':' : '≠'}[${[...item.choice]}]; `;\n        }\n    });\n\n    return str;\n}\n\n/***\n * from experiment search space\n* \"conv_size\": {\n        \"_type\": \"choice\", // is choice type\n        \"_value\": [\n            2,\n            3,\n            5,\n            7\n        ]\n    },\n */\nfunction isChoiceType(parameterName): boolean {\n    // 判断是 [choice, status] 还是普通的类型\n    let flag = false; // normal type\n\n    if (parameterName === 'StatusNNI') {\n        flag = true;\n    }\n\n    if (parameterName in EXPERIMENT.searchSpace) {\n        flag = EXPERIMENT.searchSpace[parameterName]._type === 'choice' ? true : false;\n    }\n\n    return flag;\n}\n\nexport { classNames, getDropdownOptions, getTrialsBySearchFilters, getSearchInputValueBySearchList, isChoiceType };\n","import { getTheme, mergeStyleSets, FontWeights, FontSizes } from '@fluentui/react';\n// Themed styles for the example.\nconst theme = getTheme();\nconst contentStyles = mergeStyleSets({\n    container: {\n        display: 'flex',\n        flexFlow: 'column nowrap',\n        alignItems: 'stretch'\n    },\n    header: [\n        theme.fonts.xLargePlus,\n        {\n            flex: '1 1 auto',\n            borderTop: `4px solid ${theme.palette.themePrimary}`,\n            color: theme.palette.neutralPrimary,\n            display: 'flex',\n            fontSize: FontSizes.xLarge,\n            alignItems: 'center',\n            fontWeight: FontWeights.semibold,\n            padding: '12px 12px 14px 24px'\n        }\n    ],\n    body: {\n        flex: '4 4 auto',\n        padding: '0 24px 24px 24px',\n        overflowY: 'hidden',\n        selectors: {\n            p: {\n                margin: '14px 0'\n            },\n            'p:first-child': {\n                marginTop: 0\n            },\n            'p:last-child': {\n                marginBottom: 0\n            }\n        }\n    }\n});\n\nconst iconButtonStyles = mergeStyleSets({\n    root: {\n        color: theme.palette.neutralPrimary,\n        marginLeft: 'auto',\n        marginTop: '4px',\n        marginRight: '2px'\n    },\n    rootHovered: {\n        color: theme.palette.neutralDark\n    }\n});\n\nexport { contentStyles, iconButtonStyles };\n","import * as React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { Stack, Modal, IconButton, IDragOptions, ContextualMenu, Dropdown, IDropdownOption } from '@fluentui/react';\nimport ReactEcharts from 'echarts-for-react';\nimport { TooltipForIntermediate, TableObj, SingleAxis } from '@static/interface';\nimport { contentStyles, iconButtonStyles } from '@components/fluent/ModalTheme';\nimport { convertDuration, parseMetrics } from '@static/function';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport '@style/experiment/trialdetail/compare.scss';\n\n/***\n * Compare file is designed for [each trial intermediate result, trials compare model]\n * if trial has dict intermediate result,\n * graph only supports to show all keys that type is number\n */\n\nfunction _getWebUIWidth(): number {\n    return window.innerWidth;\n}\n\nconst dragOptions: IDragOptions = {\n    moveMenuItemText: 'Move',\n    closeMenuItemText: 'Close',\n    menu: ContextualMenu\n};\n\n// TODO: this should be refactored to the common modules\n// copied from trial.ts\nfunction _parseIntermediates(trial: TableObj, key: string): number[] {\n    const intermediates: number[] = [];\n    for (const metric of trial.intermediates) {\n        if (metric === undefined) {\n            break;\n        }\n        const parsedMetric = parseMetrics(metric.data);\n        if (typeof parsedMetric === 'object') {\n            // TODO: should handle more types of metric keys\n            intermediates.push(parsedMetric[key]);\n        } else {\n            intermediates.push(parsedMetric);\n        }\n    }\n    return intermediates;\n}\n\ninterface Item {\n    id: string;\n    sequenceId: number;\n    duration: string;\n    parameters: Map<string, any>;\n    metrics: Map<string, any>;\n    intermediates: number[];\n}\n\ninterface CompareProps {\n    trials: TableObj[];\n    title: string;\n    showDetails: boolean;\n    intermediateKeyList?: string[];\n    onHideDialog: () => void;\n    changeSelectTrialIds?: () => void;\n}\n\ninterface CompareState {\n    intermediateKey: string; // default, dict other keys\n}\n\nclass Compare extends React.Component<CompareProps, CompareState> {\n    constructor(props: CompareProps) {\n        super(props);\n\n        this.state = {\n            // intermediate result maybe don't have the 'default' key...\n            intermediateKey:\n                this.props.intermediateKeyList !== undefined ? this.props.intermediateKeyList[0] : 'default'\n        };\n    }\n\n    private _generateTooltipSummary = (row: Item, value: string): string =>\n        renderToString(\n            <div className='tooldetailAccuracy'>\n                <div>Trial No.: {row.sequenceId}</div>\n                <div>Trial ID: {row.id}</div>\n                <div>Intermediate metric: {value}</div>\n            </div>\n        );\n\n    private _intermediates(items: Item[]): React.ReactNode {\n        // Precondition: make sure `items` is not empty\n        const xAxisMax = Math.max(...items.map(item => item.intermediates.length));\n        const xAxis = Array(xAxisMax)\n            .fill(0)\n            .map((_, i) => i + 1); // [1, 2, 3, ..., xAxisMax]\n        const dataForEchart = items.map(item => ({\n            name: item.id,\n            data: item.intermediates,\n            type: 'line'\n        }));\n        const legend = dataForEchart.map(item => item.name);\n        const option = {\n            tooltip: {\n                trigger: 'item',\n                enterable: true,\n                confine: true,\n                formatter: (data: TooltipForIntermediate): string => {\n                    const item = items.find(k => k.id === data.seriesName) as Item;\n                    return this._generateTooltipSummary(item, data.data);\n                }\n            },\n            grid: {\n                left: '5%',\n                top: 40,\n                containLabel: true\n            },\n            legend: {\n                type: 'scroll',\n                right: 40,\n                left: legend.length > 6 ? '15%' : null,\n                data: legend\n            },\n            xAxis: {\n                type: 'category',\n                boundaryGap: false,\n                data: xAxis\n            },\n            yAxis: {\n                type: 'value',\n                name: 'Metric',\n                scale: true\n            },\n            series: dataForEchart\n        };\n        return (\n            <div className='graph'>\n                <ReactEcharts\n                    option={option}\n                    style={{ width: '100%', height: 418, margin: '0 auto' }}\n                    notMerge={true} // update now\n                />\n            </div>\n        );\n    }\n\n    private _renderRow(\n        key: string,\n        rowName: string,\n        className: string,\n        items: Item[],\n        formatter: (item: Item) => string\n    ): React.ReactNode {\n        return (\n            <tr key={key}>\n                <td className='column'>{rowName}</td>\n                {items.map(item => (\n                    <td className={className} key={item.id}>\n                        {formatter(item) || '--'}\n                    </td>\n                ))}\n            </tr>\n        );\n    }\n\n    private _overlapKeys(s: Map<string, any>[]): string[] {\n        // Calculate the overlapped keys for multiple\n        const intersection: string[] = [];\n        for (const i of s[0].keys()) {\n            let inAll = true;\n            for (const t of s) {\n                if (!Array.from(t.keys()).includes(i)) {\n                    inAll = false;\n                    break;\n                }\n            }\n            if (inAll) {\n                intersection.push(i);\n            }\n        }\n        return intersection;\n    }\n\n    // render table column ---\n    private _columns(items: Item[]): React.ReactNode {\n        // Precondition: make sure `items` is not empty\n        const width = _getWebUIWidth();\n        let scrollClass: string = '';\n        if (width > 1200) {\n            scrollClass = items.length > 3 ? 'flex' : '';\n        } else if (width < 700) {\n            scrollClass = items.length > 1 ? 'flex' : '';\n        } else {\n            scrollClass = items.length > 2 ? 'flex' : '';\n        }\n        const parameterKeys = this._overlapKeys(items.map(item => item.parameters));\n        const metricKeys = this._overlapKeys(items.map(item => item.metrics));\n\n        return (\n            <table className={`compare-modal-table ${scrollClass}`}>\n                <tbody>\n                    {this._renderRow('id', 'ID', 'value idList', items, item => item.id)}\n                    {this._renderRow('trialnum', 'Trial No.', 'value', items, item => item.sequenceId.toString())}\n                    {this._renderRow('duration', 'Duration', 'value', items, item => item.duration)}\n                    {parameterKeys.map(k =>\n                        this._renderRow(`space_${k}`, k, 'value', items, item => item.parameters.get(k))\n                    )}\n                    {metricKeys !== undefined\n                        ? metricKeys.map(k =>\n                              this._renderRow(`metrics_${k}`, `Metric: ${k}`, 'value', items, item =>\n                                  item.metrics.get(k)\n                              )\n                          )\n                        : null}\n                </tbody>\n            </table>\n        );\n    }\n\n    private closeCompareModal = (): void => {\n        const { showDetails, changeSelectTrialIds, onHideDialog } = this.props;\n        if (showDetails === true) {\n            // eslint-disable-next-line  @typescript-eslint/no-non-null-assertion\n            changeSelectTrialIds!();\n        }\n        onHideDialog();\n    };\n\n    private selectOtherKeys = (_event: React.FormEvent<HTMLDivElement>, item?: IDropdownOption): void => {\n        if (item !== undefined) {\n            this.setState(() => ({ intermediateKey: item.text }));\n        }\n    };\n\n    render(): React.ReactNode {\n        const { trials, title, showDetails, intermediateKeyList } = this.props;\n        const { intermediateKey } = this.state;\n        const intermediateAllKeysList: string[] = intermediateKeyList !== undefined ? intermediateKeyList : [];\n        const flatten = (m: Map<SingleAxis, any>): Map<string, any> => {\n            return new Map(Array.from(m).map(([key, value]) => [key.baseName, value]));\n        };\n        const inferredSearchSpace = TRIALS.inferredSearchSpace(EXPERIMENT.searchSpaceNew);\n        const items: Item[] = trials.map(trial => ({\n            id: trial.id,\n            sequenceId: trial.sequenceId,\n            duration: convertDuration(trial.duration),\n            parameters: flatten(trial.parameters(inferredSearchSpace)),\n            metrics: flatten(trial.metrics(TRIALS.inferredMetricSpace())),\n            intermediates: _parseIntermediates(trial, intermediateKey)\n        }));\n\n        return (\n            <Modal\n                isOpen={true}\n                containerClassName={contentStyles.container}\n                className='compare-modal'\n                allowTouchBodyScroll={true}\n                dragOptions={dragOptions}\n                onDismiss={this.closeCompareModal}\n            >\n                <div>\n                    <div className={contentStyles.header}>\n                        <span>{title}</span>\n                        <IconButton\n                            styles={iconButtonStyles}\n                            iconProps={{ iconName: 'Cancel' }}\n                            ariaLabel='Close popup modal'\n                            onClick={this.closeCompareModal}\n                        />\n                    </div>\n                    {intermediateAllKeysList.length > 1 ||\n                    (intermediateAllKeysList.length === 1 && intermediateAllKeysList !== ['default']) ? (\n                        <Stack horizontalAlign='end' className='selectKeys'>\n                            <Dropdown\n                                className='select'\n                                selectedKey={intermediateKey}\n                                options={intermediateAllKeysList.map((key, item) => ({\n                                    key: key,\n                                    text: intermediateAllKeysList[item]\n                                }))}\n                                onChange={this.selectOtherKeys}\n                            />\n                        </Stack>\n                    ) : null}\n                    <Stack className='compare-modal-intermediate'>\n                        {this._intermediates(items)}\n                        <Stack className='compare-yAxis'># Intermediate result</Stack>\n                    </Stack>\n                    {showDetails && <Stack>{this._columns(items)}</Stack>}\n                </div>\n            </Modal>\n        );\n    }\n}\n\nexport default Compare;\n","import * as React from 'react';\nimport axios from 'axios';\nimport { Stack, StackItem, PrimaryButton, DefaultButton } from '@fluentui/react';\nimport { Dialog, DialogType, DialogFooter } from '@fluentui/react/lib/Dialog';\nimport { MANAGER_IP } from '@static/const';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport { warining, errorBadge, completed } from '@components/fluent/Icon';\nimport '@style/experiment/trialdetail/customized.scss';\n\n/**\n * customized trial file is for\n * [rerun failed trial,\n * change trial parameters and add this customized trial into the experiment]\n */\n\ninterface CustomizeProps {\n    visible: boolean;\n    copyTrialId: string;\n    closeCustomizeModal: () => void;\n}\n\ninterface CustomizeState {\n    isShowSubmitSucceed: boolean;\n    isShowSubmitFailed: boolean;\n    isShowWarning: boolean;\n    searchSpace: object;\n    copyTrialParameter: object; // user click the trial's parameters\n    customParameters: object; // customized trial, maybe user change trial's parameters\n    customID: number; // submit customized trial succeed, return the new customized trial id\n    changeMap: Map<string, string | number>; // store change key: value\n}\n\nclass Customize extends React.Component<CustomizeProps, CustomizeState> {\n    constructor(props: CustomizeProps) {\n        super(props);\n        this.state = {\n            isShowSubmitSucceed: false,\n            isShowSubmitFailed: false,\n            isShowWarning: false,\n            searchSpace: EXPERIMENT.searchSpace,\n            copyTrialParameter: {},\n            customParameters: {},\n            customID: NaN,\n            changeMap: new Map()\n        };\n    }\n\n    getFinalVal = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const { name, value } = event.target;\n        const { changeMap } = this.state;\n        this.setState({ changeMap: changeMap.set(name, value) });\n    };\n\n    // [submit click] user add a new trial [submit a trial]\n    addNewTrial = (): void => {\n        const { searchSpace, copyTrialParameter, changeMap } = this.state;\n        // get user edited hyperParameter, ps: will change data type if you modify the input val\n        const customized = JSON.parse(JSON.stringify(copyTrialParameter));\n        // changeMap: user changed keys: values\n        changeMap.forEach(function (value, key) {\n            customized[key] = value;\n        });\n\n        // true: parameters are wrong\n        let parametersIllegal = false;\n        Object.keys(customized).map(item => {\n            if (item !== 'tag') {\n                // unified data type\n                if (\n                    (typeof copyTrialParameter[item] === 'number' && typeof customized[item] === 'string') ||\n                    (typeof copyTrialParameter[item] === 'boolean' && typeof customized[item] === 'string')\n                ) {\n                    customized[item] = JSON.parse(customized[item]);\n                }\n                if (searchSpace[item] === undefined) {\n                    // sometimes the schema of trial parameters is different from search space\n                    // e.g. Batch Tuner\n                    return;\n                }\n                if (searchSpace[item]._type === 'choice') {\n                    if (\n                        searchSpace[item]._value.find((val: string | number) => val === customized[item]) === undefined\n                    ) {\n                        parametersIllegal = true;\n                        return;\n                    }\n                } else {\n                    if (\n                        customized[item] < searchSpace[item]._value[0] ||\n                        customized[item] > searchSpace[item]._value[1]\n                    ) {\n                        parametersIllegal = true;\n                        return;\n                    }\n                }\n            }\n        });\n        if (parametersIllegal !== false) {\n            // open the warning modal\n            this.setState(() => ({ isShowWarning: true, customParameters: customized }));\n        } else {\n            // submit a customized job\n            this.submitCustomize(customized);\n        }\n    };\n\n    warningConfirm = (): void => {\n        this.setState(() => ({ isShowWarning: false }));\n        const { customParameters } = this.state;\n        this.submitCustomize(customParameters);\n    };\n\n    warningCancel = (): void => {\n        this.setState(() => ({ isShowWarning: false }));\n    };\n\n    submitCustomize = (customized: Record<string, any>): void => {\n        // delete `tag` key\n        for (const i in customized) {\n            if (i === 'tag') {\n                delete customized[i];\n            }\n        }\n        axios(`${MANAGER_IP}/trial-jobs`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            data: customized\n        })\n            .then(res => {\n                if (res.status === 200) {\n                    this.setState(() => ({ isShowSubmitSucceed: true, customID: res.data.sequenceId }));\n                    this.props.closeCustomizeModal();\n                } else {\n                    this.setState(() => ({ isShowSubmitFailed: true }));\n                }\n            })\n            .catch(() => {\n                this.setState(() => ({ isShowSubmitFailed: true }));\n            });\n    };\n\n    closeSucceedHint = (): void => {\n        // also close customized trial modal\n        this.setState(() => ({ isShowSubmitSucceed: false, changeMap: new Map() }));\n        this.props.closeCustomizeModal();\n    };\n\n    closeFailedHint = (): void => {\n        // also close customized trial modal\n        this.setState(() => ({ isShowSubmitFailed: false, changeMap: new Map() }));\n        this.props.closeCustomizeModal();\n    };\n\n    componentDidMount(): void {\n        const { copyTrialId } = this.props;\n        if (copyTrialId !== undefined && TRIALS.getTrial(copyTrialId) !== undefined) {\n            const originCopyTrialPara = TRIALS.getTrial(copyTrialId).description.parameters;\n            this.setState(() => ({ copyTrialParameter: originCopyTrialPara }));\n        }\n    }\n\n    componentDidUpdate(prevProps: CustomizeProps): void {\n        if (this.props.copyTrialId !== prevProps.copyTrialId) {\n            const { copyTrialId } = this.props;\n            if (copyTrialId !== undefined && TRIALS.getTrial(copyTrialId) !== undefined) {\n                const originCopyTrialPara = TRIALS.getTrial(copyTrialId).description.parameters;\n                this.setState(() => ({ copyTrialParameter: originCopyTrialPara }));\n            }\n        }\n    }\n\n    render(): React.ReactNode {\n        const { closeCustomizeModal, visible } = this.props;\n        const { isShowSubmitSucceed, isShowSubmitFailed, isShowWarning, customID, copyTrialParameter } = this.state;\n        const warning =\n            'The parameters you set are not in our search space, this may cause the tuner to crash, Are' +\n            ' you sure you want to continue submitting?';\n        return (\n            <Stack>\n                <Dialog\n                    hidden={!visible} // required field!\n                    dialogContentProps={{\n                        type: DialogType.largeHeader,\n                        title: 'Customized trial setting',\n                        subText: 'You can submit a customized trial.'\n                    }}\n                    modalProps={{\n                        isBlocking: false,\n                        styles: { main: { maxWidth: 450 } }\n                    }}\n                >\n                    <form className='hyper-box'>\n                        {Object.keys(copyTrialParameter).map(item => (\n                            <Stack horizontal key={item} className='hyper-form'>\n                                <StackItem styles={{ root: { minWidth: 100 } }} className='title'>\n                                    {item}\n                                </StackItem>\n                                <StackItem className='inputs'>\n                                    <input\n                                        type='text'\n                                        name={item}\n                                        defaultValue={copyTrialParameter[item]}\n                                        onChange={this.getFinalVal}\n                                    />\n                                </StackItem>\n                            </Stack>\n                        ))}\n                        {/* disable [tag] because we havn't support */}\n                        {/* <Stack key=\"tag\" horizontal className=\"hyper-form tag-input\">\n                            <StackItem grow={9} className=\"title\">Tag</StackItem>\n                            <StackItem grow={15} className=\"inputs\">\n                                <input type=\"text\" value='Customized' />\n                            </StackItem>\n                        </Stack> */}\n                    </form>\n                    <DialogFooter>\n                        <PrimaryButton text='Submit' onClick={this.addNewTrial} />\n                        <DefaultButton text='Cancel' onClick={closeCustomizeModal} />\n                    </DialogFooter>\n                </Dialog>\n\n                {/* clone: prompt succeed or failed */}\n                <Dialog\n                    hidden={!isShowSubmitSucceed}\n                    onDismiss={this.closeSucceedHint}\n                    dialogContentProps={{\n                        type: DialogType.normal,\n                        title: (\n                            <div className='icon-color'>\n                                {completed}\n                                <b>Submit successfully</b>\n                            </div>\n                        ),\n                        closeButtonAriaLabel: 'Close',\n                        subText: `You can find your customized trial by Trial No.${customID}`\n                    }}\n                    modalProps={{\n                        isBlocking: false,\n                        styles: { main: { minWidth: 500 } }\n                    }}\n                >\n                    <DialogFooter>\n                        <PrimaryButton onClick={this.closeSucceedHint} text='OK' />\n                    </DialogFooter>\n                </Dialog>\n\n                <Dialog\n                    hidden={!isShowSubmitFailed}\n                    onDismiss={this.closeSucceedHint}\n                    dialogContentProps={{\n                        type: DialogType.normal,\n                        title: <div className='icon-error'>{errorBadge}Submit Failed</div>,\n                        closeButtonAriaLabel: 'Close',\n                        subText: 'Unknown error.'\n                    }}\n                    modalProps={{\n                        isBlocking: false,\n                        styles: { main: { minWidth: 500 } }\n                    }}\n                >\n                    <DialogFooter>\n                        <PrimaryButton onClick={this.closeFailedHint} text='OK' />\n                    </DialogFooter>\n                </Dialog>\n\n                {/* hyperParameter not match search space, warning modal */}\n                <Dialog\n                    hidden={!isShowWarning}\n                    onDismiss={this.closeSucceedHint}\n                    dialogContentProps={{\n                        type: DialogType.normal,\n                        title: <div className='icon-error'>{warining}Warning</div>,\n                        closeButtonAriaLabel: 'Close',\n                        subText: `${warning}`\n                    }}\n                    modalProps={{\n                        isBlocking: false,\n                        styles: { main: { minWidth: 500 } }\n                    }}\n                >\n                    <DialogFooter>\n                        <PrimaryButton onClick={this.warningConfirm} text='Confirm' />\n                        <DefaultButton onClick={this.warningCancel} text='Cancel' />\n                    </DialogFooter>\n                </Dialog>\n            </Stack>\n        );\n    }\n}\n\nexport default Customize;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PrimaryButton, Dialog, DialogType, DialogFooter } from '@fluentui/react';\n\nfunction TensorboardDialog(props): any {\n    const { isReaptedStartTensorboard, onHideDialog, item, isShowTensorboardDetail, errorMessage } = props;\n\n    const dialogContentProps = {\n        type: DialogType.normal,\n        title: `${isShowTensorboardDetail ? item.id : 'TensorBoard'}`\n    };\n\n    function gotoTensorboard(): void {\n        const hostname = window.location.hostname;\n        const protocol = window.location.protocol;\n        window.open(`${protocol}//${hostname}:${item.port}`);\n        onHideDialog();\n    }\n\n    return (\n        <Dialog hidden={false} dialogContentProps={dialogContentProps} modalProps={{ className: 'dialog' }}>\n            {errorMessage.error ? (\n                <div>\n                    <span>Error message: {errorMessage.message}</span>\n                </div>\n            ) : isShowTensorboardDetail ? (\n                <div>\n                    This tensorBoard with trials: <span className='bold'>{item.trialJobIdList.join(', ')}</span>.\n                </div>\n            ) : isReaptedStartTensorboard ? (\n                <div>\n                    You had started this tensorBoard with these trials:\n                    <span className='bold'>{item.trialJobIdList.join(', ')}</span>.\n                    <div className='line-height'>\n                        Its tensorBoard id: <span className='bold'>{item.id}</span>\n                    </div>\n                </div>\n            ) : (\n                <div>\n                    You are starting a new TensorBoard with trials:\n                    <span className='bold'>{item.trialJobIdList.join(', ')}</span>.\n                    <div className='line-height'>\n                        TensorBoard id: <span className='bold'>{item.id}</span>\n                    </div>\n                </div>\n            )}\n            {errorMessage.error ? (\n                <DialogFooter>\n                    <PrimaryButton onClick={onHideDialog} text='Close' />\n                </DialogFooter>\n            ) : (\n                <DialogFooter>\n                    <PrimaryButton\n                        onClick={gotoTensorboard}\n                        text={`${isShowTensorboardDetail ? 'See tensorBoard' : 'Ok'}`}\n                    />\n                </DialogFooter>\n            )}\n        </Dialog>\n    );\n}\n\nTensorboardDialog.propTypes = {\n    isReaptedStartTensorboard: PropTypes.bool,\n    isShowTensorboardDetail: PropTypes.bool,\n    onHideDialog: PropTypes.func,\n    item: PropTypes.object,\n    errorMessage: PropTypes.object\n};\n\nexport default TensorboardDialog;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { DefaultButton, IContextualMenuProps } from '@fluentui/react';\nimport { MANAGER_IP } from '@static/const';\nimport { disableTensorboard, getTensorboardMenu } from '@static/function';\nimport { Tensorboard } from '@static/interface';\nimport TensorboardDialog from './TensorboardDialog';\n\nfunction TensorboardUI(props): any {\n    let refreshTensorboard = 0;\n    const { selectedRowIds, changeSelectTrialIds } = props;\n    const [queryTensorboardList, setQueryTensorboardList] = useState([]);\n    const [isReaptedStartTensorboard, setReaptedTensorboard] = useState(false);\n    const [tensorboardPanelVisible, setTensorboardPanelVisible] = useState(false);\n    const [isShowTensorboardDetail, setIsShowTensorboardDetail] = useState(false);\n    const [selectedTensorboard, setSelectedTensorboard] = useState({});\n    const [errorMessage, setErrorMessage] = useState({});\n    const [timerList, setTimerList] = useState([0]);\n\n    function startTrialTensorboard(): void {\n        const { selectedRowIds } = props;\n        if (selectedRowIds.length > 0) {\n            setIsShowTensorboardDetail(false);\n            const result = queryTensorboardList.filter(\n                (item: Tensorboard) => item.trialJobIdList.join(',') === selectedRowIds.join(',')\n            );\n            if (result.length > 0) {\n                setReaptedTensorboard(true);\n                setSelectedTensorboard(result[0]);\n                setTensorboardPanelVisible(true);\n            } else {\n                const startTensorboard = axios.post(`${MANAGER_IP}/tensorboard`, { trials: selectedRowIds.join(',') });\n                startTensorboard\n                    .then(res => {\n                        if (res.status === 200) {\n                            setSelectedTensorboard(res.data);\n                            closeTimer();\n                            queryAllTensorboard();\n                            setErrorMessage({ error: false, message: '' });\n                            setTensorboardPanelVisible(true);\n                        }\n                    })\n                    .catch(err => {\n                        if (err.response) {\n                            setErrorMessage({\n                                error: true,\n                                message: err.response.data.error || 'Failed to start tensorBoard!'\n                            });\n                        }\n                        setTensorboardPanelVisible(true);\n                    });\n                setReaptedTensorboard(false);\n            }\n        } else {\n            alert('Please select trials first!');\n        }\n    }\n\n    function queryAllTensorboard(): void {\n        const queryTensorboard = axios.get(`${MANAGER_IP}/tensorboard-tasks`);\n        queryTensorboard.then(res => {\n            if (res.status === 200) {\n                setQueryTensorboardList(res.data);\n                if (res.data.length !== 0) {\n                    refreshTensorboard = window.setTimeout(queryAllTensorboard, 10000);\n                    const storeTimerList = timerList;\n                    storeTimerList.push(refreshTensorboard);\n                    setTimerList(storeTimerList);\n                }\n            }\n        });\n    }\n\n    function closeTimer(): void {\n        timerList.forEach(item => {\n            window.clearTimeout(item);\n        });\n    }\n\n    function stopAllTensorboard(): void {\n        const delTensorboard = axios.delete(`${MANAGER_IP}/tensorboard-tasks`);\n        delTensorboard.then(res => {\n            if (res.status === 200) {\n                setQueryTensorboardList([]);\n                closeTimer();\n            }\n        });\n    }\n\n    function seeTensorboardWebportal(item: Tensorboard): void {\n        setSelectedTensorboard(item);\n        setIsShowTensorboardDetail(true);\n        setTensorboardPanelVisible(true);\n    }\n\n    const isDisableTensorboardBtn = disableTensorboard(selectedRowIds, queryTensorboardList);\n    const tensorboardMenu: IContextualMenuProps = getTensorboardMenu(\n        queryTensorboardList,\n        stopAllTensorboard,\n        seeTensorboardWebportal\n    );\n\n    useEffect(() => {\n        queryAllTensorboard();\n        // clear timer when component is unmounted\n        return function closeTimer(): void {\n            timerList.forEach(item => {\n                window.clearTimeout(item);\n            });\n        };\n    }, []);\n\n    return (\n        <React.Fragment>\n            <DefaultButton\n                text='TensorBoard'\n                className='elementMarginLeft'\n                split\n                splitButtonAriaLabel='See 2 options'\n                aria-roledescription='split button'\n                menuProps={tensorboardMenu}\n                onClick={(): void => startTrialTensorboard()}\n                disabled={isDisableTensorboardBtn}\n            />\n            {queryTensorboardList.length !== 0 ? <span className='circle'>{queryTensorboardList.length}</span> : null}\n            {tensorboardPanelVisible && (\n                <TensorboardDialog\n                    isReaptedStartTensorboard={isReaptedStartTensorboard}\n                    isShowTensorboardDetail={isShowTensorboardDetail}\n                    errorMessage={errorMessage}\n                    item={selectedTensorboard}\n                    onHideDialog={(): void => {\n                        setTensorboardPanelVisible(false);\n                        changeSelectTrialIds();\n                    }}\n                />\n            )}\n        </React.Fragment>\n    );\n}\n\nTensorboardUI.propTypes = {\n    selectedRowIds: PropTypes.array,\n    changeSelectTrialIds: PropTypes.func\n};\n\nexport default TensorboardUI;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, PrimaryButton, Dropdown, IDropdownOption } from '@fluentui/react';\nimport { EXPERIMENT } from '@static/datamodel';\nimport { getDropdownOptions, getSearchInputValueBySearchList } from './searchFunction';\nimport { gap10 } from '@components/fluent/ChildrenGap';\n\n// This file is for filtering trial parameters and trial status\n\nfunction SearchParameterConditions(props): any {\n    const { parameter, searchFilter, dismiss, changeSearchFilterList, updatePage, setSearchInputVal } = props;\n    const isChoiceTypeSearchFilter = parameter === 'StatusNNI' || EXPERIMENT.searchSpace[parameter]._type === 'choice';\n    const operatorList = isChoiceTypeSearchFilter ? ['=', '≠'] : ['between', '>', '<', '=', '≠'];\n\n    const initValueList = getInitVal();\n    const [operatorVal, setOperatorVal] = useState(initValueList[0]);\n    const [firstInputVal, setFirstInputVal] = useState(initValueList[1] as string);\n    const [secondInputVal, setSecondInputVal] = useState(initValueList[2] as string);\n    // status or choice parameter dropdown selected value list\n    const [choiceList, setChoiceList] = useState(initValueList[3] as string[]);\n\n    function getInitVal(): Array<string | string[]> {\n        // push value: operator, firstInputVal(value1), secondInputVal(value2), choiceValue\n        const str: Array<string | string[]> = [];\n\n        if (searchFilter.length > 0) {\n            const filterElement = searchFilter.find(ele => ele.name === parameter);\n            if (filterElement !== undefined) {\n                str.push(\n                    filterElement.operator,\n                    filterElement.value1.toString(),\n                    filterElement.value2.toString(),\n                    filterElement.choice.toString().split(',')\n                );\n            } else {\n                // set init value\n                str.push(`${isChoiceTypeSearchFilter ? '=' : 'between'}`, '', '', [] as string[]);\n            }\n        } else {\n            str.push(`${isChoiceTypeSearchFilter ? '=' : 'between'}`, '', '', [] as string[]);\n        }\n\n        return str;\n    }\n\n    function updateOperatorDropdown(_event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void {\n        if (item !== undefined) {\n            setOperatorVal(item.key.toString());\n        }\n    }\n\n    // get [status | parameters that type is choice] list\n    function updateChoiceDropdown(_event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void {\n        if (item !== undefined) {\n            const result = item.selected\n                ? [...choiceList, item.key as string]\n                : choiceList.filter(key => key !== item.key);\n            setChoiceList(result);\n        }\n    }\n\n    function updateFirstInputVal(ev: React.ChangeEvent<HTMLInputElement>): void {\n        setFirstInputVal(ev.target.value);\n    }\n\n    function updateSecondInputVal(ev: React.ChangeEvent<HTMLInputElement>): void {\n        setSecondInputVal(ev.target.value);\n    }\n\n    function getSecondInputVal(): string {\n        if (secondInputVal === '' && operatorVal === 'between') {\n            // if user uses 'between' operator and doesn't write the second input value,\n            // help to set second value as this parameter max value\n            return EXPERIMENT.searchSpace[parameter]._value[1].toString();\n        }\n\n        return secondInputVal as string;\n    }\n\n    // click Apply button\n    function startFilterTrials(): void {\n        if (isChoiceTypeSearchFilter === false) {\n            if (firstInputVal === '') {\n                alert('Please input related value!');\n                return;\n            }\n        }\n\n        if (firstInputVal.match(/[a-zA-Z]/) || secondInputVal.match(/[a-zA-Z]/)) {\n            alert('Please input a number!');\n            return;\n        }\n\n        let newSearchFilters = JSON.parse(JSON.stringify(searchFilter));\n        const find = newSearchFilters.filter(ele => ele.name === parameter);\n\n        if (find.length > 0) {\n            // if user clear all selected options, will clear this filter condition on the searchFilter list\n            // eg: conv_size -> choiceList = [], searchFilter will remove (name === 'conv_size')\n            if ((isChoiceTypeSearchFilter && choiceList.length !== 0) || isChoiceTypeSearchFilter === false) {\n                newSearchFilters.forEach(item => {\n                    if (item.name === parameter) {\n                        item.operator = operatorVal;\n                        item.value1 = firstInputVal;\n                        item.value2 = getSecondInputVal();\n                        item.choice = choiceList;\n                        item.isChoice = isChoiceTypeSearchFilter ? true : false;\n                    }\n                });\n            } else {\n                newSearchFilters = newSearchFilters.filter(item => item.name !== parameter);\n            }\n        } else {\n            if ((isChoiceTypeSearchFilter && choiceList.length !== 0) || isChoiceTypeSearchFilter === false) {\n                newSearchFilters.push({\n                    name: parameter,\n                    operator: operatorVal,\n                    value1: firstInputVal,\n                    value2: getSecondInputVal(),\n                    choice: choiceList,\n                    isChoice: isChoiceTypeSearchFilter ? true : false\n                });\n            }\n        }\n\n        setSearchInputVal(getSearchInputValueBySearchList(newSearchFilters));\n        changeSearchFilterList(newSearchFilters);\n        updatePage();\n        dismiss(); // close menu\n    }\n\n    return (\n        // for trial parameters & Status\n        <Stack horizontal className='filterConditions' tokens={gap10}>\n            <Dropdown\n                selectedKey={operatorVal}\n                options={operatorList.map(item => ({\n                    key: item,\n                    text: item\n                }))}\n                onChange={updateOperatorDropdown}\n                className='btn-vertical-middle'\n                styles={{ root: { width: 100 } }}\n            />\n            {isChoiceTypeSearchFilter ? (\n                <Dropdown\n                    // selectedKeys:[] multiy, selectedKey: string\n                    selectedKeys={choiceList}\n                    multiSelect\n                    options={getDropdownOptions(parameter)}\n                    onChange={updateChoiceDropdown}\n                    className='btn-vertical-middle'\n                    styles={{ root: { width: 190 } }}\n                />\n            ) : (\n                <React.Fragment>\n                    {operatorVal === 'between' ? (\n                        <div>\n                            <input\n                                type='text'\n                                className='input input-padding'\n                                onChange={updateFirstInputVal}\n                                value={firstInputVal}\n                            />\n                            <span className='and'>and</span>\n                            <input\n                                type='text'\n                                className='input input-padding'\n                                onChange={updateSecondInputVal}\n                                value={secondInputVal}\n                            />\n                        </div>\n                    ) : (\n                        <input\n                            type='text'\n                            className='input input-padding'\n                            onChange={updateFirstInputVal}\n                            value={firstInputVal}\n                        />\n                    )}\n                </React.Fragment>\n            )}\n            <PrimaryButton text='Apply' className='btn-vertical-middle' onClick={startFilterTrials} />\n        </Stack>\n    );\n}\n\nSearchParameterConditions.propTypes = {\n    parameter: PropTypes.string,\n    searchFilter: PropTypes.array,\n    dismiss: PropTypes.func,\n    setSearchInputVal: PropTypes.func,\n    changeSearchFilterList: PropTypes.func,\n    updatePage: PropTypes.func\n};\n\nexport default SearchParameterConditions;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, PrimaryButton } from '@fluentui/react';\nimport { gap10 } from '@components/fluent/ChildrenGap';\nimport { getSearchInputValueBySearchList } from './searchFunction';\n\n// This file is for search trial ['Trial id', 'Trial No.']\n\nfunction GeneralSearch(props): any {\n    // searchName val: Trial No. | Trial id\n    const { searchName, searchFilter, dismiss, changeSearchFilterList, setSearchInputVal, updatePage } = props;\n    const [firstInputVal, setFirstInputVal] = useState(getSearchNameInit());\n\n    function updateFirstInputVal(ev: React.ChangeEvent<HTMLInputElement>): void {\n        setFirstInputVal(ev.target.value);\n    }\n\n    function getSearchNameInit(): string {\n        let str = ''; // init ''\n        const find = searchFilter.find(item => item.name === searchName);\n\n        if (find !== undefined) {\n            str = find.value1; // init by filter value\n        }\n\n        return str;\n    }\n\n    function startFilterTrial(): void {\n        const { searchFilter } = props;\n        const searchFilterConditions = JSON.parse(JSON.stringify(searchFilter));\n        const find = searchFilterConditions.filter(item => item.name === searchName);\n\n        if (firstInputVal === '') {\n            alert('Please input related value!');\n            return;\n        }\n\n        if (find.length > 0) {\n            // change this record\n            // Trial id | Trial No. only need {search name, search value} these message\n            searchFilterConditions.forEach(item => {\n                if (item.name === searchName) {\n                    item.value1 = firstInputVal;\n                    // item.operator = '';\n                    item.isChoice = false;\n                }\n            });\n        } else {\n            searchFilterConditions.push({\n                name: searchName,\n                // operator: '',\n                value1: firstInputVal,\n                isChoice: false\n            });\n        }\n        setSearchInputVal(getSearchInputValueBySearchList(searchFilterConditions));\n        changeSearchFilterList(searchFilterConditions);\n        updatePage();\n        dismiss(); // close menu\n    }\n\n    return (\n        // Trial id & Trial No.\n        <Stack horizontal className='filterConditions' tokens={gap10}>\n            <span>{searchName === 'Trial id' ? 'Includes' : 'Equals to'}</span>\n            <input type='text' className='input input-padding' onChange={updateFirstInputVal} value={firstInputVal} />\n            <PrimaryButton text='Apply' className='btn-vertical-middle' onClick={startFilterTrial} />\n        </Stack>\n    );\n}\n\nGeneralSearch.propTypes = {\n    searchName: PropTypes.string,\n    searchFilter: PropTypes.array,\n    dismiss: PropTypes.func,\n    setSearchInputVal: PropTypes.func,\n    changeSearchFilterList: PropTypes.func,\n    updatePage: PropTypes.func\n};\n\nexport default GeneralSearch;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    DefaultButton,\n    IContextualMenuProps,\n    IContextualMenuItem,\n    DirectionalHint,\n    SearchBox\n} from '@fluentui/react';\nimport { EXPERIMENT } from '@static/datamodel';\nimport { SearchItems } from '@static/interface';\nimport SearchParameterConditions from './SearchParameterConditions';\nimport GeneralSearch from './GeneralSearch';\nimport { classNames, isChoiceType } from './searchFunction';\n\n// TableList search layout\n\nfunction Search(props): any {\n    const { searchFilter, changeSearchFilterList, updatePage } = props;\n    const [searchInputVal, setSearchInputVal] = useState('');\n\n    function getSearchMenu(parameterList): IContextualMenuProps {\n        const menu: Array<object> = [];\n\n        parameterList.unshift('StatusNNI');\n\n        ['Trial id', 'Trial No.'].forEach(item => {\n            menu.push({\n                key: item,\n                text: item,\n                subMenuProps: {\n                    items: [\n                        {\n                            key: item,\n                            text: item,\n                            // component: GeneralSearch.tsx\n                            onRender: renderIdAndNoComponent.bind(item)\n                        }\n                    ]\n                }\n            });\n        });\n\n        parameterList.forEach(item => {\n            menu.push({\n                key: item,\n                text: item === 'StatusNNI' ? 'Status' : item,\n                subMenuProps: {\n                    items: [\n                        {\n                            key: item,\n                            text: item,\n                            // component: SearchParameterConditions.tsx\n                            onRender: renderParametersSearchComponent.bind(item)\n                        }\n                    ]\n                }\n            });\n        });\n\n        const filterMenu: IContextualMenuProps = {\n            shouldFocusOnMount: true,\n            directionalHint: DirectionalHint.bottomLeftEdge,\n            className: classNames.menu,\n            items: menu as any\n        };\n\n        return filterMenu;\n    }\n\n    // Avoid nested experiments, nested experiments do not support hyperparameter search\n    const searchMenuProps: IContextualMenuProps = getSearchMenu(\n        EXPERIMENT.isNestedExp() ? [] : Object.keys(EXPERIMENT.searchSpace)\n    );\n\n    function renderParametersSearchComponent(item: IContextualMenuItem, dismissMenu: () => void): JSX.Element {\n        return (\n            <SearchParameterConditions\n                parameter={item.text}\n                searchFilter={searchFilter} // search filter list\n                changeSearchFilterList={changeSearchFilterList}\n                updatePage={updatePage}\n                setSearchInputVal={setSearchInputVal}\n                dismiss={dismissMenu} // close menu\n            />\n        );\n    }\n\n    function renderIdAndNoComponent(item: IContextualMenuItem, dismissMenu: () => void): JSX.Element {\n        return (\n            <GeneralSearch\n                searchName={item.text}\n                searchFilter={searchFilter} // search fliter list\n                changeSearchFilterList={changeSearchFilterList}\n                setSearchInputVal={setSearchInputVal}\n                updatePage={updatePage}\n                dismiss={dismissMenu} // after click Apply button to close menu\n            />\n        );\n    }\n\n    function updateSearchText(_, newValue): void {\n        setSearchInputVal(newValue);\n    }\n\n    // update TableList page\n    function changeTableListPage(searchFilterList: Array<SearchItems>): void {\n        changeSearchFilterList(searchFilterList);\n        updatePage();\n    }\n\n    // deal with the format 1.[x, (space)xx] 2. (space)[x]\n    function convertStringArrToList(str: string): string[] {\n        const value = str.trim().slice(1, str.trim().length - 1); // delete []\n        // delete \"\"\n        const result: string[] = [];\n\n        if (value.includes(',')) {\n            const arr = value.split(',');\n            arr.forEach(item => {\n                if (item !== '') {\n                    result.push(item);\n                }\n            });\n            return result;\n        } else {\n            if (value === '') {\n                return result;\n            } else {\n                return [value];\n            }\n        }\n    }\n\n    // SearchBox onSearch event: Filter based on the filter criteria entered by the user\n    function startFilter(): void {\n        const regEn = /`~!@#$%^&*()+?\"{}.'/im;\n        const regCn = /·！#￥（——）：；“”‘、，|《。》？、【】[\\]]/im;\n        if (regEn.test(searchInputVal) || regCn.test(searchInputVal)) {\n            alert('Please delete special characters in the conditions!');\n            return;\n        }\n        // according [input val] to change searchFilter list\n        const allFilterConditions = searchInputVal.trim().split(';');\n        const newSearchFilter: any = [];\n\n        // delete '' in filter list\n        if (allFilterConditions.includes('')) {\n            allFilterConditions.splice(\n                allFilterConditions.findIndex(item => item === ''),\n                1\n            );\n        }\n\n        allFilterConditions.forEach(eachFilterConditionStr => {\n            // input content looks like that: `Trial id:`\n            if (\n                eachFilterConditionStr.endsWith(':') ||\n                eachFilterConditionStr.endsWith('<') ||\n                eachFilterConditionStr.endsWith('>') ||\n                eachFilterConditionStr.endsWith('≠')\n            ) {\n                return;\n            } else {\n                let eachFilterConditionArr: string[] = [];\n\n                // EXPERIMENT.searchSpace[parameter]._type === 'choice'\n                if (eachFilterConditionStr.includes('>' || '<')) {\n                    const operator = eachFilterConditionStr.includes('>') === true ? '>' : '<';\n                    eachFilterConditionArr = eachFilterConditionStr.trim().split(operator);\n                    newSearchFilter.push({\n                        name: eachFilterConditionArr[0],\n                        operator: operator,\n                        value1: eachFilterConditionArr[1].trim(),\n                        value2: '',\n                        choice: [],\n                        isChoice: false\n                    });\n                } else if (eachFilterConditionStr.includes('≠')) {\n                    // drop_rate≠6; status≠[x,xx,xxx]; conv_size≠[3,7]\n                    eachFilterConditionArr = eachFilterConditionStr.trim().split('≠');\n                    const filterName = eachFilterConditionArr[0] === 'Status' ? 'StatusNNI' : eachFilterConditionArr[0];\n                    const isChoicesType = isChoiceType(filterName);\n                    newSearchFilter.push({\n                        name: filterName,\n                        operator: '≠',\n                        value1: isChoicesType ? '' : JSON.parse(eachFilterConditionArr[1].trim()),\n                        value2: '',\n                        choice: isChoicesType ? convertStringArrToList(eachFilterConditionArr[1]) : [],\n                        isChoice: isChoicesType ? true : false\n                    });\n                } else if (eachFilterConditionStr.includes(':')) {\n                    // = : conv_size:[1,2,3,4]; Trial id:3; hidden_size:[1,2], status:[val1,val2,val3]\n                    eachFilterConditionArr = eachFilterConditionStr.trim().split(':');\n                    const filterName = eachFilterConditionArr[0] === 'Status' ? 'StatusNNI' : eachFilterConditionArr[0];\n                    const isChoicesType = isChoiceType(filterName);\n                    const isArray =\n                        eachFilterConditionArr.length > 1 && eachFilterConditionArr[1].includes('[' || ']')\n                            ? true\n                            : false;\n                    if (isArray === true) {\n                        if (isChoicesType === true) {\n                            // status:[SUCCEEDED]\n                            newSearchFilter.push({\n                                name: filterName,\n                                operator: '=',\n                                value1: '',\n                                value2: '',\n                                choice: convertStringArrToList(eachFilterConditionArr[1]),\n                                isChoice: true\n                            });\n                        } else {\n                            // drop_rate:[1,10]\n                            newSearchFilter.push({\n                                name: eachFilterConditionArr[0],\n                                operator: 'between',\n                                value1: JSON.parse(eachFilterConditionArr[1].trim())[0],\n                                value2: JSON.parse(eachFilterConditionArr[1].trim())[1],\n                                choice: [],\n                                isChoice: false\n                            });\n                        }\n                    } else {\n                        newSearchFilter.push({\n                            name: eachFilterConditionArr[0],\n                            operator: '=',\n                            value1: eachFilterConditionArr[1].trim(),\n                            value2: '',\n                            choice: [],\n                            isChoice: false\n                        });\n                    }\n                } else {\n                    // user input: Trial id\n                    return;\n                }\n            }\n        });\n        changeTableListPage(newSearchFilter);\n    }\n\n    // clear search input all value, clear all search filter\n    function clearFliter(): void {\n        changeTableListPage([]);\n    }\n\n    return (\n        <div>\n            <Stack horizontal>\n                <DefaultButton text='Filter' menuProps={searchMenuProps} />\n                {/* search input: store filter conditons, also, user could input filter conditions, could search */}\n                <SearchBox\n                    styles={{ root: { width: 530 } }}\n                    placeholder='Search'\n                    onChange={updateSearchText}\n                    value={searchInputVal}\n                    onSearch={startFilter}\n                    onEscape={clearFliter}\n                    onClear={clearFliter}\n                />\n            </Stack>\n        </div>\n    );\n}\n\nSearch.propTypes = {\n    searchFilter: PropTypes.array,\n    changeSearchFilterList: PropTypes.func,\n    updatePage: PropTypes.func\n};\n\nexport default Search;\n","import * as React from 'react';\nimport { Stack, FocusTrapCallout, DefaultButton, FocusZone, PrimaryButton } from '@fluentui/react';\nimport { killJob } from '@static/function';\nimport { blocked } from '@components/fluent/Icon';\nimport { styles } from '@components/experiment/overview/params/basicInfoStyles';\n\ninterface KillJobState {\n    isCalloutVisible: boolean;\n}\n\ninterface KillJobProps {\n    trial: any;\n}\n\nclass KillJob extends React.Component<KillJobProps, KillJobState> {\n    private menuButtonElement!: HTMLElement | null;\n    constructor(props: KillJobProps) {\n        super(props);\n        this.state = { isCalloutVisible: false };\n    }\n\n    render(): React.ReactNode {\n        const { isCalloutVisible } = this.state;\n        const prompString = 'Are you sure to cancel this trial?';\n        return (\n            <div>\n                <div className={styles.buttonArea} ref={(menuButton): any => (this.menuButtonElement = menuButton)}>\n                    <PrimaryButton className='detail-button-operation' onClick={this.openPromot} title='kill'>\n                        {blocked}\n                    </PrimaryButton>\n                </div>\n                {isCalloutVisible ? (\n                    <div>\n                        <FocusTrapCallout\n                            role='alertdialog'\n                            className={styles.callout}\n                            gapSpace={0}\n                            target={this.menuButtonElement}\n                            onDismiss={this.onDismiss}\n                            setInitialFocus={true}\n                        >\n                            <div className={styles.header}>\n                                <p className={styles.title} style={{ color: '#333' }}>\n                                    Kill trial\n                                </p>\n                            </div>\n                            <div className={styles.inner}>\n                                <div>\n                                    <p className={styles.subtext} style={{ color: '#333' }}>\n                                        {prompString}\n                                    </p>\n                                </div>\n                            </div>\n                            <FocusZone>\n                                <Stack className={styles.buttons} gap={8} horizontal>\n                                    <DefaultButton onClick={this.onDismiss}>No</DefaultButton>\n                                    <PrimaryButton onClick={this.onKill}>Yes</PrimaryButton>\n                                </Stack>\n                            </FocusZone>\n                        </FocusTrapCallout>\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n\n    private onDismiss = (): void => {\n        this.setState(() => ({ isCalloutVisible: false }));\n    };\n\n    private onKill = (): void => {\n        this.setState({ isCalloutVisible: false }, () => {\n            const { trial } = this.props;\n            killJob(trial.key, trial.id, trial.status);\n        });\n    };\n\n    private openPromot = (event: React.SyntheticEvent<EventTarget>): void => {\n        event.preventDefault();\n        event.stopPropagation();\n        this.setState({ isCalloutVisible: true });\n    };\n}\n\nexport default KillJob;\n","import * as React from 'react';\nimport { DetailsRow, IDetailsRowBaseProps } from '@fluentui/react';\nimport OpenRow from './OpenRow';\n\ninterface ExpandableDetailsProps {\n    detailsProps: IDetailsRowBaseProps;\n    isExpand: boolean;\n}\n\nclass ExpandableDetails extends React.Component<ExpandableDetailsProps, {}> {\n    render(): React.ReactNode {\n        const { detailsProps, isExpand } = this.props;\n        return (\n            <div>\n                <DetailsRow {...detailsProps} />\n                {isExpand && <OpenRow trialId={detailsProps.item.id} />}\n            </div>\n        );\n    }\n}\n\nexport default ExpandableDetails;\n","import * as React from 'react';\nimport { DetailsList, Dropdown, Icon, IDetailsListProps, IDropdownOption, IStackTokens, Stack } from '@fluentui/react';\nimport ReactPaginate from 'react-paginate';\n\ninterface PaginationTableState {\n    itemsPerPage: number;\n    currentPage: number;\n    itemsOnPage: any[]; // this needs to be stored in state to prevent re-rendering\n}\n\nconst horizontalGapStackTokens: IStackTokens = {\n    childrenGap: 20,\n    padding: 10\n};\n\nfunction _currentTableOffset(perPage: number, currentPage: number, source: any[]): number {\n    return perPage === -1 ? 0 : Math.min(currentPage, Math.floor((source.length - 1) / perPage)) * perPage;\n}\n\nfunction _obtainPaginationSlice(perPage: number, currentPage: number, source: any[]): any[] {\n    if (perPage === -1) {\n        return source;\n    } else {\n        const offset = _currentTableOffset(perPage, currentPage, source);\n        return source.slice(offset, offset + perPage);\n    }\n}\n\nclass PaginationTable extends React.PureComponent<IDetailsListProps, PaginationTableState> {\n    constructor(props: IDetailsListProps) {\n        super(props);\n        this.state = {\n            itemsPerPage: 20,\n            currentPage: 0,\n            itemsOnPage: []\n        };\n    }\n\n    private _onItemsPerPageSelect(event: React.FormEvent<HTMLDivElement>, item: IDropdownOption | undefined): void {\n        if (item !== undefined) {\n            const { items } = this.props;\n            // use current offset to calculate the next `current_page`\n            const currentOffset = _currentTableOffset(this.state.itemsPerPage, this.state.currentPage, items);\n            const itemsPerPage = item.key as number;\n            const currentPage = Math.floor(currentOffset / itemsPerPage);\n            this.setState({\n                itemsPerPage: itemsPerPage,\n                currentPage: currentPage,\n                itemsOnPage: _obtainPaginationSlice(itemsPerPage, currentPage, this.props.items)\n            });\n        }\n    }\n\n    private _onPageSelect(event: any): void {\n        const currentPage = event.selected;\n        this.setState({\n            currentPage: currentPage,\n            itemsOnPage: _obtainPaginationSlice(this.state.itemsPerPage, currentPage, this.props.items)\n        });\n    }\n\n    componentDidUpdate(prevProps: IDetailsListProps): void {\n        if (prevProps.items !== this.props.items) {\n            this.setState({\n                itemsOnPage: _obtainPaginationSlice(this.state.itemsPerPage, this.state.currentPage, this.props.items)\n            });\n        }\n    }\n\n    render(): React.ReactNode {\n        const { itemsPerPage, itemsOnPage } = this.state;\n        const detailListProps = {\n            ...this.props,\n            items: itemsOnPage\n        };\n        const itemsCount = this.props.items.length;\n        const pageCount = itemsPerPage === -1 ? 1 : Math.ceil(itemsCount / itemsPerPage);\n        const perPageOptions = [\n            { key: 10, text: '10 items per page' },\n            { key: 20, text: '20 items per page' },\n            { key: 50, text: '50 items per page' },\n            { key: -1, text: 'All items' }\n        ];\n        return (\n            <div>\n                <DetailsList {...detailListProps} />\n                <Stack\n                    horizontal\n                    horizontalAlign='end'\n                    verticalAlign='baseline'\n                    styles={{ root: { padding: 10 } }}\n                    tokens={horizontalGapStackTokens}\n                >\n                    <Dropdown\n                        selectedKey={itemsPerPage}\n                        options={perPageOptions}\n                        onChange={this._onItemsPerPageSelect.bind(this)}\n                        styles={{ dropdown: { width: 150 } }}\n                    />\n                    <ReactPaginate\n                        previousLabel={<Icon aria-hidden={true} iconName='ChevronLeft' />}\n                        nextLabel={<Icon aria-hidden={true} iconName='ChevronRight' />}\n                        breakLabel={'...'}\n                        breakClassName={'break'}\n                        pageCount={pageCount}\n                        marginPagesDisplayed={2}\n                        pageRangeDisplayed={2}\n                        onPageChange={this._onPageSelect.bind(this)}\n                        containerClassName={itemsCount === 0 ? 'pagination hidden' : 'pagination'}\n                        subContainerClassName={'pages pagination'}\n                        disableInitialCallback={false}\n                        activeClassName={'active'}\n                    />\n                </Stack>\n            </div>\n        );\n    }\n}\n\nexport default PaginationTable;\n","import React from 'react';\nimport {\n    DefaultButton,\n    IColumn,\n    Icon,\n    PrimaryButton,\n    Stack,\n    StackItem,\n    TooltipHost,\n    DirectionalHint,\n    Checkbox\n} from '@fluentui/react';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport { TOOLTIP_BACKGROUND_COLOR } from '@static/const';\nimport { convertDuration, formatTimestamp, copyAndSort, parametersType, parseMetrics } from '@static/function';\nimport { TableObj, SortInfo, SearchItems } from '@static/interface';\nimport { getTrialsBySearchFilters } from './tableFunction/search/searchFunction';\nimport { blocked, copy, LineChart, tableListIcon } from '@components/fluent/Icon';\nimport ChangeColumnComponent from '../ChangeColumnComponent';\nimport Compare from './tableFunction/Compare';\nimport Customize from './tableFunction/CustomizedTrial';\nimport TensorboardUI from './tableFunction/tensorboard/TensorboardUI';\nimport Search from './tableFunction/search/Search';\nimport KillJob from './tableFunction/killTrial/Killjob';\nimport ExpandableDetails from '@components/common/ExpandableDetails';\nimport PaginationTable from '@components/common/PaginationTable';\nimport CopyButton from '@components/common/CopyButton';\nimport { Trial } from '@model/trial';\n\nrequire('echarts/lib/chart/line');\nrequire('echarts/lib/component/tooltip');\nrequire('echarts/lib/component/title');\n\ntype SearchOptionType = 'id' | 'trialnum' | 'status' | 'parameters';\n\nconst defaultDisplayedColumns = ['sequenceId', 'id', 'duration', 'status', 'latestAccuracy'];\n\nfunction _inferColumnTitle(columnKey: string): string {\n    if (columnKey === 'sequenceId') {\n        return 'Trial No.';\n    } else if (columnKey === 'id') {\n        return 'ID';\n    } else if (columnKey === 'intermediateCount') {\n        return 'Intermediate results (#)';\n    } else if (columnKey === 'message') {\n        return 'Message';\n    } else if (columnKey.startsWith('space/')) {\n        return columnKey.split('/', 2)[1] + ' (space)';\n    } else if (columnKey === 'latestAccuracy') {\n        return 'Default metric'; // to align with the original design\n    } else if (columnKey.startsWith('metric/')) {\n        return columnKey.split('/', 2)[1] + ' (metric)';\n    } else if (columnKey.startsWith('_')) {\n        return columnKey;\n    } else {\n        // camel case to verbose form\n        const withSpace = columnKey.replace(/[A-Z]/g, letter => ` ${letter.toLowerCase()}`);\n        return withSpace.charAt(0).toUpperCase() + withSpace.slice(1);\n    }\n}\n\ninterface TableListProps {\n    tableSource: TableObj[];\n    updateDetailPage: () => void;\n}\n\ninterface TableListState {\n    displayedItems: any[];\n    displayedColumns: string[];\n    columns: IColumn[];\n    searchType: SearchOptionType;\n    searchText: string;\n    selectedRowIds: string[];\n    customizeColumnsDialogVisible: boolean;\n    compareDialogVisible: boolean;\n    intermediateDialogTrial: TableObj | undefined;\n    copiedTrialId: string | undefined;\n    sortInfo: SortInfo;\n    searchItems: Array<SearchItems>;\n    relation: Map<string, string>;\n    intermediateKeyList: string[];\n}\n\nclass TableList extends React.Component<TableListProps, TableListState> {\n    private _expandedTrialIds: Set<string>;\n\n    constructor(props: TableListProps) {\n        super(props);\n\n        this.state = {\n            displayedItems: [],\n            displayedColumns:\n                localStorage.getItem('columns') !== null\n                    ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                      JSON.parse(localStorage.getItem('columns')!)\n                    : defaultDisplayedColumns,\n            columns: [],\n            searchType: 'id',\n            searchText: '',\n            customizeColumnsDialogVisible: false,\n            compareDialogVisible: false,\n            selectedRowIds: [],\n            intermediateDialogTrial: undefined,\n            copiedTrialId: undefined,\n            sortInfo: { field: '', isDescend: true },\n            searchItems: [],\n            relation: parametersType(),\n            intermediateKeyList: []\n        };\n\n        this._expandedTrialIds = new Set<string>();\n    }\n\n    /* Table basic function related methods */\n\n    private _onColumnClick(ev: React.MouseEvent<HTMLElement>, column: IColumn): void {\n        // handle the click events on table header (do sorting)\n        const { columns } = this.state;\n        const newColumns: IColumn[] = columns.slice();\n        const currColumn: IColumn = newColumns.filter(currCol => column.key === currCol.key)[0];\n        const isSortedDescending = !currColumn.isSortedDescending;\n        this.setState(\n            {\n                sortInfo: { field: column.key, isDescend: isSortedDescending }\n            },\n            this._updateTableSource\n        );\n    }\n\n    private _trialsToTableItems(trials: TableObj[]): any[] {\n        // TODO: use search space and metrics space from TRIALS will cause update issues.\n        const searchSpace = TRIALS.inferredSearchSpace(EXPERIMENT.searchSpaceNew);\n        const metricSpace = TRIALS.inferredMetricSpace();\n        const { selectedRowIds } = this.state;\n        const items = trials.map(trial => {\n            const ret = {\n                sequenceId: trial.sequenceId,\n                id: trial.id,\n                _checked: selectedRowIds.includes(trial.id) ? true : false,\n                startTime: (trial as Trial).info.startTime, // FIXME: why do we need info here?\n                endTime: (trial as Trial).info.endTime,\n                duration: trial.duration,\n                status: trial.status,\n                message: (trial as Trial).info.message || '--',\n                intermediateCount: trial.intermediates.length,\n                _expandDetails: this._expandedTrialIds.has(trial.id) // hidden field names should start with `_`\n            };\n            for (const [k, v] of trial.parameters(searchSpace)) {\n                ret[`space/${k.baseName}`] = v;\n            }\n            for (const [k, v] of trial.metrics(metricSpace)) {\n                ret[`metric/${k.baseName}`] = v;\n            }\n            ret['latestAccuracy'] = (trial as Trial).latestAccuracy;\n            ret['_formattedLatestAccuracy'] = (trial as Trial).formatLatestAccuracy();\n            return ret;\n        });\n\n        const { sortInfo } = this.state;\n        if (sortInfo.field !== '') {\n            return copyAndSort(items, sortInfo.field, sortInfo.isDescend);\n        } else {\n            return items;\n        }\n    }\n\n    private selectedTrialOnChangeEvent = (\n        id: string,\n        _ev?: React.FormEvent<HTMLElement | HTMLInputElement>,\n        checked?: boolean\n    ): void => {\n        const { displayedItems, selectedRowIds } = this.state;\n        const latestDisplayedItems = JSON.parse(JSON.stringify(displayedItems));\n        let latestSelectedRowIds = selectedRowIds;\n\n        if (checked === false) {\n            latestSelectedRowIds = latestSelectedRowIds.filter(item => item !== id);\n        } else {\n            latestSelectedRowIds.push(id);\n        }\n\n        latestDisplayedItems.forEach(item => {\n            if (item.id === id) {\n                item._checked = !!checked;\n            }\n        });\n        this.setState(() => ({ displayedItems: latestDisplayedItems, selectedRowIds: latestSelectedRowIds }));\n    };\n\n    private changeSelectTrialIds = (): void => {\n        const { displayedItems } = this.state;\n        const newDisplayedItems = displayedItems;\n        newDisplayedItems.forEach(item => {\n            item._checked = false;\n        });\n        this.setState(() => ({\n            selectedRowIds: [],\n            displayedItems: newDisplayedItems\n        }));\n    };\n\n    private _buildColumnsFromTableItems(tableItems: any[]): IColumn[] {\n        const columns: IColumn[] = [\n            // select trial function\n            {\n                name: '',\n                key: '_selected',\n                fieldName: 'selected',\n                minWidth: 20,\n                maxWidth: 20,\n                isResizable: true,\n                className: 'detail-table',\n                onRender: (record): React.ReactNode => (\n                    <Checkbox\n                        label={undefined}\n                        checked={record._checked}\n                        className='detail-check'\n                        onChange={this.selectedTrialOnChangeEvent.bind(this, record.id)}\n                    />\n                )\n            },\n            // extra column, for a icon to expand the trial details panel\n            {\n                key: '_expand',\n                name: '',\n                onRender: (item): any => {\n                    return (\n                        <Icon\n                            aria-hidden={true}\n                            iconName='ChevronRight'\n                            className='cursor'\n                            styles={{\n                                root: {\n                                    transition: 'all 0.2s',\n                                    transform: `rotate(${item._expandDetails ? 90 : 0}deg)`\n                                }\n                            }}\n                            onClick={(event): void => {\n                                event.stopPropagation();\n                                const newItem: any = { ...item, _expandDetails: !item._expandDetails };\n                                if (newItem._expandDetails) {\n                                    // preserve to be restored when refreshed\n                                    this._expandedTrialIds.add(newItem.id);\n                                } else {\n                                    this._expandedTrialIds.delete(newItem.id);\n                                }\n                                const newItems = this.state.displayedItems.map(item =>\n                                    item.id === newItem.id ? newItem : item\n                                );\n                                this.setState({\n                                    displayedItems: newItems\n                                });\n                            }}\n                            onMouseDown={(e): void => {\n                                e.stopPropagation();\n                            }}\n                            onMouseUp={(e): void => {\n                                e.stopPropagation();\n                            }}\n                        />\n                    );\n                },\n                fieldName: 'expand',\n                isResizable: false,\n                minWidth: 20,\n                maxWidth: 20\n            }\n        ];\n\n        // looking at the first row only for now\n        for (const k of Object.keys(tableItems[0])) {\n            if (k === 'metric/default') {\n                // FIXME: default metric is hacked as latestAccuracy currently\n                continue;\n            }\n            const columnTitle = _inferColumnTitle(k);\n            // TODO: add blacklist\n            // 0.85: tableWidth / screen\n            const widths = window.innerWidth * 0.85;\n            columns.push({\n                name: columnTitle,\n                key: k,\n                fieldName: k,\n                minWidth: widths * 0.12,\n                maxWidth: widths * 0.19,\n                isResizable: true,\n                onColumnClick: this._onColumnClick.bind(this),\n                ...(k === 'status' && {\n                    // color status\n                    onRender: (record): React.ReactNode => (\n                        <span className={`${record.status} commonStyle`}>{record.status}</span>\n                    )\n                }),\n                ...(k === 'message' && {\n                    onRender: (record): React.ReactNode =>\n                        record.message.length > 15 ? (\n                            <TooltipHost\n                                content={record.message}\n                                directionalHint={DirectionalHint.bottomCenter}\n                                tooltipProps={{\n                                    calloutProps: {\n                                        styles: {\n                                            beak: { background: TOOLTIP_BACKGROUND_COLOR },\n                                            beakCurtain: { background: TOOLTIP_BACKGROUND_COLOR },\n                                            calloutMain: { background: TOOLTIP_BACKGROUND_COLOR }\n                                        }\n                                    }\n                                }}\n                            >\n                                <div>{record.message}</div>\n                            </TooltipHost>\n                        ) : (\n                            <div>{record.message}</div>\n                        )\n                }),\n                ...((k.startsWith('metric/') || k.startsWith('space/')) && {\n                    // show tooltip\n                    onRender: (record): React.ReactNode => (\n                        <TooltipHost\n                            content={record[k]}\n                            directionalHint={DirectionalHint.bottomCenter}\n                            tooltipProps={{\n                                calloutProps: {\n                                    styles: {\n                                        beak: { background: TOOLTIP_BACKGROUND_COLOR },\n                                        beakCurtain: { background: TOOLTIP_BACKGROUND_COLOR },\n                                        calloutMain: { background: TOOLTIP_BACKGROUND_COLOR }\n                                    }\n                                }\n                            }}\n                        >\n                            <div className='ellipsis'>{record[k]}</div>\n                        </TooltipHost>\n                    )\n                }),\n                ...(k === 'latestAccuracy' && {\n                    // FIXME: this is ad-hoc\n                    onRender: (record): React.ReactNode => (\n                        <TooltipHost\n                            content={record._formattedLatestAccuracy}\n                            directionalHint={DirectionalHint.bottomCenter}\n                            tooltipProps={{\n                                calloutProps: {\n                                    styles: {\n                                        beak: { background: TOOLTIP_BACKGROUND_COLOR },\n                                        beakCurtain: { background: TOOLTIP_BACKGROUND_COLOR },\n                                        calloutMain: { background: TOOLTIP_BACKGROUND_COLOR }\n                                    }\n                                }\n                            }}\n                        >\n                            <div className='ellipsis'>{record._formattedLatestAccuracy}</div>\n                        </TooltipHost>\n                    )\n                }),\n                ...(['startTime', 'endTime'].includes(k) && {\n                    onRender: (record): React.ReactNode => <span>{formatTimestamp(record[k], '--')}</span>\n                }),\n                ...(k === 'duration' && {\n                    onRender: (record): React.ReactNode => (\n                        <span className='durationsty'>{convertDuration(record[k])}</span>\n                    )\n                }),\n                ...(k === 'id' && {\n                    onRender: (record): React.ReactNode => (\n                        <Stack horizontal className='idCopy'>\n                            <div>{record.id}</div>\n                            <CopyButton value={record.id} />\n                        </Stack>\n                    )\n                })\n            });\n        }\n        // operations column\n        columns.push({\n            name: 'Operation',\n            key: '_operation',\n            fieldName: 'operation',\n            minWidth: 150,\n            maxWidth: 160,\n            isResizable: true,\n            className: 'detail-table',\n            onRender: this._renderOperationColumn.bind(this)\n        });\n\n        const { sortInfo } = this.state;\n        for (const column of columns) {\n            if (column.key === sortInfo.field) {\n                column.isSorted = true;\n                column.isSortedDescending = sortInfo.isDescend;\n            } else {\n                column.isSorted = false;\n                column.isSortedDescending = true;\n            }\n        }\n        return columns;\n    }\n\n    private _updateTableSource(): void {\n        // call this method when trials or the computation of trial filter has changed\n        const { searchItems, relation } = this.state;\n        let items = this._trialsToTableItems(this.props.tableSource);\n        if (searchItems.length > 0) {\n            items = getTrialsBySearchFilters(items, searchItems, relation); // use search filter to filter data\n        }\n        if (items.length > 0) {\n            const columns = this._buildColumnsFromTableItems(items);\n            this.setState({\n                displayedItems: items,\n                columns: columns\n            });\n        } else {\n            this.setState({\n                displayedItems: [],\n                columns: []\n            });\n        }\n    }\n\n    private _updateDisplayedColumns(displayedColumns: string[]): void {\n        this.setState({\n            displayedColumns: displayedColumns\n        });\n    }\n\n    private _renderOperationColumn(record: any): React.ReactNode {\n        const runningTrial: boolean = ['RUNNING', 'UNKNOWN'].includes(record.status) ? false : true;\n        const disabledAddCustomizedTrial = ['DONE', 'ERROR', 'STOPPED', 'VIEWED'].includes(EXPERIMENT.status);\n        return (\n            <Stack className='detail-button' horizontal>\n                <PrimaryButton\n                    className='detail-button-operation'\n                    title='Intermediate'\n                    onClick={(): void => {\n                        const { tableSource } = this.props;\n                        const trial = tableSource.find(trial => trial.id === record.id) as TableObj;\n                        const intermediateKeyListResult = this.getIntermediateAllKeys(trial);\n                        this.setState({\n                            intermediateDialogTrial: trial,\n                            intermediateKeyList: intermediateKeyListResult\n                        });\n                    }}\n                >\n                    {LineChart}\n                </PrimaryButton>\n                {runningTrial ? (\n                    <PrimaryButton className='detail-button-operation' disabled={true} title='kill'>\n                        {blocked}\n                    </PrimaryButton>\n                ) : (\n                    <KillJob trial={record} />\n                )}\n                <PrimaryButton\n                    className='detail-button-operation'\n                    title='Customized trial'\n                    onClick={(): void => {\n                        this.setState({ copiedTrialId: record.id });\n                    }}\n                    disabled={disabledAddCustomizedTrial}\n                >\n                    {copy}\n                </PrimaryButton>\n            </Stack>\n        );\n    }\n\n    private changeSearchFilterList = (arr: Array<SearchItems>): void => {\n        this.setState(() => ({\n            searchItems: arr\n        }));\n    };\n\n    private getIntermediateAllKeys = (intermediateDialogTrial: any): string[] => {\n        let intermediateAllKeysList: string[] = [];\n        if (\n            intermediateDialogTrial!.intermediateMetrics !== undefined &&\n            intermediateDialogTrial!.intermediateMetrics[0]\n        ) {\n            const parsedMetric = parseMetrics(intermediateDialogTrial!.intermediateMetrics[0].data);\n            if (parsedMetric !== undefined && typeof parsedMetric === 'object') {\n                const allIntermediateKeys: string[] = [];\n                // just add type=number keys\n                for (const key in parsedMetric) {\n                    if (typeof parsedMetric[key] === 'number') {\n                        allIntermediateKeys.push(key);\n                    }\n                }\n                intermediateAllKeysList = allIntermediateKeys;\n            }\n        }\n\n        if (intermediateAllKeysList.includes('default') && intermediateAllKeysList[0] !== 'default') {\n            intermediateAllKeysList = intermediateAllKeysList.filter(item => item !== 'default');\n            intermediateAllKeysList.unshift('default');\n        }\n\n        return intermediateAllKeysList;\n    };\n\n    componentDidUpdate(prevProps: TableListProps): void {\n        if (this.props.tableSource !== prevProps.tableSource) {\n            this._updateTableSource();\n        }\n    }\n\n    componentDidMount(): void {\n        this._updateTableSource();\n    }\n\n    render(): React.ReactNode {\n        const {\n            displayedItems,\n            columns,\n            customizeColumnsDialogVisible,\n            compareDialogVisible,\n            displayedColumns,\n            selectedRowIds,\n            intermediateDialogTrial,\n            copiedTrialId,\n            searchItems,\n            intermediateKeyList\n        } = this.state;\n\n        return (\n            <div id='tableList'>\n                <Stack horizontal className='panelTitle' style={{ marginTop: 10 }}>\n                    <span style={{ marginRight: 12 }}>{tableListIcon}</span>\n                    <span>Trial jobs</span>\n                </Stack>\n                <Stack horizontal className='allList'>\n                    <StackItem>\n                        <Stack horizontal horizontalAlign='end' className='allList'>\n                            <Search\n                                searchFilter={searchItems} // search filter list\n                                changeSearchFilterList={this.changeSearchFilterList}\n                                updatePage={this.props.updateDetailPage}\n                            />\n                        </Stack>\n                    </StackItem>\n\n                    <StackItem styles={{ root: { position: 'absolute', right: '0' } }}>\n                        <DefaultButton\n                            className='allList-button-gap'\n                            text='Add/Remove columns'\n                            onClick={(): void => {\n                                this.setState({ customizeColumnsDialogVisible: true });\n                            }}\n                        />\n                        <DefaultButton\n                            text='Compare'\n                            className='allList-compare'\n                            onClick={(): void => {\n                                this.setState({ compareDialogVisible: true });\n                            }}\n                            disabled={selectedRowIds.length === 0}\n                        />\n                        <TensorboardUI\n                            selectedRowIds={selectedRowIds}\n                            changeSelectTrialIds={this.changeSelectTrialIds}\n                        />\n                    </StackItem>\n                </Stack>\n                {columns && displayedItems && (\n                    <PaginationTable\n                        columns={columns.filter(\n                            column =>\n                                displayedColumns.includes(column.key) ||\n                                ['_expand', '_operation', '_selected'].includes(column.key)\n                        )}\n                        items={displayedItems}\n                        compact={true}\n                        selectionMode={0}\n                        selectionPreservedOnEmptyClick={true}\n                        onRenderRow={(props): any => {\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            return <ExpandableDetails detailsProps={props!} isExpand={props!.item._expandDetails} />;\n                        }}\n                    />\n                )}\n                {compareDialogVisible && (\n                    <Compare\n                        title='Compare trials'\n                        showDetails={true}\n                        trials={this.props.tableSource.filter(trial => selectedRowIds.includes(trial.id))}\n                        onHideDialog={(): void => {\n                            this.setState({ compareDialogVisible: false });\n                        }}\n                        changeSelectTrialIds={this.changeSelectTrialIds}\n                    />\n                )}\n                {intermediateDialogTrial !== undefined && (\n                    <Compare\n                        title='Intermediate results'\n                        showDetails={false}\n                        trials={[intermediateDialogTrial]}\n                        intermediateKeyList={intermediateKeyList}\n                        onHideDialog={(): void => {\n                            this.setState({ intermediateDialogTrial: undefined });\n                        }}\n                    />\n                )}\n                {customizeColumnsDialogVisible && (\n                    <ChangeColumnComponent\n                        selectedColumns={displayedColumns}\n                        allColumns={columns\n                            .filter(column => !column.key.startsWith('_'))\n                            .map(column => ({ key: column.key, name: column.name }))}\n                        onSelectedChange={this._updateDisplayedColumns.bind(this)}\n                        onHideDialog={(): void => {\n                            this.setState({ customizeColumnsDialogVisible: false });\n                        }}\n                        whichComponent='table'\n                    />\n                )}\n                {/* Clone a trial and customize a set of new parameters */}\n                {/* visible is done inside because prompt is needed even when the dialog is closed */}\n                <Customize\n                    visible={copiedTrialId !== undefined}\n                    copyTrialId={copiedTrialId || ''}\n                    closeCustomizeModal={(): void => {\n                        this.setState({ copiedTrialId: undefined });\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default TableList;\n","import * as React from 'react';\nimport { Stack, Pivot, PivotItem } from '@fluentui/react';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport { AppContext } from '@/App';\nimport DefaultPoint from './chart/DefaultMetricPoint';\nimport Duration from './chart/Duration';\nimport Para from './chart/Para';\nimport Intermediate from './chart/Intermediate';\nimport TableList from './table/TableList';\nimport '@style/button.scss';\nimport '@style/logPath.scss';\nimport '@style/openRow.scss';\nimport '@style/pagination.scss';\nimport '@style/experiment/overview/overviewTitle.scss';\nimport '@style/experiment/trialdetail/search.scss';\nimport '@style/experiment/trialdetail/tensorboard.scss';\nimport '@style/table.scss';\nimport '@style/common/trialStatus.css';\n\n/**\n * single experiment\n * trial detail page\n */\n\ninterface TrialDetailState {\n    whichChart: string;\n}\n\nclass TrialsDetail extends React.Component<{}, TrialDetailState> {\n    static contextType = AppContext;\n    context!: React.ContextType<typeof AppContext>;\n    public interAccuracy = 0;\n    public interAllTableList = 2;\n\n    public tableList!: TableList | null;\n    public searchInput!: HTMLInputElement | null;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            whichChart: 'Default metric'\n        };\n    }\n\n    handleWhichTabs = (item: any): void => {\n        this.setState({ whichChart: item.props.headerText });\n    };\n\n    render(): React.ReactNode {\n        const { whichChart } = this.state;\n        const source = TRIALS.toArray();\n        const trialIds = TRIALS.toArray().map(trial => trial.id);\n\n        return (\n            <AppContext.Consumer>\n                {(_value): React.ReactNode => (\n                    <React.Fragment>\n                        <div className='trial' id='tabsty'>\n                            <Pivot\n                                defaultSelectedKey={'0'}\n                                className='detail-title'\n                                onLinkClick={this.handleWhichTabs}\n                                selectedKey={whichChart}\n                            >\n                                {/* <PivotItem tab={this.titleOfacc} key=\"1\"> doesn't work*/}\n                                <PivotItem headerText='Default metric' itemIcon='HomeGroup' key='Default metric'>\n                                    <Stack className='graph'>\n                                        <DefaultPoint\n                                            trialIds={trialIds}\n                                            hasBestCurve={true}\n                                            chartHeight={402}\n                                            changeExpandRowIDs={_value.changeExpandRowIDs}\n                                        />\n                                    </Stack>\n                                </PivotItem>\n                                {/* <PivotItem tab={this.titleOfhyper} key=\"2\"> */}\n                                <PivotItem headerText='Hyper-parameter' itemIcon='Equalizer' key='Hyper-parameter'>\n                                    <Stack className='graph'>\n                                        <Para trials={source} searchSpace={EXPERIMENT.searchSpaceNew} />\n                                    </Stack>\n                                </PivotItem>\n                                {/* <PivotItem tab={this.titleOfDuration} key=\"3\"> */}\n                                <PivotItem headerText='Duration' itemIcon='BarChartHorizontal' key='Duration'>\n                                    <Duration source={source} />\n                                </PivotItem>\n                                {/* <PivotItem tab={this.titleOfIntermediate} key=\"4\"> */}\n                                <PivotItem\n                                    headerText='Intermediate result'\n                                    itemIcon='StackedLineChart'\n                                    key='Intermediate result'\n                                >\n                                    {/* *why this graph has small footprint? */}\n                                    <Intermediate source={source} />\n                                </PivotItem>\n                            </Pivot>\n                        </div>\n                        {/* trial table list */}\n                        <div className='detailTable' style={{ marginTop: 10 }}>\n                            <TableList tableSource={source} updateDetailPage={this.context.updateDetailPage} />\n                        </div>\n                    </React.Fragment>\n                )}\n            </AppContext.Consumer>\n        );\n    }\n}\n\nexport default TrialsDetail;\n","import * as React from 'react';\nimport { Toggle, Stack } from '@fluentui/react';\nimport ReactEcharts from 'echarts-for-react';\nimport { Trial } from '@model/trial';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport { TooltipForAccuracy, EventMap } from '@static/interface';\nimport { reformatRetiariiParameter } from '@static/function';\nimport 'echarts/lib/chart/scatter';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/title';\n\nconst EmptyGraph = {\n    grid: {\n        left: '8%'\n    },\n    xAxis: {\n        name: 'Trial',\n        type: 'category'\n    },\n    yAxis: {\n        name: 'Default metric',\n        type: 'value'\n    }\n};\n\ninterface DefaultPointProps {\n    trialIds: string[];\n    chartHeight: number;\n    hasBestCurve: boolean;\n    changeExpandRowIDs: Function;\n}\n\ninterface DefaultPointState {\n    bestCurveEnabled?: boolean | undefined;\n    startY: number; // dataZoomY\n    endY: number;\n}\n\nclass DefaultPoint extends React.Component<DefaultPointProps, DefaultPointState> {\n    constructor(props: DefaultPointProps) {\n        super(props);\n        this.state = {\n            bestCurveEnabled: false,\n            startY: 0, // dataZoomY\n            endY: 100\n        };\n    }\n\n    loadDefault = (ev: React.MouseEvent<HTMLElement>, checked?: boolean): void => {\n        this.setState({ bestCurveEnabled: checked });\n    };\n\n    metricDataZoom = (e: EventMap): void => {\n        if (e.batch !== undefined) {\n            this.setState(() => ({\n                startY: e.batch[0].start !== null ? e.batch[0].start : 0,\n                endY: e.batch[0].end !== null ? e.batch[0].end : 100\n            }));\n        }\n    };\n\n    pointClick = (params: any): void => {\n        // [hasBestCurve: true]: is detail page, otherwise, is overview page\n        const { hasBestCurve } = this.props;\n        if (!hasBestCurve) {\n            this.props.changeExpandRowIDs(params.data[2], 'chart');\n        }\n    };\n\n    generateGraphConfig(_maxSequenceId: number): any {\n        const { startY, endY } = this.state;\n        const { hasBestCurve } = this.props;\n        return {\n            grid: {\n                left: '8%'\n            },\n            tooltip: {\n                trigger: 'item',\n                enterable: hasBestCurve,\n                confine: true, // confirm always show tooltip box rather than hidden by background\n                formatter: (data: TooltipForAccuracy): React.ReactNode => `\n                    <div class=\"tooldetailAccuracy\">\n                        <div>Trial No.: ${data.data[0]}</div>\n                        <div>Trial ID: ${data.data[2]}</div>\n                        <div>Default metric: ${data.data[1]}</div>\n                        <div>Parameters: <pre>${JSON.stringify(\n                            reformatRetiariiParameter(data.data[3]),\n                            null,\n                            4\n                        )}</pre></div>\n                    </div>\n                `\n            },\n            dataZoom: [\n                {\n                    id: 'dataZoomY',\n                    type: 'inside',\n                    yAxisIndex: [0],\n                    filterMode: 'empty',\n                    start: startY,\n                    end: endY\n                }\n            ],\n            xAxis: {\n                name: 'Trial',\n                type: 'category'\n            },\n            yAxis: {\n                name: 'Default metric',\n                type: 'value',\n                scale: true\n            },\n            series: undefined\n        };\n    }\n\n    generateScatterSeries(trials: Trial[]): any {\n        const data = trials.map(trial => [trial.sequenceId, trial.accuracy, trial.id, trial.description.parameters]);\n        return {\n            symbolSize: 6,\n            type: 'scatter',\n            data\n        };\n    }\n\n    generateBestCurveSeries(trials: Trial[]): any {\n        let best = trials[0];\n        const data = [[best.sequenceId, best.accuracy, best.id, best.description.parameters]];\n\n        for (let i = 1; i < trials.length; i++) {\n            const trial = trials[i];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const delta = trial.accuracy! - best.accuracy!;\n            const better = EXPERIMENT.optimizeMode === 'minimize' ? delta < 0 : delta > 0;\n            if (better) {\n                data.push([trial.sequenceId, trial.accuracy, best.id, trial.description.parameters]);\n                best = trial;\n            } else {\n                data.push([trial.sequenceId, best.accuracy, best.id, trial.description.parameters]);\n            }\n        }\n\n        return {\n            type: 'line',\n            lineStyle: { color: '#FF6600' },\n            data\n        };\n    }\n\n    render(): React.ReactNode {\n        const { hasBestCurve, chartHeight } = this.props;\n        const graph = this.generateGraph();\n        const accNodata = graph === EmptyGraph ? 'No data' : '';\n        const onEvents = { dataZoom: this.metricDataZoom, click: this.pointClick };\n\n        return (\n            <div>\n                {hasBestCurve && (\n                    <Stack horizontalAlign='end' className='default-metric'>\n                        <Toggle label='Optimization curve' inlineLabel onChange={this.loadDefault} />\n                    </Stack>\n                )}\n                <div className='default-metric-graph graph'>\n                    <ReactEcharts\n                        option={graph}\n                        style={{\n                            width: '100%',\n                            height: chartHeight,\n                            margin: '0 auto'\n                        }}\n                        theme='nni_theme'\n                        notMerge={true} // update now\n                        onEvents={onEvents}\n                    />\n                    <div className='default-metric-noData'>{accNodata}</div>\n                </div>\n            </div>\n        );\n    }\n\n    private generateGraph(): any {\n        const trials = TRIALS.getTrials(this.props.trialIds).filter(trial => trial.sortable);\n        if (trials.length === 0) {\n            return EmptyGraph;\n        }\n        const graph = this.generateGraphConfig(trials[trials.length - 1].sequenceId);\n        if (this.state.bestCurveEnabled) {\n            (graph as any).series = [this.generateBestCurveSeries(trials), this.generateScatterSeries(trials)];\n        } else {\n            (graph as any).series = [this.generateScatterSeries(trials)];\n        }\n        return graph;\n    }\n}\n\nexport default DefaultPoint;\n"],"names":["CopyButton","value","hideTooltip","ref","useRef","iconProps","iconName","styles","icon","fontSize","FontSizes","onClick","event","stopPropagation","copy","current","show","setTimeout","dismiss","onMouseDown","e","onMouseUp","hidden","content","componentRef","delay","tooltipProps","calloutProps","beak","background","TOOLTIP_BACKGROUND_COLOR","beakCurtain","calloutMain","propTypes","PropTypes","LogPathChild","React","constructor","props","super","render","eachLogpath","logName","this","isLink","test","className","rel","href","target","PaiTrialChild","logString","id","logCollect","DOWNLOAD_IP","style","marginRight","PaitrialLog","logStr","logCollection","isTwopath","indexOf","split","TrialLog","PanelMonacoEditor","state","panelInnerHeight","window","innerHeight","setLogPanelHeight","setState","innerWidth","addEventListener","componentWillUnmount","removeEventListener","hideConfigPanel","panelName","panelContent","monacoEditorHeight","caclMonacoEditorHeight","Stack","Panel","isOpen","hasCloseButton","isFooterAtBottom","isLightDismiss","onLightDismissClick","height","language","theme","options","minimap","enabled","readOnly","automaticLayout","wordWrap","PrimaryButton","text","OpenRow","typeInfo","info","isHidenInfo","showRetiaParamPanel","hideMessageInfo","hideRetiaParam","isshowRetiaParamPanel","getCopyStatus","copyParams","trial","params","JSON","stringify","reformatRetiariiParameter","description","parameters","openTrialLog","filename","open","MANAGER_IP","trialId","openModelOnnx","TRIALS","logPathRow","logPath","originParameters","hasVisualHyperParams","RETIARIIPARAMETERS","Pivot","PivotItem","headerText","key","itemIcon","undefined","hyperParameters","hideRoot","shouldExpandNode","getItemString","data","horizontal","bind","root","width","DefaultButton","MessageInfo","EXPERIMENT","PaiTrialLog","marginTop","marginLeft","getTheme","mergeStyleSets","buttonArea","verticalAlign","display","textAlign","minWidth","callout","maxWidth","header","padding","title","fonts","xLarge","margin","color","palette","neutralPrimary","fontWeight","FontWeights","inner","actions","position","whiteSpace","subtext","small","link","medium","buttons","justifyContent","Duration","startDuration","endDuration","durationSource","initDuration","source","trialTime","filter","filterDuration","forEach","item","push","sequenceId","duration","tooltip","trigger","axisPointer","type","formatter","dataIndex","convertDuration","grid","bottom","containLabel","left","right","dataZoom","yAxisIndex","filterMode","start","end","xAxis","name","yAxis","nameTextStyle","series","getOption","dataObj","enterable","drawDurationGraph","trialRun","trialJobs","Object","keys","map","temp","componentDidMount","componentDidUpdate","prevProps","onEvents","durationDataZoom","option","notMerge","batch","ChangeColumnComponent","currentSelected","selectedColumns","makeChangeHandler","label","ev","checked","onCheckboxChange","val","includes","result","saveUserSelectColumn","allColumns","onSelectedChange","whichComponent","column","localStorage","setItem","hideDialog","cancelOption","onHideDialog","minSelected","Dialog","dialogContentProps","DialogType","subText","modalProps","isBlocking","main","Checkbox","onChange","marginBottom","DialogFooter","disabled","length","Para","paraRef","chartMulineStyle","innerChartMargins","top","dimName","primaryMetricKey","selectedPercent","noChart","customizeColumnsDialogVisible","availableDimensions","chosenDimensions","getItem","parse","percentNum","toString","renderParallelCoordinates","updateEntries","trials","searchSpace","horizontalAlign","Dropdown","selectedKey","dropdown","finalKeysDropdown","dim","selected","percent","parseFloat","inferredSearchSpace","inferredMetricSpace","convertedTrials","getTrialsAsObjectList","dimensions","colorDim","colorScale","k","v","axes","yscale","convertToD3Scale","scale","interpolate","sort","a","b","keptTrialNum","Math","max","ceil","slice","domain","d3","reverse","assignColors","range","scaleMin","scaleMax","pivot","invert","firstRun","pcs","ParCoords","d","_","reduce","obj","entry","alphaOnBrushed","smoothness","brushMode","reorderable","interactive","filterByStatus","s","entries","Array","from","metrics","ret","fullName","getRange","axis","initRange","padLinear","x0","x1","dx","scaleInst","nested","y0","y1","log","exp","padLog","stackTokens","childrenGap","Intermediate","detailSource","interSource","filterSource","eachIntermediateNum","isLoadconfirmBtn","isFilter","clickCounts","startMediaY","endMediaY","drawIntermediate","trialIntermediate","trialNum","intermediate","hyperPara","legend","i","confine","seriesName","find","boundaryGap","nullData","filterLines","pointVal","pointInput","minVal","minValInput","maxVal","maxValInput","alert","min","counts","switchTurn","prevState","IntermediateEvents","intermediateDataZoom","tokens","input","Toggle","classNames","menu","selectors","lineHeight","cursor","backgroundColor","categoriesList","listStyleType","button","getDropdownOptions","parameter","trialJobStatus","_value","getTrialsBySearchFilters","arr","searchItems","relation","que","choice","copySearchItems","get","isChoice","ele","value1","value2","convertParametersValue","element","toUpperCase","searchChoiceFilter","operator","findTrials","filed","newResult","field","index","Set","has","getSearchInputValueBySearchList","searchFilter","str","filterName","isChoiceType","parameterName","flag","_type","contentStyles","container","flexFlow","alignItems","xLargePlus","flex","borderTop","themePrimary","body","overflowY","p","iconButtonStyles","rootHovered","neutralDark","dragOptions","moveMenuItemText","closeMenuItemText","ContextualMenu","_parseIntermediates","intermediates","metric","parsedMetric","parseMetrics","Compare","intermediateKey","intermediateKeyList","_generateTooltipSummary","row","renderToString","_intermediates","items","xAxisMax","fill","dataForEchart","_renderRow","rowName","_overlapKeys","intersection","inAll","t","_columns","scrollClass","parameterKeys","metricKeys","closeCompareModal","showDetails","changeSelectTrialIds","selectOtherKeys","_event","intermediateAllKeysList","flatten","m","Map","baseName","Modal","containerClassName","allowTouchBodyScroll","onDismiss","IconButton","ariaLabel","Customize","isShowSubmitSucceed","isShowSubmitFailed","isShowWarning","copyTrialParameter","customParameters","customID","NaN","changeMap","getFinalVal","set","addNewTrial","customized","parametersIllegal","submitCustomize","warningConfirm","warningCancel","axios","method","headers","then","res","status","closeCustomizeModal","catch","closeSucceedHint","closeFailedHint","copyTrialId","originCopyTrialPara","visible","StackItem","defaultValue","completed","closeButtonAriaLabel","errorBadge","warining","TensorboardDialog","isReaptedStartTensorboard","isShowTensorboardDetail","errorMessage","error","message","trialJobIdList","join","hostname","location","protocol","port","TensorboardUI","refreshTensorboard","selectedRowIds","queryTensorboardList","setQueryTensorboardList","useState","setReaptedTensorboard","tensorboardPanelVisible","setTensorboardPanelVisible","setIsShowTensorboardDetail","selectedTensorboard","setSelectedTensorboard","setErrorMessage","timerList","setTimerList","queryAllTensorboard","storeTimerList","closeTimer","clearTimeout","isDisableTensorboardBtn","disableTensorboard","tensorboardMenu","getTensorboardMenu","useEffect","splitButtonAriaLabel","menuProps","err","response","startTrialTensorboard","SearchParameterConditions","changeSearchFilterList","updatePage","setSearchInputVal","isChoiceTypeSearchFilter","operatorList","initValueList","filterElement","getInitVal","operatorVal","setOperatorVal","firstInputVal","setFirstInputVal","secondInputVal","setSecondInputVal","choiceList","setChoiceList","updateFirstInputVal","getSecondInputVal","gap10","selectedKeys","multiSelect","match","newSearchFilters","GeneralSearch","searchName","getSearchNameInit","searchFilterConditions","Search","searchInputVal","searchMenuProps","parameterList","unshift","subMenuProps","onRender","renderIdAndNoComponent","renderParametersSearchComponent","shouldFocusOnMount","directionalHint","DirectionalHint","getSearchMenu","dismissMenu","changeTableListPage","searchFilterList","convertStringArrToList","trim","clearFliter","SearchBox","placeholder","newValue","onSearch","allFilterConditions","newSearchFilter","splice","findIndex","eachFilterConditionStr","endsWith","eachFilterConditionArr","isChoicesType","onEscape","onClear","KillJob","isCalloutVisible","menuButton","menuButtonElement","openPromot","blocked","FocusTrapCallout","role","gapSpace","setInitialFocus","FocusZone","gap","onKill","killJob","preventDefault","ExpandableDetails","detailsProps","isExpand","DetailsRow","horizontalGapStackTokens","_currentTableOffset","perPage","currentPage","floor","_obtainPaginationSlice","offset","PaginationTable","itemsPerPage","itemsOnPage","_onItemsPerPageSelect","currentOffset","_onPageSelect","detailListProps","itemsCount","pageCount","DetailsList","previousLabel","Icon","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","subContainerClassName","disableInitialCallback","activeClassName","require","defaultDisplayedColumns","_inferColumnTitle","columnKey","startsWith","withSpace","replace","letter","toLowerCase","charAt","TableList","displayedItems","displayedColumns","columns","searchType","searchText","compareDialogVisible","intermediateDialogTrial","copiedTrialId","sortInfo","isDescend","parametersType","_expandedTrialIds","_onColumnClick","isSortedDescending","currCol","_updateTableSource","_trialsToTableItems","metricSpace","_checked","startTime","endTime","intermediateCount","_expandDetails","latestAccuracy","formatLatestAccuracy","copyAndSort","selectedTrialOnChangeEvent","_ev","latestDisplayedItems","latestSelectedRowIds","newDisplayedItems","_buildColumnsFromTableItems","tableItems","fieldName","isResizable","record","transition","transform","newItem","add","delete","newItems","columnTitle","widths","onColumnClick","TooltipHost","_formattedLatestAccuracy","formatTimestamp","_renderOperationColumn","isSorted","tableSource","_updateDisplayedColumns","runningTrial","disabledAddCustomizedTrial","intermediateKeyListResult","getIntermediateAllKeys","LineChart","intermediateMetrics","allIntermediateKeys","tableListIcon","updateDetailPage","compact","selectionMode","selectionPreservedOnEmptyClick","onRenderRow","TrialsDetail","AppContext","interAccuracy","interAllTableList","whichChart","handleWhichTabs","trialIds","App","defaultSelectedKey","onLinkClick","hasBestCurve","chartHeight","changeExpandRowIDs","context","EmptyGraph","DefaultPoint","bestCurveEnabled","startY","endY","loadDefault","metricDataZoom","pointClick","generateGraphConfig","_maxSequenceId","generateScatterSeries","symbolSize","accuracy","generateBestCurveSeries","best","delta","lineStyle","graph","generateGraph","accNodata","click","inlineLabel","sortable"],"sourceRoot":""}