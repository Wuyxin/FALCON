{"version":3,"file":"static/js/main.1a1f3d7c.js","mappings":"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","sources":["static/jsonutil.ts","components/nav/slideNav/TrialConfigPanel.tsx","components/nav/slideNav/IconButtonTemplet.tsx","components/nav/slideNav/SlideNavBtns.tsx","components/nav/slideNav/ExperimentSummaryPanel.tsx","components/nav/Nav.tsx","App.tsx","components/common/MessageInfo.tsx","components/fluent/ChildrenGap.ts","components/fluent/Icon.tsx","components/common/MonacoEditor.tsx","components/nav/slideNav/LogPanel.tsx","components/nav/slideNav/NNItabs.tsx","serviceWorker.ts","index.tsx","static/const.ts","static/model/searchspace.ts","static/model/experiment.ts","static/model/trial.ts","static/datamodel.ts","static/model/trialmanager.ts","static/experimentConfig.ts","static/function.ts"],"sourcesContent":["const batchThreshold = 0.5;\n\n/**\n *  Format objects in a \"batch\", which means they should either be all collapsed or all expanded.\n *\n *  Note that in this file the word \"object\" means any serializable value,\n *  while JavaScript `Object` is called \"dict\" instead.\n *\n *  Caller should use `detectBatch` to ensure that all non-null `objects` are \"batchable\".\n *  A single object is always a valid batch, and `null` can be batched with any value.\n *\n *  If the objects are values of dict, their keys can be passed with `keyOrKeys`,\n *  which will add `\"key\": ` before each stringified object.\n *\n *  @param objects  Objects to be stringify.\n *  @param curIndent  Spaces that should be prepended to each line.\n *  @param indent  Extra spaces to add for each level of indentation.\n *  @param width  Expected width of text block. This is only a hint, not hard limit.\n *  @param keyOrKeys  Array of keys for each object,\n *      or a single string as the same key of all objects,\n *      or `undefined` if they are not dict value.\n *\n *  @returns  Formatted string for each object, without trailing comma.\n **/\nfunction batchFormat(\n    objects: any[],\n    curIndent: string,\n    indent: string,\n    width: number,\n    keyOrKeys?: string | string[]\n): string[] {\n    let keys: string[]; // dict key as prefix string\n    if (keyOrKeys === undefined) {\n        keys = objects.map(() => '');\n    } else if (typeof keyOrKeys === 'string') {\n        keys = objects.map(() => `\"${keyOrKeys}\": `);\n    } else {\n        keys = keyOrKeys.map(k => `\"${k}\": `);\n    }\n\n    // try to collapse all\n    const lines = objects.map((obj, i) => keys[i] + stringifySingleLine(obj));\n\n    // null values don't affect hierarchy detection\n    const nonNull = objects.filter(obj => obj !== null);\n    if (nonNull.length === 0) {\n        return lines;\n    }\n\n    const hasNested = nonNull.some(obj => detectNested(obj));\n\n    if (!hasNested && lines.every(line => line.length + curIndent.length < width)) {\n        return lines;\n    }\n\n    if (Array.isArray(nonNull[0])) {\n        // objects are arrays, format all items in one batch\n        const elements = batchFormat(concat(nonNull), curIndent + indent, indent, width);\n        const iter = elements[Symbol.iterator]();\n        return objects.map((obj, i) => {\n            if (obj === null) {\n                return keys[i] + 'null';\n            } else {\n                return (\n                    keys[i] +\n                    createBlock(\n                        curIndent,\n                        indent,\n                        '[]',\n                        obj.map(() => iter.next().value)\n                    )\n                );\n            }\n        });\n    }\n\n    if (typeof nonNull[0] === 'object') {\n        // objects are dicts, format values in one batch if they have similar keys\n        const values = concat(nonNull.map(obj => Object.values(obj)));\n        const childrenKeys = concat(nonNull.map(obj => Object.keys(obj)));\n        if (detectBatch(values)) {\n            // these objects look like TypeScript style `Map` or `Record`, where the values have same \"type\"\n            const elements = batchFormat(values, curIndent + indent, indent, width, childrenKeys);\n            const iter = elements[Symbol.iterator]();\n            return objects.map((obj, i) => {\n                if (obj === null) {\n                    return keys[i] + 'null';\n                } else {\n                    return (\n                        keys[i] +\n                        createBlock(\n                            curIndent,\n                            indent,\n                            '{}',\n                            Object.keys(obj).map(() => iter.next().value)\n                        )\n                    );\n                }\n            });\n        } else {\n            // these objects look like class instances, so we will try to group their fields\n            const uniqueKeys = new Set(childrenKeys);\n            const iters = new Map();\n            for (const key of uniqueKeys) {\n                const fields = nonNull.map(obj => obj[key]).filter(v => v !== undefined);\n                let elements;\n                if (detectBatch(fields)) {\n                    // look like same field of class instances\n                    elements = batchFormat(fields, curIndent + indent, indent, width, key);\n                } else {\n                    // no idea what these are, fallback to format them independently\n                    elements = fields.map(field => batchFormat([field], curIndent + indent, indent, width, key));\n                }\n                iters.set(key, elements[Symbol.iterator]());\n            }\n            return objects.map((obj, i) => {\n                if (obj === null) {\n                    return keys[i] + 'null';\n                } else {\n                    const elements = Object.keys(obj).map(key => iters.get(key).next().value);\n                    return keys[i] + createBlock(curIndent, indent, '{}', elements);\n                }\n            });\n        }\n    }\n\n    // objects are primitive, impossible to break lines although they are too long\n    return lines;\n}\n\n/**\n *  Detect whether objects should be formated as a batch or formatted on their own.\n *\n *  Objects should be batched if and only if one of following conditions holds:\n *    * They are all primitive values.\n *    * They are all arrays or null.\n *    * They are all dicts or null, and the dicts have similar keys.\n *\n *  For dicts, we assume the perfect situation is that each dict has all keys.\n *  Then we measure their similarity by how many fields are \"missing\" in order to become perfect match.\n *  The similarity value is calculated as:\n *      number of missing fields / total fields of all dicts if they are perfectly matched\n *  The threshold of similarity is defined by `batchThreshold`, which is 0.5 by default.\n *  Dicts are considered batchable iff their similarity value is greater than the threshold.\n *\n *  @param objects  The objects to be analyzed.\n *\n *  @returns  `true` if objects should be batched; `false` otherwise.\n **/\nfunction detectBatch(objects: any[]): boolean {\n    const nonNull = objects.filter(obj => obj !== null);\n\n    if (nonNull.every(obj => Array.isArray(obj))) {\n        return sameType(concat(nonNull));\n    }\n\n    if (nonNull.every(obj => typeof obj === 'object' && !Array.isArray(obj))) {\n        const totalKeys = new Set(concat(nonNull.map(obj => Object.keys(obj)))).size;\n        const missKeys = nonNull.map(obj => totalKeys - Object.keys(obj).length);\n        const missSum = missKeys.reduce((a, b) => a + b, 0);\n        return missSum < totalKeys * nonNull.length * batchThreshold;\n    }\n\n    return sameType(nonNull);\n}\n\nfunction detectNested(obj: any): boolean {\n    return typeof obj == 'object' && Object.values(obj).some(child => typeof child == 'object');\n}\n\nfunction concat(arrays: any[][]): any[] {\n    return ([] as any[]).concat(...arrays);\n}\n\nfunction createBlock(curIndent: string, indent: string, brackets: string, elements: string[]): string {\n    if (elements.length === 0) {\n        return brackets;\n    }\n    const head = brackets[0] + '\\n' + curIndent + indent;\n    const lineSeparator = ',\\n' + curIndent + indent;\n    const tail = '\\n' + curIndent + brackets[1];\n    return head + elements.join(lineSeparator) + tail;\n}\n\nfunction sameType(objects: any[]): boolean {\n    const nonNull = objects.filter(obj => obj !== undefined);\n    return nonNull.length > 0 ? nonNull.every(obj => typeof obj === typeof nonNull[0]) : true;\n}\n\nfunction stringifySingleLine(obj: any): string {\n    if (obj === null) {\n        return 'null';\n    } else if (typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj.toString();\n    } else if (typeof obj === 'string') {\n        return `\"${obj}\"`;\n    } else if (Array.isArray(obj)) {\n        return '[' + obj.map(x => stringifySingleLine(x)).join(', ') + ']';\n    } else {\n        return (\n            '{' +\n            Object.keys(obj)\n                .map(key => `\"${key}\": ${stringifySingleLine(obj[key])}`)\n                .join(', ') +\n            '}'\n        );\n    }\n}\n\nfunction prettyStringify(obj: any, width: number, indent: number): string {\n    return batchFormat([obj], '', ' '.repeat(indent), width)[0];\n}\n\nexport { prettyStringify };\n","import * as React from 'react';\nimport { Stack, Panel, PrimaryButton } from '@fluentui/react';\nimport lodash from 'lodash';\nimport MonacoEditor from 'react-monaco-editor';\nimport { EXPERIMENT } from '@static/datamodel';\nimport { MONACO } from '@static/const';\nimport { convertDuration, caclMonacoEditorHeight } from '@static/function';\nimport { prettyStringify } from '@static/jsonutil';\nimport '@static/style/logPanel.scss';\n\ninterface LogDrawerProps {\n    hideConfigPanel: () => void;\n    panelName: string;\n}\n\ninterface LogDrawerState {\n    panelInnerHeight: number;\n    innerWidth: number;\n}\n\n/**\n * search space\n * config\n * model\n */\n\nclass TrialConfigPanel extends React.Component<LogDrawerProps, LogDrawerState> {\n    constructor(props: LogDrawerProps) {\n        super(props);\n\n        this.state = {\n            panelInnerHeight: window.innerHeight,\n            innerWidth: window.innerWidth\n        };\n    }\n\n    // use arrow function for change window size met error: this.setState is not a function\n    setLogDrawerHeight = (): void => {\n        this.setState(() => ({ panelInnerHeight: window.innerHeight, innerWidth: window.innerWidth }));\n    };\n\n    async componentDidMount(): Promise<void> {\n        window.addEventListener('resize', this.setLogDrawerHeight);\n    }\n\n    componentWillUnmount(): void {\n        window.removeEventListener('resize', this.setLogDrawerHeight);\n    }\n\n    render(): React.ReactNode {\n        const { hideConfigPanel, panelName } = this.props;\n        const { panelInnerHeight, innerWidth } = this.state;\n        const monacoEditorHeight = caclMonacoEditorHeight(panelInnerHeight);\n        const blacklist = [\n            'id',\n            'logDir',\n            'startTime',\n            'endTime',\n            'experimentName',\n            'searchSpace',\n            'trainingServicePlatform'\n        ];\n        const filter = (key: string, val: any): any => {\n            return blacklist.includes(key) ? undefined : val;\n        };\n        const profile = lodash.cloneDeep(EXPERIMENT.profile);\n        profile.execDuration = convertDuration(profile.execDuration);\n\n        const prettyWidth = innerWidth > 1400 ? 100 : 60;\n\n        const showProfile = JSON.stringify(profile, filter, 2);\n        return (\n            <Stack>\n                <Panel\n                    isOpen={true}\n                    hasCloseButton={false}\n                    isFooterAtBottom={true}\n                    isLightDismiss={true}\n                    onLightDismissClick={hideConfigPanel}\n                >\n                    <div className='panel'>\n                        {panelName === 'search space' ? (\n                            <div>\n                                <div className='panelName'>Search space</div>\n                                <MonacoEditor\n                                    height={monacoEditorHeight}\n                                    language='json'\n                                    theme='vs-light'\n                                    value={prettyStringify(EXPERIMENT.searchSpace, prettyWidth, 2)}\n                                    options={MONACO}\n                                />\n                            </div>\n                        ) : (\n                            <div className='profile'>\n                                <div className='panelName'>Config</div>\n                                <MonacoEditor\n                                    width='100%'\n                                    height={monacoEditorHeight}\n                                    language='json'\n                                    theme='vs-light'\n                                    value={showProfile}\n                                    options={MONACO}\n                                />\n                            </div>\n                        )}\n                        <PrimaryButton text='Close' className='configClose' onClick={hideConfigPanel} />\n                    </div>\n                </Panel>\n            </Stack>\n        );\n    }\n}\n\nexport default TrialConfigPanel;\n","import React from 'react';\nimport { DefaultButton, Icon } from '@fluentui/react';\n\ninterface ButtonProps {\n    icon: string;\n    btuName: string;\n    event: any;\n}\nclass IconButtonTemplet extends React.Component<ButtonProps, {}> {\n    constructor(props: ButtonProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { icon, btuName, event } = this.props;\n        return (\n            <div className='container'>\n                <DefaultButton className='icon'>\n                    <Icon iconName={icon} />\n                </DefaultButton>\n                <DefaultButton className='integralBtn' onClick={event}>\n                    <Icon iconName={icon} />\n                    <span className='margin'>{btuName}</span>\n                </DefaultButton>\n            </div>\n        );\n    }\n}\nexport default IconButtonTemplet;\n","import React, { useState, useCallback } from 'react';\nimport { Stack, DefaultButton, Icon } from '@fluentui/react';\nimport MediaQuery from 'react-responsive';\nimport TrialConfigPanel from './TrialConfigPanel';\nimport LogPanel from './LogPanel';\nimport IconButtonTemplate from './IconButtonTemplet';\nimport '@style/nav/slideNavBtns.scss';\n\n/***\n * this file is the container of [config, search space, dispatcher/nnimanager log]\n * these three button is in the right of page\n */\nexport const SlideNavBtns = (): any => {\n    const [isShowConfigPanel, setShowConfigPanle] = useState(false);\n    const [isShowLogPanel, setShowLogPanel] = useState(false);\n    const [panelName, setPanelName] = useState('');\n    const hideConfigPanel = useCallback(() => setShowConfigPanle(false), []);\n    const showTrialConfigpPanel = useCallback(() => {\n        setShowConfigPanle(true);\n        setPanelName('config');\n    }, []);\n    const showSearchSpacePanel = useCallback(() => {\n        setShowConfigPanle(true);\n        setPanelName('search space');\n    }, []);\n    const showLogPanel = useCallback(() => {\n        setShowLogPanel(true);\n    }, []);\n    const hideLogPanel = useCallback(() => {\n        setShowLogPanel(false);\n    }, []);\n    return (\n        // right side nav buttons\n        <React.Fragment>\n            <Stack className='config'>\n                <MediaQuery maxWidth={1799}>\n                    <IconButtonTemplate icon='DocumentSearch' btuName='Search space' event={showSearchSpacePanel} />\n                    <IconButtonTemplate icon='Archive' btuName='Config' event={showTrialConfigpPanel} />\n                    <IconButtonTemplate icon='FilePDB' btuName='Log files' event={showLogPanel} />\n                </MediaQuery>\n                <MediaQuery minWidth={1798}>\n                    <div className='container'>\n                        <DefaultButton onClick={showSearchSpacePanel} className='maxScrBtn'>\n                            <Icon iconName='DocumentSearch' />\n                            <span className='margin'>Search space</span>\n                        </DefaultButton>\n                    </div>\n                    <div className='container'>\n                        <DefaultButton onClick={showTrialConfigpPanel} className='maxScrBtn configBtn'>\n                            <Icon iconName='Archive' />\n                            <span className='margin'>Config</span>\n                        </DefaultButton>\n                    </div>\n                    <div className='container'>\n                        <DefaultButton onClick={showLogPanel} className='maxScrBtn logBtn'>\n                            <Icon iconName='FilePDB' />\n                            <span className='margin'>Log files</span>\n                        </DefaultButton>\n                    </div>\n                </MediaQuery>\n            </Stack>\n            {isShowConfigPanel && <TrialConfigPanel panelName={panelName} hideConfigPanel={hideConfigPanel} />}\n            {/* the panel for dispatcher & nnimanager log message */}\n            {isShowLogPanel && <LogPanel closePanel={hideLogPanel} />}\n        </React.Fragment>\n    );\n};\n","import * as React from 'react';\nimport { Stack, PrimaryButton, DefaultButton, Panel, StackItem } from '@fluentui/react';\nimport MonacoEditor from 'react-monaco-editor';\nimport { downFile } from '@static/function';\nimport { DRAWEROPTION } from '@static/const';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport { caclMonacoEditorHeight } from '@static/function';\nimport '@style/logPanel.scss';\n\ninterface ExpDrawerProps {\n    closeExpDrawer: () => void;\n    experimentProfile: object;\n}\n\ninterface ExpDrawerState {\n    experiment: string;\n    expDrawerHeight: number;\n}\n\nclass ExperimentSummaryPanel extends React.Component<ExpDrawerProps, ExpDrawerState> {\n    public _isExperimentMount!: boolean;\n    private refreshId!: number | undefined;\n\n    constructor(props: ExpDrawerProps) {\n        super(props);\n\n        this.state = {\n            experiment: '',\n            expDrawerHeight: window.innerHeight\n        };\n    }\n\n    getExperimentContent = (): void => {\n        const experimentData = JSON.parse(JSON.stringify(this.props.experimentProfile));\n        const trialMessagesArr = TRIALS.getTrialJobList();\n        const interResultList = TRIALS.getMetricsList();\n        Object.keys(trialMessagesArr).map(item => {\n            // not deal with trial's hyperParameters\n            const trialId = trialMessagesArr[item].trialJobId;\n            // add intermediate result message\n            trialMessagesArr[item].intermediate = [];\n            Object.keys(interResultList).map(key => {\n                const interId = interResultList[key].trialJobId;\n                if (trialId === interId) {\n                    trialMessagesArr[item].intermediate.push(interResultList[key]);\n                }\n            });\n        });\n        const result = {\n            experimentParameters: experimentData,\n            trialMessage: trialMessagesArr\n        };\n        if (this._isExperimentMount === true) {\n            this.setState({ experiment: JSON.stringify(result, null, 4) });\n        }\n\n        if (['DONE', 'ERROR', 'STOPPED', 'VIEWED'].includes(EXPERIMENT.status)) {\n            if (this.refreshId !== null || this.refreshId !== undefined) {\n                window.clearInterval(this.refreshId);\n            }\n        }\n    };\n\n    downExperimentParameters = (): void => {\n        const { experiment } = this.state;\n        downFile(experiment, 'experiment.json');\n    };\n\n    onWindowResize = (): void => {\n        this.setState(() => ({ expDrawerHeight: window.innerHeight }));\n    };\n\n    componentDidMount(): void {\n        this._isExperimentMount = true;\n        this.getExperimentContent();\n        this.refreshId = window.setInterval(this.getExperimentContent, 10000);\n        window.addEventListener('resize', this.onWindowResize);\n    }\n\n    componentWillUnmount(): void {\n        this._isExperimentMount = false;\n        window.clearTimeout(this.refreshId);\n        window.removeEventListener('resize', this.onWindowResize);\n    }\n\n    render(): React.ReactNode {\n        const { closeExpDrawer } = this.props;\n        const { experiment, expDrawerHeight } = this.state;\n        const monacoEditorHeight = caclMonacoEditorHeight(expDrawerHeight);\n\n        return (\n            <Panel isOpen={true} hasCloseButton={false} isLightDismiss={true} onLightDismissClick={closeExpDrawer}>\n                <div className='panel'>\n                    <div className='panelName'>Summary</div>\n                    <MonacoEditor\n                        width='100%'\n                        height={monacoEditorHeight}\n                        language='json'\n                        value={experiment}\n                        options={DRAWEROPTION}\n                    />\n                    <Stack horizontal className='buttons'>\n                        <StackItem grow={50} className='download'>\n                            <PrimaryButton text='Download' onClick={this.downExperimentParameters} />\n                        </StackItem>\n                        <StackItem grow={50} className='close'>\n                            <DefaultButton text='Close' onClick={closeExpDrawer} />\n                        </StackItem>\n                    </Stack>\n                </div>\n            </Panel>\n        );\n    }\n}\n\nexport default ExperimentSummaryPanel;\n","import * as React from 'react';\nimport axios from 'axios';\nimport { Stack, StackItem, CommandBarButton, IContextualMenuProps } from '@fluentui/react';\nimport { Link } from 'react-router-dom';\nimport { WEBUIDOC, MANAGER_IP } from '@static/const';\nimport ExperimentSummaryPanel from './slideNav/ExperimentSummaryPanel';\nimport { OVERVIEWTABS, DETAILTABS, NNILOGO } from './slideNav/NNItabs';\nimport { EXPERIMENT } from '@static/datamodel';\nimport { gap15, stackStyle } from '@components/fluent/ChildrenGap';\nimport {\n    infoIconAbout,\n    timeIcon,\n    disableUpdates,\n    requency,\n    closeTimer,\n    ChevronRightMed\n} from '@components/fluent/Icon';\nimport '@style/nav/nav.scss';\nimport '@style/icon.scss';\n\ninterface NavState {\n    version: string;\n    menuVisible: boolean;\n    navBarVisible: boolean;\n    isdisabledFresh: boolean;\n    isvisibleExperimentDrawer: boolean;\n    refreshText: string;\n    refreshFrequency: number | string;\n}\n\ninterface NavProps {\n    changeInterval: (value: number) => void;\n    refreshFunction: () => void;\n}\n\nclass NavCon extends React.Component<NavProps, NavState> {\n    constructor(props: NavProps) {\n        super(props);\n        this.state = {\n            version: '',\n            menuVisible: false,\n            navBarVisible: false,\n            isdisabledFresh: false,\n            isvisibleExperimentDrawer: false,\n            refreshText: 'Auto refresh',\n            refreshFrequency: 10\n        };\n    }\n\n    // to see & download experiment parameters\n    showExpcontent = (): void => {\n        this.setState({ isvisibleExperimentDrawer: true });\n    };\n\n    // close download experiment parameters drawer\n    closeExpDrawer = (): void => {\n        this.setState({ isvisibleExperimentDrawer: false });\n    };\n\n    getNNIversion = (): void => {\n        axios(`${MANAGER_IP}/version`, {\n            method: 'GET'\n        }).then(res => {\n            if (res.status === 200) {\n                this.setState({ version: res.data });\n            }\n        });\n    };\n\n    openGithub = (): void => {\n        const { version } = this.state;\n        const feed = `https://github.com/Microsoft/nni/issues/new?labels=${version}`;\n        window.open(feed);\n    };\n\n    openDocs = (): void => {\n        window.open(WEBUIDOC);\n    };\n\n    openGithubNNI = (): void => {\n        const { version } = this.state;\n        const nniLink = `https://github.com/Microsoft/nni/tree/${version}`;\n        window.open(nniLink);\n    };\n\n    getInterval = (num: number): void => {\n        this.props.changeInterval(num); // notice parent component\n        this.setState(() => ({\n            refreshFrequency: num === 0 ? '' : num,\n            refreshText: num === 0 ? 'Disable auto' : 'Auto refresh'\n        }));\n    };\n\n    componentDidMount(): void {\n        this.getNNIversion();\n    }\n\n    render(): React.ReactNode {\n        const { isvisibleExperimentDrawer, version, refreshText, refreshFrequency } = this.state;\n        const aboutProps: IContextualMenuProps = {\n            items: [\n                {\n                    key: 'feedback',\n                    text: 'Feedback',\n                    iconProps: { iconName: 'OfficeChat' },\n                    onClick: this.openGithub\n                },\n                {\n                    key: 'help',\n                    text: 'Document',\n                    iconProps: { iconName: 'TextDocument' },\n                    onClick: this.openDocs\n                },\n                {\n                    key: 'version',\n                    text: `Version ${version}`,\n                    iconProps: { iconName: 'VerifiedBrand' },\n                    onClick: this.openGithubNNI\n                }\n            ]\n        };\n        return (\n            <Stack horizontal className='nav'>\n                <React.Fragment>\n                    <StackItem grow={30} styles={{ root: { minWidth: 300, display: 'flex', verticalAlign: 'center' } }}>\n                        <span className='desktop-logo'>{NNILOGO}</span>\n                        <span className='left-right-margin'>{OVERVIEWTABS}</span>\n                        <span>{DETAILTABS}</span>\n                    </StackItem>\n                    <StackItem grow={70} className='navOptions'>\n                        <Stack horizontal horizontalAlign='end' tokens={gap15} styles={stackStyle}>\n                            {/* refresh button danyi*/}\n                            {/* TODO: fix bug */}\n                            {/* <CommandBarButton\n                                        iconProps={{ iconName: 'sync' }}\n                                        text=\"Refresh\"\n                                        onClick={this.props.refreshFunction}\n                                    /> */}\n                            <div className='nav-refresh'>\n                                <CommandBarButton\n                                    iconProps={refreshFrequency === '' ? disableUpdates : timeIcon}\n                                    text={refreshText}\n                                    menuProps={this.refreshProps}\n                                />\n                                <div className='nav-refresh-num'>{refreshFrequency}</div>\n                            </div>\n                            <CommandBarButton\n                                iconProps={{ iconName: 'ShowResults' }}\n                                text='Experiment summary'\n                                onClick={this.showExpcontent}\n                            />\n                            <CommandBarButton iconProps={infoIconAbout} text='About' menuProps={aboutProps} />\n                            <Link to='/experiment' className='experiment'>\n                                <div className='expNavTitle'>\n                                    <span>All experiments</span>\n                                    {ChevronRightMed}\n                                </div>\n                            </Link>\n                        </Stack>\n                    </StackItem>\n                    {isvisibleExperimentDrawer && (\n                        <ExperimentSummaryPanel\n                            closeExpDrawer={this.closeExpDrawer}\n                            experimentProfile={EXPERIMENT.profile}\n                        />\n                    )}\n                </React.Fragment>\n            </Stack>\n        );\n    }\n\n    private refreshProps: IContextualMenuProps = {\n        items: [\n            {\n                key: 'disableRefresh',\n                text: 'Disable auto refresh',\n                iconProps: closeTimer,\n                onClick: this.getInterval.bind(this, 0)\n            },\n            {\n                key: 'refresh10',\n                text: 'Refresh every 10s',\n                iconProps: requency,\n                onClick: this.getInterval.bind(this, 10)\n            },\n            {\n                key: 'refresh20',\n                text: 'Refresh every 20s',\n                iconProps: requency,\n                onClick: this.getInterval.bind(this, 20)\n            },\n            {\n                key: 'refresh30',\n                text: 'Refresh every 30s',\n                iconProps: requency,\n                onClick: this.getInterval.bind(this, 30)\n            },\n\n            {\n                key: 'refresh60',\n                text: 'Refresh every 1min',\n                iconProps: requency,\n                onClick: this.getInterval.bind(this, 60)\n            }\n        ]\n    };\n}\n\nexport default NavCon;\n","import * as React from 'react';\nimport { Stack } from '@fluentui/react';\nimport { SlideNavBtns } from '@components/nav/slideNav/SlideNavBtns';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport NavCon from '@components/nav/Nav';\nimport MessageInfo from '@components/common/MessageInfo';\nimport { COLUMN } from '@static/const';\nimport { isManagerExperimentPage } from '@static/function';\n\nimport '@style/App.scss';\nimport '@style/common/common.scss';\nimport '@style/experiment/trialdetail/trialsDetail.scss';\n\nconst echarts = require('echarts/lib/echarts');\necharts.registerTheme('nni_theme', {\n    color: '#3c8dbc'\n});\n\ninterface AppState {\n    interval: number;\n    columnList: string[];\n    experimentUpdateBroadcast: number;\n    trialsUpdateBroadcast: number;\n    maxDurationUnit: string;\n    metricGraphMode: 'max' | 'min'; // tuner's optimize_mode filed\n    isillegalFinal: boolean;\n    expWarningMessage: string;\n    bestTrialEntries: string; // for overview page: best trial entreis\n    isUpdate: boolean;\n    expandRowIDs: Set<string>;\n}\n\nexport const AppContext = React.createContext({\n    interval: 10, // sendons\n    columnList: COLUMN,\n    experimentUpdateBroadcast: 0,\n    trialsUpdateBroadcast: 0,\n    metricGraphMode: 'max',\n    bestTrialEntries: '10',\n    maxDurationUnit: 'm',\n    expandRowIDs: new Set(['']),\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    changeColumn: (_val: string[]): void => {},\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    changeMetricGraphMode: (_val: 'max' | 'min'): void => {},\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    changeMaxDurationUnit: (_val: string): void => {},\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    changeEntries: (_val: string): void => {},\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    updateOverviewPage: () => {},\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    updateDetailPage: () => {},\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    changeExpandRowIDs: (_val: string, _type?: string): void => {}\n});\n\nclass App extends React.Component<{}, AppState> {\n    private timerId!: number | undefined;\n    private firstLoad: boolean = false; // when click refresh selector options\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            interval: 10, // sendons\n            columnList: COLUMN,\n            experimentUpdateBroadcast: 0,\n            trialsUpdateBroadcast: 0,\n            metricGraphMode: 'max',\n            maxDurationUnit: 'm',\n            isillegalFinal: false,\n            expWarningMessage: '',\n            bestTrialEntries: '10',\n            isUpdate: true,\n            expandRowIDs: new Set()\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        await Promise.all([EXPERIMENT.init(), TRIALS.init()]);\n        this.setState(state => ({\n            experimentUpdateBroadcast: state.experimentUpdateBroadcast + 1,\n            trialsUpdateBroadcast: state.trialsUpdateBroadcast + 1,\n            metricGraphMode: EXPERIMENT.optimizeMode === 'minimize' ? 'min' : 'max'\n        }));\n        this.timerId = window.setTimeout(this.refresh, this.state.interval * 100);\n    }\n\n    changeInterval = (interval: number): void => {\n        window.clearTimeout(this.timerId);\n        if (interval === 0) {\n            return;\n        }\n        // setState will trigger page refresh at once.\n        // setState is asyc, interval not update to (this.state.interval) at once.\n        this.setState({ interval }, () => {\n            this.firstLoad = true;\n            this.refresh();\n        });\n    };\n\n    // TODO: use local storage\n    changeColumn = (columnList: string[]): void => {\n        this.setState({ columnList: columnList });\n    };\n\n    changeExpandRowIDs = (id: string, type?: string): void => {\n        const currentExpandRowIDs = this.state.expandRowIDs;\n\n        if (!currentExpandRowIDs.has(id)) {\n            currentExpandRowIDs.add(id);\n        } else {\n            if (!(type !== undefined && type === 'chart')) {\n                currentExpandRowIDs.delete(id);\n            }\n        }\n\n        this.setState({ expandRowIDs: currentExpandRowIDs });\n    };\n\n    changeMetricGraphMode = (val: 'max' | 'min'): void => {\n        this.setState({ metricGraphMode: val });\n    };\n\n    // overview best trial module\n    changeEntries = (entries: string): void => {\n        this.setState({ bestTrialEntries: entries });\n    };\n\n    // overview max duration unit\n    changeMaxDurationUnit = (unit: string): void => {\n        this.setState({ maxDurationUnit: unit });\n    };\n\n    updateOverviewPage = (): void => {\n        this.setState(state => ({\n            experimentUpdateBroadcast: state.experimentUpdateBroadcast + 1\n        }));\n    };\n\n    updateDetailPage = (): void => {\n        this.setState(state => ({\n            trialsUpdateBroadcast: state.trialsUpdateBroadcast + 1\n        }));\n    };\n\n    shouldComponentUpdate(nextProps: any, nextState: AppState): boolean {\n        if (!(nextState.isUpdate || nextState.isUpdate === undefined)) {\n            nextState.isUpdate = true;\n            return false;\n        }\n        return true;\n    }\n\n    render(): React.ReactNode {\n        const {\n            interval,\n            columnList,\n            experimentUpdateBroadcast,\n            trialsUpdateBroadcast,\n            metricGraphMode,\n            isillegalFinal,\n            expWarningMessage,\n            bestTrialEntries,\n            maxDurationUnit,\n            expandRowIDs\n        } = this.state;\n        if (experimentUpdateBroadcast === 0 || trialsUpdateBroadcast === 0) {\n            return null; // TODO: render a loading page\n        }\n        const errorList = [\n            { errorWhere: TRIALS.jobListError(), errorMessage: TRIALS.getJobErrorMessage() },\n            { errorWhere: EXPERIMENT.experimentError(), errorMessage: EXPERIMENT.getExperimentMessage() },\n            { errorWhere: EXPERIMENT.statusError(), errorMessage: EXPERIMENT.getStatusMessage() },\n            { errorWhere: TRIALS.MetricDataError(), errorMessage: TRIALS.getMetricDataErrorMessage() },\n            { errorWhere: TRIALS.latestMetricDataError(), errorMessage: TRIALS.getLatestMetricDataErrorMessage() },\n            { errorWhere: TRIALS.metricDataRangeError(), errorMessage: TRIALS.metricDataRangeErrorMessage() }\n        ];\n\n        return (\n            <React.Fragment>\n                {isManagerExperimentPage() ? null : (\n                    <Stack className='nni' style={{ minHeight: window.innerHeight }}>\n                        <div className='header'>\n                            <div className='headerCon'>\n                                <NavCon changeInterval={this.changeInterval} refreshFunction={this.lastRefresh} />\n                            </div>\n                        </div>\n                        <Stack className='contentBox'>\n                            <Stack className='content'>\n                                {/* search space & config */}\n                                <SlideNavBtns />\n                                {/* if api has error field, show error message */}\n                                {errorList.map(\n                                    (item, key) =>\n                                        item.errorWhere && (\n                                            <div key={key} className='warning'>\n                                                <MessageInfo info={item.errorMessage} typeInfo='error' />\n                                            </div>\n                                        )\n                                )}\n                                {isillegalFinal && (\n                                    <div className='warning'>\n                                        <MessageInfo info={expWarningMessage} typeInfo='warning' />\n                                    </div>\n                                )}\n                                <AppContext.Provider\n                                    value={{\n                                        interval,\n                                        columnList,\n                                        changeColumn: this.changeColumn,\n                                        experimentUpdateBroadcast,\n                                        trialsUpdateBroadcast,\n                                        metricGraphMode,\n                                        maxDurationUnit,\n                                        changeMaxDurationUnit: this.changeMaxDurationUnit,\n                                        changeMetricGraphMode: this.changeMetricGraphMode,\n                                        bestTrialEntries,\n                                        changeEntries: this.changeEntries,\n                                        updateOverviewPage: this.updateOverviewPage,\n                                        updateDetailPage: this.updateDetailPage,\n                                        expandRowIDs,\n                                        changeExpandRowIDs: this.changeExpandRowIDs\n                                    }}\n                                >\n                                    {this.props.children}\n                                </AppContext.Provider>\n                            </Stack>\n                        </Stack>\n                    </Stack>\n                )}\n            </React.Fragment>\n        );\n    }\n\n    private refresh = async (): Promise<void> => {\n        // resolve this question: 10s -> 20s, page refresh twice.\n        // only refresh this page after clicking the refresh options\n        if (this.firstLoad !== true) {\n            const [experimentUpdated, trialsUpdated] = await Promise.all([EXPERIMENT.update(), TRIALS.update()]);\n            if (experimentUpdated) {\n                this.setState(state => ({ experimentUpdateBroadcast: state.experimentUpdateBroadcast + 1 }));\n            }\n            if (trialsUpdated) {\n                this.setState(state => ({ trialsUpdateBroadcast: state.trialsUpdateBroadcast + 1 }));\n            }\n        } else {\n            this.firstLoad = false;\n        }\n\n        // experiment status and /trial-jobs api's status could decide website update\n        if (['DONE', 'ERROR', 'STOPPED', 'VIEWED'].includes(EXPERIMENT.status) || TRIALS.jobListError()) {\n            // experiment finished, refresh once more to ensure consistency\n            this.setState(() => ({ interval: 0, isUpdate: false }));\n            return;\n        }\n\n        this.timerId = window.setTimeout(this.refresh, this.state.interval * 1000);\n    };\n\n    public async lastRefresh(): Promise<void> {\n        await EXPERIMENT.update();\n        await TRIALS.update(true);\n        this.setState(state => ({\n            experimentUpdateBroadcast: state.experimentUpdateBroadcast + 1,\n            trialsUpdateBroadcast: state.trialsUpdateBroadcast + 1\n        }));\n    }\n}\n\nexport default App;\n","import * as React from 'react';\nimport { MessageBar, MessageBarType } from '@fluentui/react';\n\ninterface MessageInfoProps {\n    info: string;\n    typeInfo: string;\n    className?: string;\n}\n\nclass MessageInfo extends React.Component<MessageInfoProps, {}> {\n    constructor(props: MessageInfoProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { info, typeInfo, className } = this.props;\n        return (\n            <MessageBar messageBarType={MessageBarType[typeInfo]} isMultiline={true} className={className}>\n                {info}\n            </MessageBar>\n        );\n    }\n}\n\nexport default MessageInfo;\n","import { IStackTokens, IStackStyles } from '@fluentui/react';\n\n// name: gap + specific gap number\n\nconst gap10: IStackTokens = {\n    childrenGap: 10\n};\n\nconst gap15: IStackTokens = {\n    childrenGap: 15\n};\n\nconst stackStyle: IStackStyles = {\n    root: {\n        minWidth: 400,\n        height: 56,\n        display: 'flex',\n        verticalAlign: 'center'\n    }\n};\n\nexport { gap10, gap15, stackStyle };\n","import * as React from 'react';\nimport { Icon, initializeIcons } from '@fluentui/react';\ninitializeIcons();\n\nconst infoIcon = <Icon iconName='info' />;\nconst warining = <Icon iconName='Warning' />;\nconst errorBadge = <Icon iconName='ErrorBadge' />;\nconst completed = <Icon iconName='Completed' />;\nconst blocked = <Icon iconName='StatusCircleBlock' />;\nconst copy = <Icon iconName='Copy' />;\nconst tableListIcon = <Icon iconName='BulletedList' />;\nconst downLoadIcon = { iconName: 'Download' };\nconst infoIconAbout = { iconName: 'info' };\nconst timeIcon = { iconName: 'ReminderTime' };\nconst disableUpdates = { iconName: 'DisableUpdates' };\nconst requency = { iconName: 'Timer' };\nconst closeTimer = { iconName: 'Blocked2' };\nconst LineChart = <Icon iconName='LineChart' />;\nconst Edit = <Icon iconName='Edit' />;\nconst CheckMark = <Icon iconName='CheckMark' />;\nconst Cancel = <Icon iconName='Cancel' />;\nconst ReplyAll = { iconName: 'ReplyAll' };\nconst RevToggleKey = { iconName: 'RevToggleKey' };\nconst ChevronRightMed = <Icon iconName='ChevronRightMed' />;\n\nexport {\n    infoIcon,\n    warining,\n    errorBadge,\n    completed,\n    blocked,\n    infoIconAbout,\n    copy,\n    tableListIcon,\n    downLoadIcon,\n    timeIcon,\n    disableUpdates,\n    requency,\n    closeTimer,\n    LineChart,\n    Edit,\n    CheckMark,\n    Cancel,\n    ReplyAll,\n    RevToggleKey,\n    ChevronRightMed\n};\n","import * as React from 'react';\nimport { Spinner } from '@fluentui/react';\nimport MonacoEditor from 'react-monaco-editor';\n\ninterface MonacoEditorProps {\n    content: string;\n    loading: boolean;\n    height: number;\n}\n\nclass MonacoHTML extends React.Component<MonacoEditorProps, {}> {\n    constructor(props: MonacoEditorProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { content, loading, height } = this.props;\n        return (\n            <React.Fragment>\n                {loading ? (\n                    <Spinner\n                        label='Wait, wait...'\n                        ariaLive='assertive'\n                        labelPosition='right'\n                        styles={{ root: { width: '100%', height: height } }}\n                    >\n                        <MonacoEditor\n                            width='100%'\n                            height={height}\n                            language='json'\n                            value={content}\n                            options={{\n                                minimap: { enabled: false },\n                                readOnly: true,\n                                automaticLayout: true,\n                                wordWrap: 'on'\n                            }}\n                        />\n                    </Spinner>\n                ) : (\n                    <MonacoEditor\n                        width='100%'\n                        height={height}\n                        language='json'\n                        value={content}\n                        options={{\n                            minimap: { enabled: false },\n                            readOnly: true,\n                            automaticLayout: true,\n                            wordWrap: 'on'\n                        }}\n                    />\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default MonacoHTML;\n","import * as React from 'react';\nimport axios from 'axios';\nimport { Stack, StackItem, Panel, PrimaryButton, DefaultButton, Pivot, PivotItem } from '@fluentui/react';\nimport { DOWNLOAD_IP } from '@static/const';\nimport { downFile } from '@static/function';\nimport { infoIcon } from '@components/fluent/Icon';\nimport MonacoHTML from '@components/common/MonacoEditor';\nimport '@style/logPanel.scss';\n\ninterface LogPanelProps {\n    closePanel: () => void;\n    activeTab?: string;\n}\n\ninterface LogPanelState {\n    nniManagerLogStr: string | null;\n    dispatcherLogStr: string | null;\n    isLoading: boolean;\n    logPanelHeight: number;\n}\n\nclass LogPanel extends React.Component<LogPanelProps, LogPanelState> {\n    private timerId: number | undefined;\n\n    constructor(props: LogPanelProps) {\n        super(props);\n\n        this.state = {\n            nniManagerLogStr: null,\n            dispatcherLogStr: null,\n            isLoading: true,\n            logPanelHeight: window.innerHeight\n        };\n    }\n\n    downloadNNImanager = (): void => {\n        if (this.state.nniManagerLogStr !== null) {\n            downFile(this.state.nniManagerLogStr, 'nnimanager.log');\n        }\n    };\n\n    downloadDispatcher = (): void => {\n        if (this.state.dispatcherLogStr !== null) {\n            downFile(this.state.dispatcherLogStr, 'dispatcher.log');\n        }\n    };\n\n    dispatcherHTML = (): React.ReactNode => (\n        <div>\n            <span>Dispatcher log</span>\n            <span className='refresh' onClick={this.manualRefresh}>\n                {infoIcon}\n            </span>\n        </div>\n    );\n\n    nnimanagerHTML = (): React.ReactNode => (\n        <div>\n            <span>NNImanager log</span>\n            <span className='refresh' onClick={this.manualRefresh}>\n                {infoIcon}\n            </span>\n        </div>\n    );\n\n    setLogPanelHeight = (): void => {\n        this.setState(() => ({ logPanelHeight: window.innerHeight }));\n    };\n\n    async componentDidMount(): Promise<void> {\n        this.refresh();\n        window.addEventListener('resize', this.setLogPanelHeight);\n    }\n\n    componentWillUnmount(): void {\n        window.clearTimeout(this.timerId);\n        window.removeEventListener('resize', this.setLogPanelHeight);\n    }\n\n    render(): React.ReactNode {\n        const { closePanel, activeTab } = this.props;\n        const { nniManagerLogStr, dispatcherLogStr, isLoading, logPanelHeight } = this.state;\n        // tab[height: 56] + tab[margin-bottom: 20] + button[32] + button[margin-top: 45, -bottom: 7] + fluent-panel own paddingBottom[20] + title-border[2]\n        const monacoHeight = logPanelHeight - 182;\n        return (\n            <Stack>\n                <Panel\n                    isOpen={true}\n                    hasCloseButton={false}\n                    isFooterAtBottom={true}\n                    isLightDismiss={true}\n                    onLightDismissClick={closePanel}\n                    className='logPanel'\n                >\n                    <Pivot selectedKey={activeTab} style={{ minHeight: 190 }}>\n                        <PivotItem headerText='Dispatcher log' key='dispatcher'>\n                            <div className='panel logMargin'>\n                                <MonacoHTML\n                                    content={dispatcherLogStr || 'Loading...'}\n                                    loading={isLoading}\n                                    height={monacoHeight}\n                                />\n                                <Stack horizontal className='buttons'>\n                                    <StackItem grow={12} className='download'>\n                                        <PrimaryButton text='Download' onClick={this.downloadDispatcher} />\n                                    </StackItem>\n                                    <StackItem grow={12} className='close'>\n                                        <DefaultButton text='Close' onClick={closePanel} />\n                                    </StackItem>\n                                </Stack>\n                            </div>\n                        </PivotItem>\n                        <PivotItem headerText='NNIManager log' key='nnimanager'>\n                            <div className='panel logMargin'>\n                                <MonacoHTML\n                                    content={nniManagerLogStr || 'Loading...'}\n                                    loading={isLoading}\n                                    height={monacoHeight}\n                                />\n                                <Stack horizontal className='buttons'>\n                                    <StackItem grow={12} className='download'>\n                                        <PrimaryButton text='Download' onClick={this.downloadNNImanager} />\n                                    </StackItem>\n                                    <StackItem grow={12} className='close'>\n                                        <DefaultButton text='Close' onClick={closePanel} />\n                                    </StackItem>\n                                </Stack>\n                            </div>\n                        </PivotItem>\n                    </Pivot>\n                </Panel>\n            </Stack>\n        );\n    }\n\n    private refresh = (): void => {\n        window.clearTimeout(this.timerId);\n        const dispatcherPromise = axios.get(`${DOWNLOAD_IP}/dispatcher.log`);\n        const nniManagerPromise = axios.get(`${DOWNLOAD_IP}/nnimanager.log`);\n        dispatcherPromise.then(res => {\n            if (res.status === 200) {\n                this.setState({ dispatcherLogStr: res.data });\n            }\n        });\n        nniManagerPromise.then(res => {\n            if (res.status === 200) {\n                this.setState({ nniManagerLogStr: res.data });\n            }\n        });\n        Promise.all([dispatcherPromise, nniManagerPromise]).then(() => {\n            this.setState({ isLoading: false });\n            this.timerId = window.setTimeout(this.refresh, 10000);\n        });\n    };\n\n    private manualRefresh = (): void => {\n        this.setState({ isLoading: true });\n        this.refresh();\n    };\n}\n\nexport default LogPanel;\n","import * as React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { getPrefix } from '@static/function';\n\nconst OVERVIEWTABS = (\n    <NavLink to='/oview' activeClassName='selected' className='common-tabs'>\n        Overview\n    </NavLink>\n);\n\nconst DETAILTABS = (\n    <NavLink to='/detail' activeClassName='selected' className='common-tabs'>\n        Trials detail\n    </NavLink>\n);\n\nconst NNILOGO = (\n    <NavLink to='/oview'>\n        <img src={(getPrefix() || '') + '/logo.png'} alt='NNI logo' style={{ height: 40 }} />\n    </NavLink>\n);\n\nexport { OVERVIEWTABS, DETAILTABS, NNILOGO };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log( // eslint-disable-line no-console\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.'); // eslint-disable-line no-console\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error); // eslint-disable-line no-console\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log( // eslint-disable-line no-console\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log( // eslint-disable-line no-console\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { lazy, Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { getPrefix } from './static/function';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nconst Overview = lazy(() => import('./components/experiment/overview/Overview'));\nconst TrialsDetail = lazy(() => import('./components/experiment/trialdetail/TrialsDetail'));\nconst ExperimentManagerIndex = lazy(() => import('./components/experimentManagement/ExperimentManagerIndex'));\nimport '@style/index.css';\nimport '@style/loading.scss';\nimport * as serviceWorker from './serviceWorker';\n\nconst path = getPrefix();\n\nReactDOM.render(\n    <Router basename={path === undefined ? null : path}>\n        <Suspense\n            fallback={\n                <div className='loading'>\n                    <img src={(path || '') + '/loading.gif'} />\n                </div>\n            }\n        >\n            <Route path='/experiment' component={ExperimentManagerIndex} exact />\n            <Switch>\n                <App>\n                    <Route path='/' component={Overview} exact />\n                    <Route path='/oview' component={Overview} />\n                    <Route path='/detail' component={TrialsDetail} />\n                </App>\n            </Switch>\n        </Suspense>\n    </Router>,\n\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { getPrefix } from './function';\n\n// when there are more trials than this threshold, metrics will be updated in group of this size to avoid freezing\nconst METRIC_GROUP_UPDATE_THRESHOLD = 100;\nconst METRIC_GROUP_UPDATE_SIZE = 20;\n\n/**\n *  RESTAPI and DOWNLOAD_IP must be synchronized with:\n *    - nni/experiment/rest.py\n *    - ts/nni_manager/rest_server/index.ts\n *  Remember to update them if the values are changed or if this file is moved.\n **/\n\nconst prefix = getPrefix();\nconst RESTAPI = '/api/v1/nni';\nconst MANAGER_IP = prefix === undefined ? RESTAPI : `${prefix}${RESTAPI}`;\nconst DOWNLOAD_IP = `/logs`;\n\nconst WEBUIDOC = 'https://nni.readthedocs.io/en/latest/experiment/webui.html';\n\nconst trialJobStatus = [\n    'UNKNOWN',\n    'WAITING',\n    'RUNNING',\n    'SUCCEEDED',\n    'FAILED',\n    'USER_CANCELED',\n    'SYS_CANCELED',\n    'EARLY_STOPPED'\n];\nconst EXPERIMENTSTATUS = [\n    'INITIALIZED',\n    'RUNNING',\n    'ERROR',\n    'STOPPING',\n    'STOPPED',\n    'VIEWED',\n    'DONE',\n    'NO_MORE_TRIAL',\n    'TUNER_NO_MORE_TRIAL'\n];\nconst CONTROLTYPE = ['MAX_EXEC_DURATION', 'MAX_TRIAL_NUM', 'TRIAL_CONCURRENCY', 'SEARCH_SPACE'];\nconst MONACO = {\n    readOnly: true,\n    automaticLayout: true,\n    scrollBeyondLastLine: false\n};\nconst DRAWEROPTION = {\n    minimap: { enabled: false },\n    readOnly: true,\n    automaticLayout: true\n};\nconst OPERATION = 'Operation';\n// defatult selected column\nconst COLUMN = ['Trial No.', 'ID', 'Duration', 'Status', 'Default', OPERATION];\nconst CONCURRENCYTOOLTIP = 'Trial concurrency is the number of trials running concurrently.';\nconst SUPPORTED_SEARCH_SPACE_TYPE = [\n    'choice',\n    'layer_choice',\n    'input_choice',\n    'randint',\n    'uniform',\n    'quniform',\n    'loguniform',\n    'qloguniform',\n    'normal',\n    'qnormal',\n    'lognormal',\n    'qlognormal'\n];\n\nconst TOOLTIP_BACKGROUND_COLOR = '#484848';\nconst MAX_TRIAL_NUMBERS = 'Max trial No.';\nconst RETIARIIPARAMETERS = 'mutation_summary';\n\nexport {\n    MANAGER_IP,\n    DOWNLOAD_IP,\n    trialJobStatus,\n    EXPERIMENTSTATUS,\n    WEBUIDOC,\n    CONTROLTYPE,\n    MONACO,\n    COLUMN,\n    DRAWEROPTION,\n    OPERATION,\n    METRIC_GROUP_UPDATE_THRESHOLD,\n    METRIC_GROUP_UPDATE_SIZE,\n    CONCURRENCYTOOLTIP,\n    SUPPORTED_SEARCH_SPACE_TYPE,\n    TOOLTIP_BACKGROUND_COLOR,\n    MAX_TRIAL_NUMBERS,\n    RETIARIIPARAMETERS\n};\n","import { SingleAxis, MultipleAxes, TableObj } from '../interface';\nimport { SUPPORTED_SEARCH_SPACE_TYPE } from '../const';\nimport { formatComplexTypeValue } from '../function';\n\nfunction fullNameJoin(prefix: string, name: string): string {\n    return prefix ? prefix + '/' + name : name;\n}\n\nclass NumericAxis implements SingleAxis {\n    min: number = 0;\n    max: number = 0;\n    type: string;\n    baseName: string;\n    fullName: string;\n    scale: 'log' | 'linear';\n    nested = false;\n\n    constructor(baseName: string, fullName: string, type: string, value: any) {\n        this.baseName = baseName;\n        this.fullName = fullName;\n        this.type = type;\n        this.scale = type.includes('log') ? 'log' : 'linear';\n        if (type === 'randint') {\n            this.min = value[0];\n            this.max = value[1] - 1;\n        } else if (type.includes('uniform')) {\n            this.min = value[0];\n            this.max = value[1];\n        } else if (type.includes('normal')) {\n            const [mu, sigma] = [value[0], value[1]];\n            this.min = mu - 4 * sigma;\n            this.max = mu + 4 * sigma;\n            if (this.scale === 'log') {\n                this.min = Math.exp(this.min);\n                this.max = Math.exp(this.max);\n            }\n        }\n    }\n\n    get domain(): [number, number] {\n        return [this.min, this.max];\n    }\n}\n\nclass SimpleOrdinalAxis implements SingleAxis {\n    type: string;\n    baseName: string;\n    fullName: string;\n    scale: 'ordinal' = 'ordinal';\n    domain: any[];\n    nested = false;\n    constructor(baseName: string, fullName: string, type: string, value: any) {\n        this.baseName = baseName;\n        this.fullName = fullName;\n        this.type = type;\n        this.domain = Array.from(value).map(formatComplexTypeValue);\n    }\n}\n\nclass NestedOrdinalAxis implements SingleAxis {\n    type: string;\n    baseName: string;\n    fullName: string;\n    scale: 'ordinal' = 'ordinal';\n    domain = new Map<string, MultipleAxes>();\n    nested = true;\n    constructor(baseName: any, fullName: string, type: any, value: any) {\n        this.baseName = baseName;\n        this.fullName = fullName;\n        this.type = type;\n        for (const v of value) {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            this.domain.set(v._name, new SearchSpace(v._name, fullNameJoin(fullName, v._name), v));\n        }\n    }\n}\n\nexport class SearchSpace implements MultipleAxes {\n    axes = new Map<string, SingleAxis>();\n    baseName: string;\n    fullName: string;\n\n    constructor(baseName: string, fullName: string, searchSpaceSpec: any) {\n        this.baseName = baseName;\n        this.fullName = fullName;\n        if (searchSpaceSpec === undefined) {\n            return;\n        }\n        Object.entries(searchSpaceSpec).forEach(item => {\n            const key = item[0],\n                spec = item[1] as any;\n            if (key === '_name') {\n                return;\n            } else if (['choice', 'layer_choice', 'input_choice'].includes(spec._type)) {\n                // ordinal types\n                if (spec._value && typeof spec._value[0] === 'object') {\n                    // nested dimension\n                    this.axes.set(\n                        key,\n                        new NestedOrdinalAxis(key, fullNameJoin(fullName, key), spec._type, spec._value)\n                    );\n                } else {\n                    this.axes.set(\n                        key,\n                        new SimpleOrdinalAxis(key, fullNameJoin(fullName, key), spec._type, spec._value)\n                    );\n                }\n            } else if (SUPPORTED_SEARCH_SPACE_TYPE.includes(spec._type)) {\n                this.axes.set(key, new NumericAxis(key, fullName + key, spec._type, spec._value));\n            }\n        });\n    }\n\n    static inferFromTrials(searchSpace: SearchSpace, trials: TableObj[]): SearchSpace {\n        const newSearchSpace = new SearchSpace(searchSpace.baseName, searchSpace.fullName, undefined);\n        for (const [k, v] of searchSpace.axes) {\n            newSearchSpace.axes.set(k, v);\n        }\n        // Add axis inferred from trials columns\n        const addingColumns = new Map<string, any[]>();\n        for (const trial of trials) {\n            try {\n                trial.parameters(searchSpace);\n            } catch (unexpectedEntries) {\n                // eslint-disable-next-line no-console\n                console.warn(unexpectedEntries);\n                for (const [k, v] of unexpectedEntries as Map<string, any>) {\n                    const column = addingColumns.get(k);\n                    if (column === undefined) {\n                        addingColumns.set(k, [v]);\n                    } else {\n                        column.push(v);\n                    }\n                }\n            }\n        }\n        addingColumns.forEach((value, key) => {\n            if (value.every(v => typeof v === 'number')) {\n                newSearchSpace.axes.set(\n                    key,\n                    new NumericAxis(key, key, 'uniform', [Math.min(...value), Math.max(...value)])\n                );\n            } else {\n                newSearchSpace.axes.set(key, new SimpleOrdinalAxis(key, key, 'choice', new Set(value).values()));\n            }\n        });\n        return newSearchSpace;\n    }\n}\n\nexport class MetricSpace implements MultipleAxes {\n    axes = new Map<string, SingleAxis>();\n    baseName = '';\n    fullName = '';\n\n    constructor(trials: TableObj[]) {\n        const columns = new Map<string, any[]>();\n        for (const trial of trials) {\n            if (trial.acc === undefined) {\n                continue;\n            }\n            // TODO: handle more than number and object\n            const acc = typeof trial.acc === 'number' ? { default: trial.acc } : trial.acc;\n            Object.entries(acc).forEach(item => {\n                const [k, v] = item;\n                const column = columns.get(k);\n                if (column === undefined) {\n                    columns.set(k, [v]);\n                } else {\n                    column.push(v);\n                }\n            });\n        }\n        columns.forEach((value, key) => {\n            if (value.every(v => typeof v === 'number')) {\n                this.axes.set(key, new NumericAxis(key, key, 'uniform', [Math.min(...value), Math.max(...value)]));\n            } else {\n                this.axes.set(key, new SimpleOrdinalAxis(key, key, 'choice', value));\n            }\n        });\n    }\n}\n","import { MANAGER_IP } from '../const';\nimport { ExperimentConfig, toSeconds } from '../experimentConfig';\nimport { ExperimentProfile, ExperimentMetadata, NNIManagerStatus } from '../interface';\nimport { requestAxios } from '../function';\nimport { SearchSpace } from './searchspace';\n\nfunction compareProfiles(profile1?: ExperimentProfile, profile2?: ExperimentProfile): boolean {\n    if (!profile1 || !profile2) {\n        return false;\n    }\n    const copy1 = Object.assign({}, profile1, { execDuration: undefined });\n    const copy2 = Object.assign({}, profile2, { execDuration: undefined });\n    return JSON.stringify(copy1) === JSON.stringify(copy2);\n}\n\nconst emptyProfile: ExperimentProfile = {\n    params: {\n        searchSpace: undefined,\n        trialCommand: '',\n        trialCodeDirectory: '',\n        trialConcurrency: 0,\n        debug: false,\n        trainingService: {\n            platform: ''\n        }\n    },\n    id: '',\n    execDuration: 0,\n    logDir: '',\n    startTime: 0,\n    maxSequenceId: 0,\n    revision: 0\n};\n\nconst emptyMetadata: ExperimentMetadata = {\n    id: '',\n    port: 0,\n    startTime: '',\n    endTime: '',\n    status: '',\n    platform: '',\n    experimentName: '',\n    tag: [],\n    pid: 0,\n    webuiUrl: [],\n    logDir: '',\n    prefixUrl: null\n};\n\nclass Experiment {\n    private profileField?: ExperimentProfile;\n    private metadataField?: ExperimentMetadata = undefined;\n    private statusField?: NNIManagerStatus = undefined;\n    private isNestedExperiment: boolean = false;\n    private isexperimentError: boolean = false;\n    private experimentErrorMessage: string = '';\n    private isStatusError: boolean = false;\n    private statusErrorMessage: string = '';\n\n    public async init(): Promise<void> {\n        while (!this.profileField || !this.statusField) {\n            if (this.isexperimentError) {\n                return;\n            }\n            if (this.isStatusError) {\n                return;\n            }\n            await this.update();\n        }\n    }\n\n    public isNestedExp(): boolean {\n        try {\n            return !!Object.values(this.config.searchSpace).find(\n                item => (item as any)._value && typeof (item as any)._value[0] == 'object'\n            );\n        } catch {\n            return false;\n        }\n    }\n\n    public experimentError(): boolean {\n        return this.isexperimentError;\n    }\n\n    public statusError(): boolean {\n        return this.isStatusError;\n    }\n\n    public getExperimentMessage(): string {\n        return this.experimentErrorMessage;\n    }\n\n    public getStatusMessage(): string {\n        return this.statusErrorMessage;\n    }\n\n    public async update(): Promise<boolean> {\n        let updated = false;\n\n        await Promise.all([requestAxios(`${MANAGER_IP}/experiment`), requestAxios(`${MANAGER_IP}/experiment-metadata`)])\n            .then(([profile, metadata]) => {\n                updated ||= !compareProfiles(this.profileField, profile);\n                this.profileField = profile;\n\n                if (JSON.stringify(this.metadataField) !== JSON.stringify(metadata)) {\n                    this.metadataField = metadata;\n                }\n            })\n            .catch(error => {\n                this.isexperimentError = true;\n                this.experimentErrorMessage = `${error.message}`;\n                updated = true;\n            });\n\n        await requestAxios(`${MANAGER_IP}/check-status`)\n            .then(data => {\n                updated = JSON.stringify(this.statusField) !== JSON.stringify(data);\n                this.statusField = data;\n            })\n            .catch(error => {\n                this.isStatusError = true;\n                this.statusErrorMessage = `${error.message}`;\n                updated = true;\n            });\n\n        return updated;\n    }\n\n    get profile(): ExperimentProfile {\n        return this.profileField === undefined ? emptyProfile : this.profileField;\n    }\n\n    get metadata(): ExperimentMetadata {\n        return this.metadataField === undefined ? emptyMetadata : this.metadataField;\n    }\n\n    get config(): ExperimentConfig {\n        return this.profile.params;\n    }\n\n    get maxExperimentDurationSeconds(): number {\n        const value = this.config.maxExperimentDuration || (this.config as any).maxExecDuration;\n        return value === undefined ? Infinity : toSeconds(value);\n    }\n\n    get maxTrialNumber(): number {\n        const value = this.config.maxTrialNumber || (this.config as any).maxTrialNum;\n        return value === undefined ? Infinity : value;\n    }\n\n    get trialConcurrency(): number {\n        return this.config.trialConcurrency;\n    }\n\n    get optimizeMode(): string {\n        for (const algo of [this.config.tuner, this.config.advisor, this.config.assessor]) {\n            if (algo && algo.classArgs && algo.classArgs['optimize_mode']) {\n                return algo.classArgs['optimize_mode'];\n            }\n        }\n        return 'unknown';\n    }\n\n    get trainingServicePlatform(): string {\n        if (Array.isArray(this.config.trainingService)) {\n            return 'hybrid';\n        } else if (this.config.trainingService) {\n            return this.config.trainingService.platform;\n        } else {\n            return (this.config as any).trainingServicePlatform;\n        }\n    }\n\n    get searchSpace(): object {\n        return this.config.searchSpace;\n    }\n\n    get searchSpaceNew(): SearchSpace {\n        // The search space derived directly from profile\n        // eventually this will replace searchSpace\n        return new SearchSpace('', '', this.searchSpace);\n    }\n\n    get logCollectionEnabled(): boolean {\n        return false;\n    }\n\n    get status(): string {\n        if (!this.statusField) {\n            // throw Error('Experiment status not initialized');\n            // this.statusField.status = '';\n            return '';\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.statusField!.status;\n    }\n\n    get error(): string {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        if (!this.statusField) {\n            throw Error('Experiment status not initialized');\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.statusField!.errors[0] || '';\n    }\n}\n\nexport { Experiment };\n","import * as JSON5 from 'json5';\nimport {\n    MetricDataRecord,\n    TrialJobInfo,\n    TableObj,\n    TableRecord,\n    Parameters,\n    FinalType,\n    MultipleAxes,\n    SingleAxis\n} from '../interface';\nimport {\n    getFinal,\n    formatAccuracy,\n    metricAccuracy,\n    parseMetrics,\n    isArrayType,\n    isNaNorInfinity,\n    formatComplexTypeValue,\n    reformatRetiariiParameter\n} from '../function';\n\n/**\n * Get a structured representation of parameters\n * @param paramObj Parameters object\n * @param space All axes from search space (or sub search space)\n * @param prefix Current namespace (to make full name for unexpected entries)\n * @returns Parsed structured parameters and unexpected entries\n */\nfunction inferTrialParameters(\n    paramObj: object,\n    space: MultipleAxes,\n    prefix: string = ''\n): [Map<SingleAxis, any>, Map<string, any>] {\n    const latestedParamObj: object = reformatRetiariiParameter(paramObj);\n    const parameters = new Map<SingleAxis, any>();\n    const unexpectedEntries = new Map<string, any>();\n    for (const [k, v] of Object.entries(latestedParamObj)) {\n        // prefix can be a good fallback when corresponding item is not found in namespace\n        const axisKey = space.axes.get(k);\n        if (prefix && k === '_name') continue;\n        if (axisKey !== undefined) {\n            if (typeof v === 'object' && v._name !== undefined && axisKey.nested) {\n                // nested entry\n                parameters.set(axisKey, v._name);\n                const subSpace = axisKey.domain.get(v._name);\n                if (subSpace !== undefined) {\n                    const [subParams, subUnexpected] = inferTrialParameters(v, subSpace, prefix + k + '/');\n                    subParams.forEach((v, k) => parameters.set(k, v));\n                    subUnexpected.forEach((v, k) => unexpectedEntries.set(k, v));\n                }\n            } else {\n                parameters.set(axisKey, formatComplexTypeValue(v));\n            }\n        } else {\n            unexpectedEntries.set(prefix + k, formatComplexTypeValue(v));\n        }\n    }\n    return [parameters, unexpectedEntries];\n}\n\nclass Trial implements TableObj {\n    private metricsInitialized: boolean = false;\n    private infoField: TrialJobInfo | undefined;\n    public intermediates: (MetricDataRecord | undefined)[] = [];\n    public final: MetricDataRecord | undefined;\n    private finalAcc: number | undefined;\n\n    constructor(info?: TrialJobInfo, metrics?: MetricDataRecord[]) {\n        this.infoField = info;\n        if (metrics) {\n            this.updateMetrics(metrics);\n        }\n    }\n\n    public compareAccuracy(otherTrial: Trial): number | undefined {\n        if (!this.sortable || !otherTrial.sortable) {\n            return undefined;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.finalAcc! - otherTrial.finalAcc!;\n    }\n\n    get info(): TrialJobInfo {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.infoField!;\n    }\n\n    get intermediateMetrics(): MetricDataRecord[] {\n        const ret: MetricDataRecord[] = [];\n        for (let i = 0; i < this.intermediates.length; i++) {\n            if (this.intermediates[i]) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                ret.push(this.intermediates[i]!);\n            } else {\n                break;\n            }\n        }\n        return ret;\n    }\n\n    get accuracy(): number | undefined {\n        return this.finalAcc;\n    }\n\n    get sortable(): boolean {\n        return this.metricsInitialized && this.finalAcc !== undefined && isFinite(this.finalAcc);\n    }\n\n    get latestAccuracy(): number | undefined {\n        if (this.accuracy !== undefined) {\n            return this.accuracy;\n        } else if (this.intermediates.length > 0) {\n            const temp = this.intermediates[this.intermediates.length - 1];\n            if (temp !== undefined) {\n                if (isArrayType(parseMetrics(temp.data))) {\n                    return undefined;\n                } else if (\n                    typeof parseMetrics(temp.data) === 'object' &&\n                    // eslint-disable-next-line no-prototype-builtins\n                    parseMetrics(temp.data).hasOwnProperty('default')\n                ) {\n                    return parseMetrics(temp.data).default;\n                } else if (typeof parseMetrics(temp.data) === 'number') {\n                    return parseMetrics(temp.data);\n                }\n            } else {\n                return undefined;\n            }\n        } else {\n            return undefined;\n        }\n    }\n    /* table obj start */\n\n    get tableRecord(): TableRecord {\n        const endTime = this.info.endTime || new Date().getTime();\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const duration = (endTime - this.info.startTime!) / 1000;\n        let accuracy;\n        if (this.acc !== undefined && this.acc.default !== undefined) {\n            if (typeof this.acc.default === 'number') {\n                accuracy = JSON5.parse(this.acc.default);\n            } else {\n                accuracy = this.acc.default;\n            }\n        }\n\n        return {\n            key: this.info.trialJobId,\n            sequenceId: this.info.sequenceId,\n            id: this.info.trialJobId,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            startTime: this.info.startTime!,\n            endTime: this.info.endTime,\n            duration,\n            status: this.info.status,\n            message: this.info.message || '--',\n            intermediateCount: this.intermediates.length,\n            accuracy: accuracy,\n            latestAccuracy: this.latestAccuracy,\n            formattedLatestAccuracy: this.formatLatestAccuracy(),\n            accDictionary: this.acc\n        };\n    }\n\n    get key(): number {\n        return this.info.sequenceId;\n    }\n\n    get sequenceId(): number {\n        return this.info.sequenceId;\n    }\n\n    get id(): string {\n        return this.info.trialJobId;\n    }\n\n    get duration(): number {\n        const endTime = this.info.endTime || new Date().getTime();\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return (endTime - this.info.startTime!) / 1000;\n    }\n\n    get status(): string {\n        return this.info.status;\n    }\n\n    get acc(): FinalType | undefined {\n        if (this.info === undefined) {\n            return undefined;\n        }\n        return getFinal(this.info.finalMetricData);\n    }\n\n    get description(): Parameters {\n        const ret: Parameters = {\n            parameters: {},\n            intermediate: [],\n            multiProgress: 1\n        };\n        const tempHyper = this.info.hyperParameters;\n        if (tempHyper !== undefined) {\n            const getPara = JSON.parse(tempHyper[tempHyper.length - 1]).parameters;\n            ret.multiProgress = tempHyper.length;\n            if (typeof getPara === 'string') {\n                ret.parameters = JSON.parse(getPara);\n            } else {\n                ret.parameters = getPara;\n            }\n        } else {\n            ret.parameters = { error: \"This trial's parameters are not available.\" };\n        }\n        if (this.info.logPath !== undefined) {\n            ret.logPath = this.info.logPath;\n        }\n\n        const mediate: number[] = [];\n        for (const items of this.intermediateMetrics) {\n            if (typeof parseMetrics(items.data) === 'object') {\n                mediate.push(parseMetrics(items.data).default);\n            } else {\n                mediate.push(parseMetrics(items.data));\n            }\n        }\n        ret.intermediate = mediate;\n        return ret;\n    }\n\n    public parameters(axes: MultipleAxes): Map<SingleAxis, any> {\n        const ret = new Map<SingleAxis, any>(Array.from(axes.axes.values()).map(k => [k, null]));\n        if (this.info === undefined || this.info.hyperParameters === undefined) {\n            throw ret;\n        } else {\n            const tempHyper = this.info.hyperParameters;\n            let params = JSON.parse(tempHyper[tempHyper.length - 1]).parameters;\n            if (typeof params === 'string') {\n                params = JSON.parse(params);\n            }\n            const [updated, unexpectedEntries] = inferTrialParameters(params, axes);\n            if (unexpectedEntries.size) {\n                throw unexpectedEntries;\n            }\n            for (const [k, v] of updated) {\n                ret.set(k, v);\n            }\n            return ret;\n        }\n    }\n\n    public metrics(space: MultipleAxes): Map<SingleAxis, any> {\n        // set default value: null\n        const ret = new Map<SingleAxis, any>(Array.from(space.axes.values()).map(k => [k, null]));\n        const unexpectedEntries = new Map<string, any>();\n        if (this.acc === undefined) {\n            return ret;\n        }\n        const acc = typeof this.acc === 'number' ? { default: this.acc } : this.acc;\n        Object.entries(acc).forEach(item => {\n            const [k, v] = item;\n            const column = space.axes.get(k);\n\n            if (column !== undefined) {\n                ret.set(column, v);\n            } else {\n                unexpectedEntries.set(k, v);\n            }\n        });\n        if (unexpectedEntries.size) {\n            throw unexpectedEntries;\n        }\n        return ret;\n    }\n\n    get color(): string | undefined {\n        return undefined;\n    }\n\n    public finalKeys(): string[] {\n        if (this.acc !== undefined) {\n            return Object.keys(this.acc);\n        } else {\n            return [];\n        }\n    }\n\n    /* table obj end */\n\n    public initialized(): boolean {\n        return Boolean(this.infoField);\n    }\n\n    public updateMetrics(metrics: MetricDataRecord[]): boolean {\n        // parameter `metrics` must contain all known metrics of this trial\n        this.metricsInitialized = true;\n        const prevMetricCnt = this.intermediates.length + (this.final ? 1 : 0);\n        if (metrics.length <= prevMetricCnt) {\n            return false;\n        }\n        for (const metric of metrics) {\n            if (metric.type === 'PERIODICAL') {\n                this.intermediates[metric.sequence] = metric;\n            } else {\n                this.final = metric;\n                this.finalAcc = metricAccuracy(metric);\n            }\n        }\n        return true;\n    }\n\n    public updateLatestMetrics(metrics: MetricDataRecord[]): boolean {\n        // this method is effectively identical to `updateMetrics`, but has worse performance\n        this.metricsInitialized = true;\n        let updated = false;\n        for (const metric of metrics) {\n            if (metric.type === 'PERIODICAL') {\n                updated = updated || !this.intermediates[metric.sequence];\n                this.intermediates[metric.sequence] = metric;\n            } else {\n                updated = updated || !this.final;\n                this.final = metric;\n                this.finalAcc = metricAccuracy(metric);\n            }\n        }\n        return updated;\n    }\n\n    public updateTrialJobInfo(trialJobInfo: TrialJobInfo): boolean {\n        const same = this.infoField && this.infoField.status === trialJobInfo.status;\n        this.infoField = trialJobInfo;\n        if (trialJobInfo.finalMetricData) {\n            this.final = trialJobInfo.finalMetricData[trialJobInfo.finalMetricData.length - 1];\n            this.finalAcc = metricAccuracy(this.final);\n        }\n        return !same;\n    }\n\n    private renderNumber(val: any): string {\n        if (typeof val === 'number') {\n            if (isNaNorInfinity(val)) {\n                return `${val}`; // show 'NaN' or 'Infinity'\n            } else {\n                if (this.accuracy === undefined) {\n                    return `${formatAccuracy(val)} (LATEST)`;\n                } else {\n                    return `${formatAccuracy(val)} (FINAL)`;\n                }\n            }\n        } else {\n            // show other types, such as {tensor: {data: }}\n            return JSON.stringify(val);\n        }\n    }\n\n    public formatLatestAccuracy(): string {\n        // TODO: this should be private\n        if (this.status === 'SUCCEEDED') {\n            return this.accuracy === undefined ? '--' : this.renderNumber(this.accuracy);\n        } else {\n            if (this.accuracy !== undefined) {\n                return this.renderNumber(this.accuracy);\n            } else if (this.intermediates.length === 0) {\n                return '--';\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const latest = this.intermediates[this.intermediates.length - 1]!;\n                return this.renderNumber(metricAccuracy(latest));\n            }\n        }\n    }\n}\n\nexport { Trial };\n","import { Experiment } from './model/experiment';\nimport { TrialManager } from './model/trialmanager';\n\nconst EXPERIMENT = new Experiment();\nconst TRIALS = new TrialManager();\n\nexport { EXPERIMENT, TRIALS };\n","import { MANAGER_IP, METRIC_GROUP_UPDATE_THRESHOLD, METRIC_GROUP_UPDATE_SIZE } from '../const';\nimport { MetricDataRecord, TableRecord, TrialJobInfo, MultipleAxes } from '../interface';\nimport { Trial } from './trial';\nimport { SearchSpace, MetricSpace } from './searchspace';\nimport { requestAxios } from '../function';\n\nfunction groupMetricsByTrial(metrics: MetricDataRecord[]): Map<string, MetricDataRecord[]> {\n    const ret = new Map<string, MetricDataRecord[]>();\n    for (const metric of metrics) {\n        if (ret.has(metric.trialJobId)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            ret.get(metric.trialJobId)!.push(metric);\n        } else {\n            ret.set(metric.trialJobId, [metric]);\n        }\n    }\n    return ret;\n}\n\nclass TrialManager {\n    private trials: Map<string, Trial> = new Map<string, Trial>();\n    private infoInitialized: boolean = false;\n    private metricInitialized: boolean = false;\n    private maxSequenceId: number = 0;\n    private doingBatchUpdate: boolean = false;\n    private batchUpdatedAfterReading: boolean = false;\n    private isJobListError: boolean = false; // trial-jobs api error filed\n    private jobErrorMessage: string = ''; // trial-jobs error message\n    private isMetricdataError: boolean = false; // metric-data api error filed\n    private MetricdataErrorMessage: string = ''; // metric-data error message\n    private isLatestMetricdataError: boolean = false; // metric-data-latest api error filed\n    private latestMetricdataErrorMessage: string = ''; // metric-data-latest error message\n    private isMetricdataRangeError: boolean = false; // metric-data-range api error filed\n    private metricdataRangeErrorMessage: string = ''; // metric-data-latest error message\n    private metricsList: Array<MetricDataRecord> = [];\n    private trialJobList: Array<TrialJobInfo> = [];\n\n    public getMetricsList(): Array<MetricDataRecord> {\n        return this.metricsList;\n    }\n\n    public getTrialJobList(): Array<TrialJobInfo> {\n        return this.trialJobList;\n    }\n\n    public async init(): Promise<void> {\n        while (!this.infoInitialized || !this.metricInitialized) {\n            if (this.isMetricdataError) {\n                return;\n            }\n            await this.update();\n        }\n    }\n\n    public async update(lastTime?: boolean): Promise<boolean> {\n        const [infoUpdated, metricUpdated] = await Promise.all([this.updateInfo(), this.updateMetrics(lastTime)]);\n        return infoUpdated || metricUpdated;\n    }\n\n    public getTrial(trialId: string): Trial {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.trials.get(trialId)!;\n    }\n\n    public getTrials(trialIds: string[]): Trial[] {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return trialIds.map(trialId => this.trials.get(trialId)!);\n    }\n\n    public table(trialIds: string[]): TableRecord[] {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return trialIds.map(trialId => this.trials.get(trialId)!.tableRecord);\n    }\n\n    public toArray(): Trial[] {\n        const trials = Array.from(this.trials.values()).filter(trial => trial.initialized());\n        return trials.sort((trial1, trial2) => trial1.sequenceId - trial2.sequenceId);\n    }\n\n    public filter(callback: (trial: Trial) => boolean): Trial[] {\n        const trials = Array.from(this.trials.values()).filter(trial => trial.initialized() && callback(trial));\n        return trials.sort((trial1, trial2) => trial1.sequenceId - trial2.sequenceId);\n    }\n\n    public succeededTrials(): Trial[] {\n        return this.filter(trial => trial.status === 'SUCCEEDED');\n    }\n\n    public finalKeys(): string[] {\n        const succeedTrialsList = this.filter(trial => trial.status === 'SUCCEEDED');\n        if (succeedTrialsList !== undefined && succeedTrialsList[0] !== undefined) {\n            return succeedTrialsList[0].finalKeys();\n        } else {\n            return ['default'];\n        }\n    }\n\n    public sort(): Trial[] {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.filter(trial => trial.sortable).sort((trial1, trial2) => trial1.compareAccuracy(trial2)!);\n    }\n\n    public countStatus(): Map<string, number> {\n        const cnt = new Map<string, number>([\n            ['UNKNOWN', 0],\n            ['WAITING', 0],\n            ['RUNNING', 0],\n            ['SUCCEEDED', 0],\n            ['FAILED', 0],\n            ['USER_CANCELED', 0],\n            ['SYS_CANCELED', 0],\n            ['EARLY_STOPPED', 0]\n        ]);\n        for (const trial of this.trials.values()) {\n            if (trial.initialized()) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                cnt.set(trial.info.status, cnt.get(trial.info.status)! + 1);\n            }\n        }\n        return cnt;\n    }\n\n    public inferredSearchSpace(expSearchSpace: SearchSpace): MultipleAxes {\n        // The search space inferred from trial parameters\n        return SearchSpace.inferFromTrials(expSearchSpace, [...this.trials.values()]);\n    }\n\n    public inferredMetricSpace(): MultipleAxes {\n        return new MetricSpace([...this.trials.values()]);\n    }\n\n    // if this.jobListError = true, show trial error message [/trial-jobs]\n    public jobListError(): boolean {\n        return this.isJobListError;\n    }\n\n    // trial error message's content [/trial-jobs]\n    public getJobErrorMessage(): string {\n        return this.jobErrorMessage;\n    }\n\n    // [/metric-data]\n    public MetricDataError(): boolean {\n        return this.isMetricdataError;\n    }\n\n    // [/metric-data]\n    public getMetricDataErrorMessage(): string {\n        return this.MetricdataErrorMessage;\n    }\n\n    // [/metric-data-latest]\n    public latestMetricDataError(): boolean {\n        return this.isLatestMetricdataError;\n    }\n\n    // [/metric-data-latest]\n    public getLatestMetricDataErrorMessage(): string {\n        return this.latestMetricdataErrorMessage;\n    }\n\n    public metricDataRangeError(): boolean {\n        return this.isMetricdataRangeError;\n    }\n\n    public metricDataRangeErrorMessage(): string {\n        return this.metricdataRangeErrorMessage;\n    }\n\n    private async updateInfo(): Promise<boolean> {\n        let updated = false;\n        requestAxios(`${MANAGER_IP}/trial-jobs`)\n            .then(data => {\n                this.trialJobList = data;\n                for (const trialInfo of data as TrialJobInfo[]) {\n                    if (this.trials.has(trialInfo.trialJobId)) {\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        updated = this.trials.get(trialInfo.trialJobId)!.updateTrialJobInfo(trialInfo) || updated;\n                    } else {\n                        this.trials.set(trialInfo.trialJobId, new Trial(trialInfo, undefined));\n                        updated = true;\n                    }\n                    this.maxSequenceId = Math.max(this.maxSequenceId, trialInfo.sequenceId);\n                }\n                this.infoInitialized = true;\n            })\n            .catch(error => {\n                this.isJobListError = true;\n                this.jobErrorMessage = error.message;\n                this.infoInitialized = true;\n                updated = true;\n            });\n\n        return updated;\n    }\n\n    private async updateMetrics(lastTime?: boolean): Promise<boolean> {\n        if (this.trials.size < METRIC_GROUP_UPDATE_THRESHOLD || lastTime) {\n            return await this.updateAllMetrics();\n        } else {\n            this.updateManyMetrics();\n            const ret = (await this.updateLatestMetrics()) || this.batchUpdatedAfterReading;\n            this.batchUpdatedAfterReading = false;\n            return ret;\n        }\n    }\n\n    private async updateAllMetrics(): Promise<boolean> {\n        return requestAxios(`${MANAGER_IP}/metric-data`)\n            .then(data => {\n                this.metricsList = data;\n                return this.doUpdateMetrics(data as any, false);\n            })\n            .catch(error => {\n                this.isMetricdataError = true;\n                this.MetricdataErrorMessage = `${error.message}`;\n                this.doUpdateMetrics([], false);\n                return true;\n            });\n    }\n\n    private async updateLatestMetrics(): Promise<boolean> {\n        return requestAxios(`${MANAGER_IP}/metric-data-latest`)\n            .then(data => this.doUpdateMetrics(data as any, true))\n            .catch(error => {\n                this.isLatestMetricdataError = true;\n                this.latestMetricdataErrorMessage = `${error.message}`;\n                this.doUpdateMetrics([], true);\n                return true;\n            });\n    }\n\n    private async updateManyMetrics(): Promise<void> {\n        if (this.doingBatchUpdate) {\n            return;\n        }\n        this.doingBatchUpdate = true;\n        for (\n            let i = 0;\n            i < this.maxSequenceId && this.isMetricdataRangeError === false;\n            i += METRIC_GROUP_UPDATE_SIZE\n        ) {\n            requestAxios(`${MANAGER_IP}/metric-data-range/${i}/${i + METRIC_GROUP_UPDATE_SIZE}`)\n                .then(data => {\n                    const updated = this.doUpdateMetrics(data as any, false);\n                    this.batchUpdatedAfterReading = this.batchUpdatedAfterReading || updated;\n                })\n                .catch(error => {\n                    this.isMetricdataRangeError = true;\n                    this.metricdataRangeErrorMessage = `${error.message}`;\n                });\n        }\n        this.doingBatchUpdate = false;\n    }\n\n    private doUpdateMetrics(allMetrics: MetricDataRecord[], latestOnly: boolean): boolean {\n        let updated = false;\n        for (const [trialId, metrics] of groupMetricsByTrial(allMetrics).entries()) {\n            const trial = this.trials.get(trialId);\n            if (trial !== undefined) {\n                updated = (latestOnly ? trial.updateLatestMetrics(metrics) : trial.updateMetrics(metrics)) || updated;\n            } else {\n                this.trials.set(trialId, new Trial(undefined, metrics));\n                updated = true;\n            }\n        }\n        this.metricInitialized = true;\n        return updated;\n    }\n}\n\nexport { TrialManager };\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n'use strict';\n\nexport interface TrainingServiceConfig {\n    platform: string;\n}\n\n/* Local */\n\nexport interface LocalConfig extends TrainingServiceConfig {\n    platform: 'local';\n    useActiveGpu?: boolean;\n    maxTrialNumberPerGpu: number;\n    gpuIndices?: number[];\n}\n\n/* Remote */\n\nexport interface RemoteMachineConfig {\n    host: string;\n    port: number;\n    user: string;\n    password?: string;\n    sshKeyFile: string;\n    sshPassphrase?: string;\n    useActiveGpu: boolean;\n    maxTrialNumberPerGpu: number;\n    gpuIndices?: number[];\n    pythonPath?: string;\n}\n\nexport interface RemoteConfig extends TrainingServiceConfig {\n    platform: 'remote';\n    reuseMode: boolean;\n    machineList: RemoteMachineConfig[];\n}\n\n/* OpenPAI */\n\nexport interface OpenpaiConfig extends TrainingServiceConfig {\n    platform: 'openpai';\n    host: string;\n    username: string;\n    token: string;\n    trialCpuNumber: number;\n    trialMemorySize: string;\n    storageConfigName: string;\n    dockerImage: string;\n    localStorageMountPoint: string;\n    containerStorageMountPoint: string;\n    reuseMode: boolean;\n    openpaiConfig?: object;\n}\n\n/* AML */\n\nexport interface AmlConfig extends TrainingServiceConfig {\n    platform: 'aml';\n    subscriptionId: string;\n    resourceGroup: string;\n    workspaceName: string;\n    computeTarget: string;\n    dockerImage: string;\n}\n\n/* Kubeflow */\n\nexport interface KubeflowStorageConfig {\n    storage: string;\n    server?: string;\n    path?: string;\n    azureAccount?: string;\n    azureShare?: string;\n    keyVault?: string;\n    keyVaultSecret?: string;\n}\n\nexport interface KubeflowRoleConfig {\n    replicas: number;\n    command: string;\n    gpuNumber: number;\n    cpuNumber: number;\n    memorySize: string;\n    dockerImage: string;\n}\n\nexport interface KubeflowConfig extends TrainingServiceConfig {\n    platform: 'kubeflow';\n    operator: string;\n    apiVersion: string;\n    storage: KubeflowStorageConfig;\n    worker: KubeflowRoleConfig;\n    parameterServer?: KubeflowRoleConfig;\n}\n\n/* FrameworkController */\n\ntype FrameworkControllerStorageConfig = KubeflowStorageConfig;\n\nexport interface FrameworkControllerRoleConfig {\n    name: string;\n    dockerImage: string;\n    taskNumber: number;\n    command: string;\n    gpuNumber: number;\n    cpuNumber: number;\n    memorySize: string;\n    attemptCompletionMinFailedTasks: number;\n    attemptCompletionMinSucceededTasks: number;\n}\n\nexport interface FrameworkControllerConfig extends TrainingServiceConfig {\n    platform: 'frameworkcontroller';\n    serviceAccountName: string;\n    storage: FrameworkControllerStorageConfig;\n    taskRoles: FrameworkControllerRoleConfig[];\n}\n\n/* common */\n\nexport interface AlgorithmConfig {\n    name?: string;\n    className?: string;\n    codeDirectory?: string;\n    classArgs?: object;\n}\n\nexport interface ExperimentConfig {\n    experimentName?: string;\n    searchSpace: any;\n    trialCommand: string;\n    trialCodeDirectory: string;\n    trialConcurrency: number;\n    trialGpuNumber?: number;\n    maxExperimentDuration?: string;\n    maxTrialNumber?: number;\n    nniManagerIp?: string;\n    //useAnnotation: boolean;\n    debug: boolean;\n    logLevel?: string;\n    experimentWorkingDirectory?: string;\n    tunerGpuIndices?: number[];\n    tuner?: AlgorithmConfig;\n    assessor?: AlgorithmConfig;\n    advisor?: AlgorithmConfig;\n    trainingService: TrainingServiceConfig;\n}\n\n/* util functions */\n\nconst timeUnits = { d: 24 * 3600, h: 3600, m: 60, s: 1 };\n\nexport function toSeconds(time: string | number): number {\n    if (typeof time === 'number') {\n        return time;\n    }\n    for (const [unit, factor] of Object.entries(timeUnits)) {\n        if (time.endsWith(unit)) {\n            const digits = time.slice(0, -1);\n            return Number(digits) * factor;\n        }\n    }\n    throw new Error(`Bad time string \"${time}\"`);\n}\n","import * as JSON5 from 'json5';\nimport axios from 'axios';\nimport { IContextualMenuProps } from '@fluentui/react';\nimport { MANAGER_IP, RETIARIIPARAMETERS } from './const';\nimport { EXPERIMENT } from './datamodel';\nimport { MetricDataRecord, FinalType, TableObj, Tensorboard } from './interface';\n\nfunction getPrefix(): string | undefined {\n    const pathName = window.location.pathname;\n    let newPathName = pathName;\n    const pathArr: string[] = ['/oview', '/detail', '/experiment'];\n    pathArr.forEach(item => {\n        if (pathName.endsWith(item)) {\n            newPathName = pathName.replace(item, '');\n        }\n    });\n    let result = newPathName === '' || newPathName === '/' ? undefined : newPathName;\n    if (result !== undefined) {\n        if (result.endsWith('/')) {\n            result = result.slice(0, result.length - 1);\n        }\n    }\n    return result;\n}\n\nasync function requestAxios(url: string): Promise<any> {\n    const response = await axios.get(url);\n    if (response.status === 200) {\n        if (response.data.error !== undefined) {\n            throw new Error(`API ${url} ${response.data.error}`);\n        } else {\n            return response.data as any;\n        }\n    } else {\n        throw new Error(`API ${url} ${response.status} error`);\n    }\n}\n\nconst convertTime = (num: number): string => {\n    if (num <= 0) {\n        return '0';\n    }\n    if (num % 3600 === 0) {\n        return num / 3600 + 'h';\n    } else {\n        const hour = Math.floor(num / 3600);\n        const min = Math.floor((num / 60) % 60);\n        return hour > 0 ? `${hour}h ${min}min` : `${min}min`;\n    }\n};\n\n// trial's duration, accurate to seconds for example 10min 30s\nconst convertDuration = (seconds: number): string => {\n    let str = '';\n\n    const d = Math.floor(seconds / (24 * 3600));\n    if (d > 0) {\n        str += `${d}d `;\n    }\n    seconds -= d * 24 * 3600;\n\n    const h = Math.floor(seconds / 3600);\n    if (h > 0) {\n        str += `${h}h `;\n    }\n    seconds -= h * 3600;\n\n    const m = Math.floor(seconds / 60);\n    if (m > 0) {\n        str += `${m}m `;\n    }\n    seconds -= m * 60;\n\n    if (seconds > 0) {\n        str += `${Math.floor(seconds)}s`;\n    }\n    return str ? str : '0s';\n};\n\n// according the unit(d,h,m) to convert duration\nfunction convertTimeAsUnit(unit: string, value: number): number {\n    let divisor = 1;\n    if (unit === 'h') {\n        divisor = 3600;\n    } else if (unit === 'm') {\n        divisor = 60;\n    } else {\n        divisor = 24 * 3600;\n    }\n    return value / divisor;\n}\nfunction parseMetrics(metricData: string): any {\n    if (metricData.includes('NaN') || metricData.includes('Infinity')) {\n        return JSON5.parse(JSON5.parse(metricData));\n    } else {\n        return JSON.parse(JSON.parse(metricData));\n    }\n}\n\nconst isArrayType = (list: any): boolean | undefined => {\n    return Array.isArray(list);\n};\n\n// get final result value\n// draw Accuracy point graph\nconst getFinalResult = (final?: MetricDataRecord[]): number => {\n    let acc;\n    let showDefault = 0;\n    if (final) {\n        acc = parseMetrics(final[final.length - 1].data);\n        if (typeof acc === 'object' && !isArrayType(acc)) {\n            if (acc.default) {\n                showDefault = acc.default;\n            }\n        } else if (typeof acc === 'number') {\n            showDefault = acc;\n        } else {\n            showDefault = NaN;\n        }\n        return showDefault;\n    } else {\n        return 0;\n    }\n};\n\nfunction isNaNorInfinity(val: number): boolean {\n    return Object.is(val, NaN) || Object.is(val, Infinity);\n}\n\n// get final result value // acc obj\nconst getFinal = (final?: MetricDataRecord[]): FinalType | undefined => {\n    let showDefault: FinalType;\n    if (final) {\n        showDefault = parseMetrics(final[final.length - 1].data);\n        if (typeof showDefault === 'number') {\n            if (!isNaNorInfinity(showDefault)) {\n                return { default: showDefault };\n            }\n        } else if (isArrayType(showDefault)) {\n            // not support final type\n            return undefined;\n            // eslint-disable-next-line no-prototype-builtins\n        } else if (typeof showDefault === 'object' && showDefault.hasOwnProperty('default')) {\n            return showDefault;\n        }\n    } else {\n        return undefined;\n    }\n};\n\n// detail page table intermediate button\nconst intermediateGraphOption = (intermediateArr: number[], id: string): any => {\n    const sequence: number[] = [];\n    const lengthInter = intermediateArr.length;\n    for (let i = 1; i <= lengthInter; i++) {\n        sequence.push(i);\n    }\n    return {\n        title: {\n            text: id,\n            left: 'center',\n            textStyle: {\n                fontSize: 16,\n                color: '#333'\n            }\n        },\n        tooltip: {\n            trigger: 'item'\n        },\n        xAxis: {\n            // name: '#Intermediate result',\n            data: sequence\n        },\n        yAxis: {\n            name: 'Default metric',\n            type: 'value',\n            data: intermediateArr,\n            scale: true\n        },\n        series: [\n            {\n                symbolSize: 6,\n                type: 'scatter',\n                data: intermediateArr\n            }\n        ]\n    };\n};\n\n// kill job\nconst killJob = (key: number, id: string, status: string, updateList?: Function): void => {\n    axios(`${MANAGER_IP}/trial-jobs/${id}`, {\n        method: 'DELETE',\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n        }\n    })\n        .then(res => {\n            if (res.status === 200) {\n                // TODO: use Message.txt to tooltip\n                alert('Cancel the job successfully');\n                // render the table\n                if (updateList) {\n                    updateList(); // FIXME\n                }\n            } else {\n                alert('fail to cancel the job');\n            }\n        })\n        .catch(error => {\n            if (error.response.status === 500) {\n                if (error.response.data.error) {\n                    alert(error.response.data.error);\n                } else {\n                    alert('500 error, fail to cancel the job');\n                }\n            }\n        });\n};\n\nconst filterByStatus = (item: TableObj): boolean => {\n    return item.status === 'SUCCEEDED';\n};\n\n// a waittiong trial may havn't start time\nconst filterDuration = (item: TableObj): boolean => {\n    return item.status !== 'WAITING';\n};\n\nconst downFile = (content: string, fileName: string): void => {\n    const aTag = document.createElement('a');\n    const isEdge = navigator.userAgent.indexOf('Edge') !== -1 ? true : false;\n    const file = new Blob([content], { type: 'application/json' });\n    aTag.download = fileName;\n    aTag.href = URL.createObjectURL(file);\n    aTag.click();\n    if (!isEdge) {\n        URL.revokeObjectURL(aTag.href);\n    }\n    if (navigator.userAgent.indexOf('Firefox') > -1) {\n        const downTag = document.createElement('a');\n        downTag.addEventListener('click', function () {\n            downTag.download = fileName;\n            downTag.href = URL.createObjectURL(file);\n        });\n        const eventMouse = document.createEvent('MouseEvents');\n        eventMouse.initEvent('click', false, false);\n        downTag.dispatchEvent(eventMouse);\n    }\n};\n\n// function formatTimestamp(timestamp?: number, placeholder?: string = 'N/A'): string {\nfunction formatTimestamp(timestamp?: number, placeholder?: string): string {\n    if (placeholder === undefined) {\n        placeholder = 'N/A';\n    }\n    return timestamp ? new Date(timestamp).toLocaleString('en-US') : placeholder;\n}\n\nfunction expformatTimestamp(timestamp: number | string): string {\n    if (typeof timestamp === 'number') {\n        return new Date(timestamp).toLocaleString('en-US');\n    } else {\n        return 'N/A';\n    }\n}\n\nfunction metricAccuracy(metric: MetricDataRecord): number {\n    const data = parseMetrics(metric.data);\n    // return typeof data === 'number' ? data : NaN;\n    if (typeof data === 'number') {\n        return data;\n    } else {\n        return data.default;\n    }\n}\n\nfunction formatAccuracy(accuracy: number): string {\n    // TODO: how to format NaN?\n    return accuracy.toFixed(6).replace(/0+$/, '').replace(/\\.$/, '');\n}\n\nfunction formatComplexTypeValue(value: any): string | number {\n    if (['number', 'string'].includes(typeof value)) {\n        return value;\n    } else {\n        return value.toString();\n    }\n}\n\nfunction isManagerExperimentPage(): boolean {\n    return location.pathname.indexOf('experiment') === -1 ? false : true;\n}\n\nfunction caclMonacoEditorHeight(height): number {\n    // [Search space 56px] + [marginBottom 18px] +\n    // button[height: 32px, marginTop: 45px, marginBottom: 7px]\n    // panel own padding-bottom: 20px;\n    return height - 178;\n}\n\nfunction copyAndSort<T>(items: T[], columnKey: string, isSortedDescending?: boolean): any {\n    const key = columnKey as keyof T;\n    return items.slice(0).sort(function (a: T, b: T): any {\n        if (\n            a[key] === undefined ||\n            Object.is(a[key], NaN) ||\n            Object.is(a[key], Infinity) ||\n            Object.is(a[key], -Infinity) ||\n            typeof a[key] === 'object'\n        ) {\n            return 1;\n        }\n        if (\n            b[key] === undefined ||\n            Object.is(b[key], NaN) ||\n            Object.is(b[key], Infinity) ||\n            Object.is(b[key], -Infinity) ||\n            typeof b[key] === 'object'\n        ) {\n            return -1;\n        }\n        return (isSortedDescending ? a[key] < b[key] : a[key] > b[key]) ? 1 : -1;\n    });\n}\n\nfunction disableTensorboard(selectedRowIds: string[], queryTensorboardList: Tensorboard[]): boolean {\n    let flag = true;\n\n    if (selectedRowIds.length !== 0) {\n        flag = false;\n    }\n\n    if (selectedRowIds.length === 0 && queryTensorboardList.length !== 0) {\n        flag = false;\n    }\n\n    return flag;\n}\n\nfunction getTensorboardMenu(queryTensorboardList: Tensorboard[], stopFunc, seeDetailFunc): IContextualMenuProps {\n    const result: Array<object> = [];\n    if (queryTensorboardList.length !== 0) {\n        result.push({\n            key: 'delete',\n            text: 'Stop all tensorBoard',\n            className: 'clearAll',\n            onClick: stopFunc\n        });\n        queryTensorboardList.forEach(item => {\n            result.push({\n                key: item.id,\n                text: `${item.id}`,\n                className: `CommandBarButton-${item.status}`,\n                onClick: (): void => seeDetailFunc(item)\n            });\n        });\n    }\n    const tensorboardMenu: IContextualMenuProps = {\n        items: result.reverse() as any\n    };\n\n    return tensorboardMenu;\n}\n\n// search space type map list: now get type from search space\nconst parametersType = (): Map<string, string> => {\n    const parametersTypeMap = new Map();\n    const trialParameterlist = Object.keys(EXPERIMENT.searchSpace);\n\n    trialParameterlist.forEach(item => {\n        parametersTypeMap.set(item, typeof EXPERIMENT.searchSpace[item]._value[0]);\n    });\n\n    return parametersTypeMap;\n};\n\n// retiarii experiment parameters is in field `mutation_summary`\nconst reformatRetiariiParameter = (parameters: any): {} => {\n    return RETIARIIPARAMETERS in parameters ? parameters[RETIARIIPARAMETERS] : parameters;\n};\n\nexport {\n    getPrefix,\n    convertTime,\n    convertDuration,\n    convertTimeAsUnit,\n    getFinalResult,\n    getFinal,\n    downFile,\n    intermediateGraphOption,\n    killJob,\n    filterByStatus,\n    filterDuration,\n    formatAccuracy,\n    formatTimestamp,\n    expformatTimestamp,\n    metricAccuracy,\n    parseMetrics,\n    isArrayType,\n    requestAxios,\n    isNaNorInfinity,\n    formatComplexTypeValue,\n    isManagerExperimentPage,\n    caclMonacoEditorHeight,\n    copyAndSort,\n    disableTensorboard,\n    getTensorboardMenu,\n    parametersType,\n    reformatRetiariiParameter\n};\n"],"names":["batchFormat","objects","curIndent","indent","width","keyOrKeys","keys","undefined","map","k","lines","obj","i","stringifySingleLine","nonNull","filter","length","some","Object","values","child","detectNested","every","line","Array","isArray","iter","concat","Symbol","iterator","createBlock","next","value","childrenKeys","detectBatch","uniqueKeys","Set","iters","Map","key","fields","v","elements","field","set","get","sameType","totalKeys","size","reduce","a","b","arrays","brackets","head","lineSeparator","tail","join","toString","x","TrialConfigPanel","React","constructor","props","super","this","state","panelInnerHeight","window","innerHeight","innerWidth","setLogDrawerHeight","setState","addEventListener","componentWillUnmount","removeEventListener","render","hideConfigPanel","panelName","monacoEditorHeight","caclMonacoEditorHeight","blacklist","profile","lodash","EXPERIMENT","execDuration","convertDuration","prettyWidth","showProfile","JSON","stringify","val","includes","Stack","Panel","isOpen","hasCloseButton","isFooterAtBottom","isLightDismiss","onLightDismissClick","className","height","language","theme","repeat","options","MONACO","PrimaryButton","text","onClick","IconButtonTemplet","icon","btuName","event","DefaultButton","Icon","iconName","SlideNavBtns","isShowConfigPanel","setShowConfigPanle","useState","isShowLogPanel","setShowLogPanel","setPanelName","useCallback","showTrialConfigpPanel","showSearchSpacePanel","showLogPanel","hideLogPanel","maxWidth","minWidth","LogPanel","closePanel","ExperimentSummaryPanel","experiment","expDrawerHeight","getExperimentContent","experimentData","parse","experimentProfile","trialMessagesArr","TRIALS","interResultList","item","trialId","trialJobId","intermediate","interId","push","result","experimentParameters","trialMessage","_isExperimentMount","refreshId","clearInterval","downExperimentParameters","downFile","onWindowResize","componentDidMount","setInterval","clearTimeout","closeExpDrawer","DRAWEROPTION","horizontal","StackItem","grow","NavCon","version","menuVisible","navBarVisible","isdisabledFresh","isvisibleExperimentDrawer","refreshText","refreshFrequency","showExpcontent","getNNIversion","axios","MANAGER_IP","method","then","res","status","data","openGithub","feed","open","openDocs","WEBUIDOC","openGithubNNI","nniLink","getInterval","num","changeInterval","aboutProps","items","iconProps","styles","root","display","verticalAlign","NNILOGO","OVERVIEWTABS","DETAILTABS","horizontalAlign","tokens","gap15","stackStyle","CommandBarButton","disableUpdates","timeIcon","menuProps","refreshProps","infoIconAbout","to","ChevronRightMed","closeTimer","bind","requency","require","registerTheme","color","AppContext","interval","columnList","COLUMN","experimentUpdateBroadcast","trialsUpdateBroadcast","metricGraphMode","bestTrialEntries","maxDurationUnit","expandRowIDs","changeColumn","_val","changeMetricGraphMode","changeMaxDurationUnit","changeEntries","updateOverviewPage","updateDetailPage","changeExpandRowIDs","_type","App","firstLoad","isillegalFinal","expWarningMessage","isUpdate","Promise","all","timerId","setTimeout","refresh","id","type","currentExpandRowIDs","has","delete","add","entries","unit","shouldComponentUpdate","nextProps","nextState","errorList","errorWhere","errorMessage","isManagerExperimentPage","style","minHeight","Nav","refreshFunction","lastRefresh","MessageInfo","info","typeInfo","Provider","children","async","experimentUpdated","trialsUpdated","messageBarType","MessageBarType","isMultiline","gap10","childrenGap","initializeIcons","infoIcon","warining","errorBadge","completed","blocked","copy","tableListIcon","LineChart","Edit","CheckMark","Cancel","RevToggleKey","MonacoHTML","content","loading","Spinner","label","ariaLive","labelPosition","minimap","enabled","readOnly","automaticLayout","wordWrap","nniManagerLogStr","dispatcherLogStr","isLoading","logPanelHeight","downloadNNImanager","downloadDispatcher","dispatcherHTML","manualRefresh","nnimanagerHTML","setLogPanelHeight","activeTab","monacoHeight","Pivot","selectedKey","PivotItem","headerText","dispatcherPromise","DOWNLOAD_IP","nniManagerPromise","activeClassName","src","getPrefix","alt","Boolean","location","hostname","match","Overview","lazy","TrialsDetail","ExperimentManagerIndex","path","ReactDOM","basename","Suspense","fallback","component","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister","METRIC_GROUP_UPDATE_THRESHOLD","METRIC_GROUP_UPDATE_SIZE","prefix","RESTAPI","trialJobStatus","EXPERIMENTSTATUS","CONTROLTYPE","scrollBeyondLastLine","SUPPORTED_SEARCH_SPACE_TYPE","TOOLTIP_BACKGROUND_COLOR","MAX_TRIAL_NUMBERS","RETIARIIPARAMETERS","fullNameJoin","name","NumericAxis","min","max","nested","baseName","fullName","scale","mu","sigma","Math","exp","domain","SimpleOrdinalAxis","from","formatComplexTypeValue","NestedOrdinalAxis","_name","SearchSpace","axes","searchSpaceSpec","forEach","spec","_value","searchSpace","trials","newSearchSpace","addingColumns","trial","parameters","unexpectedEntries","console","warn","column","MetricSpace","columns","acc","default","emptyProfile","params","trialCommand","trialCodeDirectory","trialConcurrency","debug","trainingService","platform","logDir","startTime","maxSequenceId","revision","emptyMetadata","port","endTime","experimentName","tag","pid","webuiUrl","prefixUrl","inferTrialParameters","paramObj","space","latestedParamObj","reformatRetiariiParameter","axisKey","subSpace","subParams","subUnexpected","Trial","metricsInitialized","intermediates","metrics","infoField","updateMetrics","compareAccuracy","otherTrial","sortable","finalAcc","intermediateMetrics","ret","accuracy","isFinite","latestAccuracy","temp","isArrayType","parseMetrics","hasOwnProperty","tableRecord","duration","Date","getTime","JSON5","sequenceId","message","intermediateCount","formattedLatestAccuracy","formatLatestAccuracy","accDictionary","getFinal","finalMetricData","description","multiProgress","tempHyper","hyperParameters","getPara","error","logPath","mediate","updated","finalKeys","initialized","prevMetricCnt","final","metric","sequence","metricAccuracy","updateLatestMetrics","updateTrialJobInfo","trialJobInfo","same","renderNumber","isNaNorInfinity","formatAccuracy","latest","metadataField","statusField","isNestedExperiment","isexperimentError","experimentErrorMessage","isStatusError","statusErrorMessage","profileField","update","isNestedExp","config","find","experimentError","statusError","getExperimentMessage","getStatusMessage","requestAxios","metadata","profile1","profile2","copy1","assign","copy2","compareProfiles","catch","maxExperimentDurationSeconds","maxExperimentDuration","maxExecDuration","Infinity","toSeconds","maxTrialNumber","maxTrialNum","optimizeMode","algo","tuner","advisor","assessor","classArgs","trainingServicePlatform","searchSpaceNew","logCollectionEnabled","Error","errors","infoInitialized","metricInitialized","doingBatchUpdate","batchUpdatedAfterReading","isJobListError","jobErrorMessage","isMetricdataError","MetricdataErrorMessage","isLatestMetricdataError","latestMetricdataErrorMessage","isMetricdataRangeError","metricdataRangeErrorMessage","metricsList","trialJobList","getMetricsList","getTrialJobList","lastTime","infoUpdated","metricUpdated","updateInfo","getTrial","getTrials","trialIds","table","toArray","sort","trial1","trial2","callback","succeededTrials","succeedTrialsList","countStatus","cnt","inferredSearchSpace","expSearchSpace","inferFromTrials","inferredMetricSpace","jobListError","getJobErrorMessage","MetricDataError","getMetricDataErrorMessage","latestMetricDataError","getLatestMetricDataErrorMessage","metricDataRangeError","metricDataRangeErrorMessage","trialInfo","updateAllMetrics","updateManyMetrics","doUpdateMetrics","allMetrics","latestOnly","groupMetricsByTrial","timeUnits","d","h","m","s","time","factor","endsWith","digits","slice","Number","pathName","pathname","newPathName","replace","url","response","seconds","str","floor","convertTimeAsUnit","divisor","metricData","list","is","NaN","showDefault","killJob","updateList","headers","alert","filterByStatus","filterDuration","fileName","aTag","createElement","isEdge","userAgent","indexOf","file","Blob","download","href","URL","createObjectURL","click","revokeObjectURL","downTag","eventMouse","createEvent","initEvent","dispatchEvent","formatTimestamp","timestamp","placeholder","toLocaleString","expformatTimestamp","toFixed","copyAndSort","columnKey","isSortedDescending","disableTensorboard","selectedRowIds","queryTensorboardList","flag","getTensorboardMenu","stopFunc","seeDetailFunc","reverse","parametersType","parametersTypeMap"],"sourceRoot":""}