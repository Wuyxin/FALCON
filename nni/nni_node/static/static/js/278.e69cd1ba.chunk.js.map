{"version":3,"file":"static/js/278.e69cd1ba.chunk.js","mappings":"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","sources":["components/common/CopyButton.tsx","components/common/LogPathChild.tsx","components/common/PaiTrialChild.tsx","components/common/PaiTrialLog.tsx","components/common/TrialLog.tsx","components/common/PanelMonacoEditor.tsx","components/common/OpenRow.tsx","../node_modules/office-ui-fabric-react/lib/components/Sticky/Sticky.types.js","../node_modules/office-ui-fabric-react/lib/components/ScrollablePane/ScrollablePane.styles.js","../node_modules/office-ui-fabric-react/lib/components/ScrollablePane/ScrollablePane.types.js","../node_modules/office-ui-fabric-react/lib/components/ScrollablePane/ScrollablePane.base.js","../node_modules/office-ui-fabric-react/lib/components/ScrollablePane/ScrollablePane.js","../node_modules/office-ui-fabric-react/lib/components/Sticky/Sticky.js","components/experiment/overview/table/DefaultMetric.tsx","components/experiment/overview/table/SuccessTable.tsx","../node_modules/@uifabric/react-hooks/lib/useId.js","components/experiment/overview/params/BasicInfo.tsx","../node_modules/office-ui-fabric-react/lib/components/ProgressIndicator/ProgressIndicator.base.js","../node_modules/office-ui-fabric-react/lib/components/ProgressIndicator/ProgressIndicator.styles.js","../node_modules/office-ui-fabric-react/lib/components/ProgressIndicator/ProgressIndicator.js","components/experiment/overview/count/context.tsx","components/experiment/overview/overviewConst.ts","components/experiment/overview/count/EditExperimentParam.tsx","components/experiment/overview/count/ExpDurationContext.tsx","components/experiment/overview/count/commonStyle.ts","components/experiment/overview/count/ExpDuration.tsx","components/experiment/overview/count/TrialCount.tsx","components/experiment/overview/command/Command1.tsx","components/experiment/overview/command/Command2.tsx","components/experiment/overview/Overview.tsx","components/experiment/overview/Title.tsx","components/experiment/overview/TitleContext.tsx","components/experiment/overview/params/basicInfoStyles.ts","components/experiment/trialdetail/chart/DefaultMetricPoint.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport copy from 'copy-to-clipboard';\nimport { IconButton, FontSizes, TooltipHost } from '@fluentui/react';\nimport { TOOLTIP_BACKGROUND_COLOR } from '@static/const';\n\nconst COPIED_TOOLTIP_CLOSE_DELAY = 1000;\n\nconst CopyButton = ({ value, hideTooltip }): any => {\n    const ref = useRef(null);\n    return (\n        <div>\n            <IconButton\n                iconProps={{ iconName: 'Copy' }}\n                styles={{ icon: [{ fontSize: FontSizes.small }] }}\n                onClick={(event: React.SyntheticEvent<EventTarget>): void => {\n                    event.stopPropagation();\n                    copy(value);\n                    ref.current && (ref as any).current.show();\n                    setTimeout(() => {\n                        ref.current !== null && (ref as any).current.dismiss();\n                    }, COPIED_TOOLTIP_CLOSE_DELAY);\n                }}\n                onMouseDown={(e): void => {\n                    e.stopPropagation();\n                }}\n                onMouseUp={(e): void => {\n                    e.stopPropagation();\n                }}\n            />\n            <TooltipHost\n                hidden={hideTooltip}\n                content='Copied'\n                componentRef={ref}\n                delay={0}\n                tooltipProps={{\n                    calloutProps: {\n                        styles: {\n                            beak: { background: TOOLTIP_BACKGROUND_COLOR },\n                            beakCurtain: { background: TOOLTIP_BACKGROUND_COLOR },\n                            calloutMain: { background: TOOLTIP_BACKGROUND_COLOR }\n                        }\n                    }\n                }}\n            />\n        </div>\n    );\n};\n\nCopyButton.propTypes = {\n    value: PropTypes.string.isRequired,\n    hideTooltip: PropTypes.bool\n};\n\nexport default CopyButton;\n","import * as React from 'react';\n\ninterface LogpathChildProps {\n    eachLogpath: string;\n    logName: string;\n}\n\nclass LogPathChild extends React.Component<LogpathChildProps, {}> {\n    constructor(props: LogpathChildProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { eachLogpath, logName } = this.props;\n        const isLink = /^http/gi.test(eachLogpath);\n\n        return (\n            <div className='logpath'>\n                <span className='logName'>{logName}</span>\n                {isLink ? (\n                    <a className='logContent logHref' rel='noopener noreferrer' href={eachLogpath} target='_blank'>\n                        {eachLogpath}\n                    </a>\n                ) : (\n                    <span className='logContent'>{eachLogpath}</span>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default LogPathChild;\n","import * as React from 'react';\nimport { DOWNLOAD_IP } from '@static/const';\nimport LogPathChild from './LogPathChild';\n\ninterface PaiTrialChildProps {\n    logString: string;\n    id: string;\n    logCollect: boolean;\n}\n\nclass PaiTrialChild extends React.Component<PaiTrialChildProps, {}> {\n    constructor(props: PaiTrialChildProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { logString, id, logCollect } = this.props;\n        return (\n            <div>\n                {logString === '' ? null : (\n                    <div>\n                        {logCollect ? (\n                            <a\n                                target='_blank'\n                                rel='noopener noreferrer'\n                                href={`${DOWNLOAD_IP}/trial_${id}.log`}\n                                style={{ marginRight: 10 }}\n                            >\n                                Trial stdout\n                            </a>\n                        ) : (\n                            <LogPathChild eachLogpath={logString} logName='Trial stdout:' />\n                        )}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default PaiTrialChild;\n","import * as React from 'react';\nimport { DOWNLOAD_IP } from '@static/const';\nimport PaiTrialChild from './PaiTrialChild';\nimport LogPathChild from './LogPathChild';\n\ninterface PaitrialLogProps {\n    logStr: string;\n    id: string;\n    logCollection: boolean;\n}\n\nclass PaitrialLog extends React.Component<PaitrialLogProps, {}> {\n    constructor(props: PaitrialLogProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { logStr, id, logCollection } = this.props;\n        const isTwopath = logStr.indexOf(',') !== -1 ? true : false;\n        return (\n            <div>\n                <div>\n                    {isTwopath ? (\n                        <div>\n                            {logCollection ? (\n                                <div>\n                                    <a\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                        href={`${DOWNLOAD_IP}/trial_${id}.log`}\n                                        style={{ marginRight: 10 }}\n                                    >\n                                        Trial stdout\n                                    </a>\n                                    <a target='_blank' rel='noopener noreferrer' href={logStr.split(',')[1]}>\n                                        NFS log\n                                    </a>\n                                </div>\n                            ) : (\n                                <div>\n                                    <LogPathChild eachLogpath={logStr.split(',')[0]} logName='Trial stdout:' />\n                                    <LogPathChild eachLogpath={logStr.split(',')[1]} logName='Log on NFS:' />\n                                </div>\n                            )}\n                        </div>\n                    ) : (\n                        <PaiTrialChild logString={logStr} id={id} logCollect={logCollection} />\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PaitrialLog;\n","import * as React from 'react';\nimport LogPathChild from './LogPathChild';\n\ninterface TrialLogProps {\n    logStr: string;\n    id: string;\n}\n\nclass TrialLog extends React.Component<TrialLogProps, {}> {\n    constructor(props: TrialLogProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const { logStr } = this.props;\n\n        return (\n            <div>\n                <LogPathChild eachLogpath={logStr} logName='Log path:' />\n            </div>\n        );\n    }\n}\n\nexport default TrialLog;\n","import * as React from 'react';\nimport { Stack, Panel, PrimaryButton } from '@fluentui/react';\nimport MonacoEditor from 'react-monaco-editor';\nimport { caclMonacoEditorHeight } from '@static/function';\nimport '@style/logPanel.scss';\n\ninterface LogPanelProps {\n    hideConfigPanel: () => void;\n    panelName: string;\n    panelContent: string;\n}\n\ninterface LogPanelState {\n    panelInnerHeight: number;\n}\n\n/**\n * search space\n * config\n * retiarii parameter\n * panel\n */\n\nclass PanelMonacoEditor extends React.Component<LogPanelProps, LogPanelState> {\n    constructor(props: LogPanelProps) {\n        super(props);\n\n        this.state = {\n            panelInnerHeight: window.innerHeight\n        };\n    }\n\n    // use arrow function for change window size met error: this.setState is not a function\n    setLogPanelHeight = (): void => {\n        this.setState(() => ({ panelInnerHeight: window.innerHeight, innerWidth: window.innerWidth }));\n    };\n\n    async componentDidMount(): Promise<void> {\n        window.addEventListener('resize', this.setLogPanelHeight);\n    }\n\n    componentWillUnmount(): void {\n        window.removeEventListener('resize', this.setLogPanelHeight);\n    }\n\n    render(): React.ReactNode {\n        const { hideConfigPanel, panelName, panelContent } = this.props;\n        const { panelInnerHeight } = this.state;\n        const monacoEditorHeight = caclMonacoEditorHeight(panelInnerHeight);\n        return (\n            <Stack>\n                <Panel\n                    isOpen={true}\n                    hasCloseButton={false}\n                    isFooterAtBottom={true}\n                    isLightDismiss={true}\n                    onLightDismissClick={hideConfigPanel}\n                >\n                    <div className='panel'>\n                        <div>\n                            <div className='panelName'>{panelName}</div>\n                            <MonacoEditor\n                                height={monacoEditorHeight}\n                                language='json'\n                                theme='vs-light'\n                                value={panelContent}\n                                options={{\n                                    minimap: { enabled: false },\n                                    readOnly: true,\n                                    automaticLayout: true,\n                                    wordWrap: 'on'\n                                }}\n                            />\n                        </div>\n                        <PrimaryButton text='Close' className='configClose' onClick={hideConfigPanel} />\n                    </div>\n                </Panel>\n            </Stack>\n        );\n    }\n}\n\nexport default PanelMonacoEditor;\n","import * as React from 'react';\nimport * as copy from 'copy-to-clipboard';\nimport { Stack, PrimaryButton, Pivot, PivotItem, DefaultButton } from '@fluentui/react';\nimport JSONTree from 'react-json-tree';\nimport { Trial } from '@model/trial';\nimport { MANAGER_IP, RETIARIIPARAMETERS } from '@static/const';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport { reformatRetiariiParameter } from '@static/function';\nimport PaiTrialLog from './PaiTrialLog';\nimport TrialLog from './TrialLog';\nimport MessageInfo from './MessageInfo';\nimport PanelMonacoEditor from './PanelMonacoEditor';\nimport '@style/experiment/overview/overview.scss';\nimport '@style/copyParameter.scss';\nimport '@style/openRow.scss';\n\n/**\n *  netron URL must be synchronized with ts/nni_manager/rest_server/index.ts`.\n *  Remember to update it if the value is changed or this file is moved.\n **/\n\ninterface OpenRowProps {\n    trialId: string;\n}\n\ninterface OpenRowState {\n    typeInfo: string;\n    info: string;\n    isHidenInfo: boolean;\n    showRetiaParamPanel: boolean;\n}\n\nclass OpenRow extends React.Component<OpenRowProps, OpenRowState> {\n    constructor(props: OpenRowProps) {\n        super(props);\n        this.state = {\n            typeInfo: '',\n            info: '',\n            isHidenInfo: true,\n            showRetiaParamPanel: false\n        };\n    }\n\n    hideMessageInfo = (): void => {\n        this.setState(() => ({ isHidenInfo: true }));\n    };\n\n    hideRetiaParam = (): void => {\n        this.setState(() => ({ showRetiaParamPanel: false }));\n    };\n\n    isshowRetiaParamPanel = (): void => {\n        this.setState(() => ({ showRetiaParamPanel: true }));\n    };\n\n    /**\n     * info: message content\n     * typeInfo: message type: success | error...\n     * continuousTime: show time, 2000ms\n     */\n    getCopyStatus = (info: string, typeInfo: string): void => {\n        this.setState(() => ({ info, typeInfo, isHidenInfo: false }));\n        setTimeout(this.hideMessageInfo, 2000);\n    };\n\n    copyParams = (trial: Trial): void => {\n        // get copy parameters\n        const params = JSON.stringify(reformatRetiariiParameter(trial.description.parameters as any), null, 4);\n        if (copy.default(params)) {\n            this.getCopyStatus('Success copy parameters to clipboard in form of python dict !', 'success');\n        } else {\n            this.getCopyStatus('Failed !', 'error');\n        }\n    };\n\n    openTrialLog = (filename: string): void => {\n        window.open(`${MANAGER_IP}/trial-file/${this.props.trialId}/${filename}`);\n    };\n\n    openModelOnnx = (): void => {\n        // TODO: netron might need prefix.\n        window.open(`/netron/index.html?url=${MANAGER_IP}/trial-file/${this.props.trialId}/model.onnx`);\n    };\n\n    render(): React.ReactNode {\n        const { isHidenInfo, typeInfo, info, showRetiaParamPanel } = this.state;\n        const trialId = this.props.trialId;\n        const trial = TRIALS.getTrial(trialId);\n        const logPathRow = trial.info.logPath || \"This trial's log path is not available.\";\n        const originParameters = trial.description.parameters;\n        const hasVisualHyperParams = RETIARIIPARAMETERS in originParameters;\n        return (\n            <Stack className='openRow'>\n                <Stack className='openRowContent'>\n                    <Pivot>\n                        <PivotItem headerText='Parameters' key='1' itemIcon='TestParameter'>\n                            {trial.info.hyperParameters !== undefined ? (\n                                <Stack id='description'>\n                                    <Stack className='bgHyper'>\n                                        <JSONTree\n                                            hideRoot={true}\n                                            shouldExpandNode={(): boolean => true} // default expandNode\n                                            getItemString={(): null => null} // remove the {} items\n                                            data={reformatRetiariiParameter(originParameters as any)}\n                                        />\n                                    </Stack>\n                                    <Stack horizontal className='copy'>\n                                        <PrimaryButton\n                                            onClick={this.copyParams.bind(this, trial)}\n                                            text='Copy as json'\n                                            styles={{ root: { width: 128, marginRight: 10 } }}\n                                        />\n                                        {hasVisualHyperParams && (\n                                            <DefaultButton\n                                                onClick={this.isshowRetiaParamPanel}\n                                                text='Original parameters'\n                                            />\n                                        )}\n                                        {/* copy success | failed message info */}\n                                        {!isHidenInfo && <MessageInfo typeInfo={typeInfo} info={info} />}\n                                        {showRetiaParamPanel && (\n                                            <PanelMonacoEditor\n                                                hideConfigPanel={this.hideRetiaParam}\n                                                panelName='Retiarii parameters'\n                                                panelContent={JSON.stringify(originParameters, null, 2)}\n                                            />\n                                        )}\n                                    </Stack>\n                                </Stack>\n                            ) : (\n                                <Stack className='logpath'>\n                                    <span className='logName'>Error: </span>\n                                    <span className='error'>{`This trial's parameters are not available.'`}</span>\n                                </Stack>\n                            )}\n                        </PivotItem>\n                        <PivotItem headerText='Log' key='2' itemIcon='M365InvoicingLogo'>\n                            {\n                                // FIXME: this should not be handled in web UI side\n                                EXPERIMENT.trainingServicePlatform !== 'local' ? (\n                                    <PaiTrialLog\n                                        logStr={logPathRow}\n                                        id={trialId}\n                                        logCollection={EXPERIMENT.logCollectionEnabled}\n                                    />\n                                ) : (\n                                    <div>\n                                        <TrialLog logStr={logPathRow} id={trialId} />\n                                        {/* view each trial log in drawer*/}\n                                        <div id='trialog'>\n                                            <div className='copy' style={{ marginTop: 15 }}>\n                                                <PrimaryButton\n                                                    onClick={this.openTrialLog.bind(this, 'trial.log')}\n                                                    text='View trial log'\n                                                />\n                                                <PrimaryButton\n                                                    onClick={this.openTrialLog.bind(this, 'stderr')}\n                                                    text='View trial error'\n                                                    styles={{ root: { marginLeft: 15 } }}\n                                                />\n                                                <PrimaryButton\n                                                    onClick={this.openTrialLog.bind(this, 'stdout')}\n                                                    text='View trial stdout'\n                                                    styles={{ root: { marginLeft: 15 } }}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                        </PivotItem>\n                        {EXPERIMENT.metadata.tag.includes('retiarii') ? (\n                            <PivotItem headerText='Visualization' key='3' itemIcon='FlowChart'>\n                                <div id='visualization'>\n                                    <div id='visualizationText'>Visualize models with 3rd-party tools.</div>\n                                    <PrimaryButton\n                                        onClick={this.openModelOnnx.bind(this)}\n                                        text='Netron'\n                                        styles={{ root: { marginLeft: 15 } }}\n                                    />\n                                </div>\n                            </PivotItem>\n                        ) : null}\n                    </Pivot>\n                </Stack>\n            </Stack>\n        );\n    }\n}\n\nexport default OpenRow;\n","export var StickyPositionType;\n\n(function (StickyPositionType) {\n  StickyPositionType[StickyPositionType[\"Both\"] = 0] = \"Both\";\n  StickyPositionType[StickyPositionType[\"Header\"] = 1] = \"Header\";\n  StickyPositionType[StickyPositionType[\"Footer\"] = 2] = \"Footer\";\n})(StickyPositionType || (StickyPositionType = {}));","import { HighContrastSelector, getGlobalClassNames } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-ScrollablePane',\n  contentContainer: 'ms-ScrollablePane--contentContainer'\n};\nexport var getStyles = function getStyles(props) {\n  var _a, _b;\n\n  var className = props.className,\n      theme = props.theme;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var AboveAndBelowStyles = {\n    position: 'absolute',\n    pointerEvents: 'none'\n  };\n  var positioningStyle = {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    WebkitOverflowScrolling: 'touch'\n  };\n  return {\n    root: [classNames.root, theme.fonts.medium, positioningStyle, className],\n    contentContainer: [classNames.contentContainer, {\n      overflowY: props.scrollbarVisibility === 'always' ? 'scroll' : 'auto'\n    }, positioningStyle],\n    stickyAbove: [{\n      top: 0,\n      zIndex: 1,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        borderBottom: '1px solid WindowText'\n      }, _a)\n    }, AboveAndBelowStyles],\n    stickyBelow: [{\n      bottom: 0,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        borderTop: '1px solid WindowText'\n      }, _b)\n    }, AboveAndBelowStyles],\n    stickyBelowItems: [{\n      bottom: 0\n    }, AboveAndBelowStyles, {\n      width: '100%'\n    }]\n  };\n};","import * as React from 'react';\n/**\n * {@docCategory ScrollablePane}\n */\n\nexport var ScrollbarVisibility = {\n  auto: 'auto',\n  always: 'always'\n};\nexport var ScrollablePaneContext = React.createContext({\n  scrollablePane: undefined\n});","import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, EventGroup, classNamesFunction, divProperties, getNativeProps, getRTL, initializeComponentRef } from '../../Utilities';\nimport { ScrollablePaneContext } from './ScrollablePane.types';\nvar getClassNames = classNamesFunction();\n\nvar ScrollablePaneBase =\n/** @class */\nfunction (_super) {\n  __extends(ScrollablePaneBase, _super);\n\n  function ScrollablePaneBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._stickyAboveRef = React.createRef();\n    _this._stickyBelowRef = React.createRef();\n    _this._contentContainer = React.createRef();\n\n    _this.subscribe = function (handler) {\n      _this._subscribers.add(handler);\n    };\n\n    _this.unsubscribe = function (handler) {\n      _this._subscribers.delete(handler);\n    };\n\n    _this.addSticky = function (sticky) {\n      _this._stickies.add(sticky); // If ScrollablePane is mounted, then sort sticky in correct place\n\n\n      if (_this.contentContainer) {\n        sticky.setDistanceFromTop(_this.contentContainer);\n\n        _this.sortSticky(sticky);\n      }\n    };\n\n    _this.removeSticky = function (sticky) {\n      _this._stickies.delete(sticky);\n\n      _this._removeStickyFromContainers(sticky);\n\n      _this.notifySubscribers();\n    };\n\n    _this.sortSticky = function (sticky, sortAgain) {\n      if (_this.stickyAbove && _this.stickyBelow) {\n        if (sortAgain) {\n          _this._removeStickyFromContainers(sticky);\n        }\n\n        if (sticky.canStickyTop && sticky.stickyContentTop) {\n          _this._addToStickyContainer(sticky, _this.stickyAbove, sticky.stickyContentTop);\n        }\n\n        if (sticky.canStickyBottom && sticky.stickyContentBottom) {\n          _this._addToStickyContainer(sticky, _this.stickyBelow, sticky.stickyContentBottom);\n        }\n      }\n    };\n\n    _this.updateStickyRefHeights = function () {\n      var stickyItems = _this._stickies;\n      var stickyTopHeight = 0;\n      var stickyBottomHeight = 0;\n      stickyItems.forEach(function (sticky) {\n        var _a = sticky.state,\n            isStickyTop = _a.isStickyTop,\n            isStickyBottom = _a.isStickyBottom;\n\n        if (sticky.nonStickyContent) {\n          if (isStickyTop) {\n            stickyTopHeight += sticky.nonStickyContent.offsetHeight;\n          }\n\n          if (isStickyBottom) {\n            stickyBottomHeight += sticky.nonStickyContent.offsetHeight;\n          }\n\n          _this._checkStickyStatus(sticky);\n        }\n      });\n\n      _this.setState({\n        stickyTopHeight: stickyTopHeight,\n        stickyBottomHeight: stickyBottomHeight\n      });\n    };\n\n    _this.notifySubscribers = function () {\n      if (_this.contentContainer) {\n        _this._subscribers.forEach(function (handle) {\n          // this.stickyBelow is passed in for calculating distance to determine Sticky status\n          handle(_this.contentContainer, _this.stickyBelow);\n        });\n      }\n    };\n\n    _this.getScrollPosition = function () {\n      if (_this.contentContainer) {\n        return _this.contentContainer.scrollTop;\n      }\n\n      return 0;\n    };\n\n    _this.syncScrollSticky = function (sticky) {\n      if (sticky && _this.contentContainer) {\n        sticky.syncScroll(_this.contentContainer);\n      }\n    };\n\n    _this._getScrollablePaneContext = function () {\n      return {\n        scrollablePane: {\n          subscribe: _this.subscribe,\n          unsubscribe: _this.unsubscribe,\n          addSticky: _this.addSticky,\n          removeSticky: _this.removeSticky,\n          updateStickyRefHeights: _this.updateStickyRefHeights,\n          sortSticky: _this.sortSticky,\n          notifySubscribers: _this.notifySubscribers,\n          syncScrollSticky: _this.syncScrollSticky\n        }\n      };\n    };\n\n    _this._addToStickyContainer = function (sticky, stickyContainer, stickyContentToAdd) {\n      // If there's no children, append child to list, otherwise, sort though array and append at correct position\n      if (!stickyContainer.children.length) {\n        stickyContainer.appendChild(stickyContentToAdd);\n      } else {\n        // If stickyContentToAdd isn't a child element of target container, then append\n        if (!stickyContainer.contains(stickyContentToAdd)) {\n          var stickyChildrenElements_1 = [].slice.call(stickyContainer.children);\n          var stickyList_1 = []; // Get stickies.  Filter by canStickyTop/Bottom, then sort by distance from top, and then\n          // filter by elements that are in the stickyContainer already.\n\n          _this._stickies.forEach(function (stickyItem) {\n            if (stickyContainer === _this.stickyAbove && sticky.canStickyTop) {\n              stickyList_1.push(stickyItem);\n            } else if (sticky.canStickyBottom) {\n              stickyList_1.push(stickyItem);\n            }\n          });\n\n          var stickyListSorted = stickyList_1.sort(function (a, b) {\n            return (a.state.distanceFromTop || 0) - (b.state.distanceFromTop || 0);\n          }).filter(function (item) {\n            var stickyContent = stickyContainer === _this.stickyAbove ? item.stickyContentTop : item.stickyContentBottom;\n\n            if (stickyContent) {\n              return stickyChildrenElements_1.indexOf(stickyContent) > -1;\n            }\n\n            return false;\n          }); // Get first element that has a distance from top that is further than our sticky that is being added\n\n          var targetStickyToAppendBefore = undefined;\n\n          for (var _i = 0, stickyListSorted_1 = stickyListSorted; _i < stickyListSorted_1.length; _i++) {\n            var stickyListItem = stickyListSorted_1[_i];\n\n            if ((stickyListItem.state.distanceFromTop || 0) >= (sticky.state.distanceFromTop || 0)) {\n              targetStickyToAppendBefore = stickyListItem;\n              break;\n            }\n          } // If target element to append before is known, grab respective stickyContentTop/Bottom element\n          // and insert before\n\n\n          var targetContainer = null;\n\n          if (targetStickyToAppendBefore) {\n            targetContainer = stickyContainer === _this.stickyAbove ? targetStickyToAppendBefore.stickyContentTop : targetStickyToAppendBefore.stickyContentBottom;\n          }\n\n          stickyContainer.insertBefore(stickyContentToAdd, targetContainer);\n        }\n      }\n    };\n\n    _this._removeStickyFromContainers = function (sticky) {\n      if (_this.stickyAbove && sticky.stickyContentTop && _this.stickyAbove.contains(sticky.stickyContentTop)) {\n        _this.stickyAbove.removeChild(sticky.stickyContentTop);\n      }\n\n      if (_this.stickyBelow && sticky.stickyContentBottom && _this.stickyBelow.contains(sticky.stickyContentBottom)) {\n        _this.stickyBelow.removeChild(sticky.stickyContentBottom);\n      }\n    };\n\n    _this._onWindowResize = function () {\n      var scrollbarWidth = _this._getScrollbarWidth();\n\n      var scrollbarHeight = _this._getScrollbarHeight();\n\n      _this.setState({\n        scrollbarWidth: scrollbarWidth,\n        scrollbarHeight: scrollbarHeight\n      });\n\n      _this.notifySubscribers();\n    };\n\n    _this._getStickyContainerStyle = function (height, isTop) {\n      return __assign(__assign({\n        height: height\n      }, getRTL(_this.props.theme) ? {\n        right: '0',\n        left: (_this.state.scrollbarWidth || _this._getScrollbarWidth() || 0) + \"px\"\n      } : {\n        left: '0',\n        right: (_this.state.scrollbarWidth || _this._getScrollbarWidth() || 0) + \"px\"\n      }), isTop ? {\n        top: '0'\n      } : {\n        bottom: (_this.state.scrollbarHeight || _this._getScrollbarHeight() || 0) + \"px\"\n      });\n    };\n\n    _this._onScroll = function () {\n      var contentContainer = _this.contentContainer;\n\n      if (contentContainer) {\n        _this._stickies.forEach(function (sticky) {\n          sticky.syncScroll(contentContainer);\n        });\n      }\n\n      _this._notifyThrottled();\n    };\n\n    _this._subscribers = new Set();\n    _this._stickies = new Set();\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      stickyTopHeight: 0,\n      stickyBottomHeight: 0,\n      scrollbarWidth: 0,\n      scrollbarHeight: 0\n    };\n    _this._notifyThrottled = _this._async.throttle(_this.notifySubscribers, 50);\n    return _this;\n  }\n\n  Object.defineProperty(ScrollablePaneBase.prototype, \"root\", {\n    get: function get() {\n      return this._root.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ScrollablePaneBase.prototype, \"stickyAbove\", {\n    get: function get() {\n      return this._stickyAboveRef.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ScrollablePaneBase.prototype, \"stickyBelow\", {\n    get: function get() {\n      return this._stickyBelowRef.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ScrollablePaneBase.prototype, \"contentContainer\", {\n    get: function get() {\n      return this._contentContainer.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ScrollablePaneBase.prototype.componentDidMount = function () {\n    var _this = this;\n\n    var initialScrollPosition = this.props.initialScrollPosition;\n\n    this._events.on(this.contentContainer, 'scroll', this._onScroll);\n\n    this._events.on(window, 'resize', this._onWindowResize);\n\n    if (this.contentContainer && initialScrollPosition) {\n      this.contentContainer.scrollTop = initialScrollPosition;\n    } // Set sticky distances from top property, then sort in correct order and notify subscribers\n\n\n    this.setStickiesDistanceFromTop();\n\n    this._stickies.forEach(function (sticky) {\n      _this.sortSticky(sticky);\n    });\n\n    this.notifySubscribers();\n\n    if ('MutationObserver' in window) {\n      this._mutationObserver = new MutationObserver(function (mutation) {\n        // Function to check if mutation is occuring in stickyAbove or stickyBelow\n        function checkIfMutationIsSticky(mutationRecord) {\n          if (this.stickyAbove !== null && this.stickyBelow !== null) {\n            return this.stickyAbove.contains(mutationRecord.target) || this.stickyBelow.contains(mutationRecord.target);\n          }\n\n          return false;\n        } // Compute the scrollbar height, which might have changed if the content's width changed and caused overflow\n\n\n        var scrollbarHeight = _this._getScrollbarHeight(); // If the scrollbar height changed, update state so it's postioned correctly below sticky footer\n\n\n        if (scrollbarHeight !== _this.state.scrollbarHeight) {\n          _this.setState({\n            scrollbarHeight: scrollbarHeight\n          });\n        } // Notify subscribers again to re-check whether Sticky should be Sticky'd or not\n\n\n        _this.notifySubscribers(); // If mutation occurs in sticky header or footer, then update sticky top/bottom heights\n\n\n        if (mutation.some(checkIfMutationIsSticky.bind(_this))) {\n          _this.updateStickyRefHeights();\n        } else {\n          // If mutation occurs in scrollable region, then find Sticky it belongs to and force update\n          var stickyList_2 = [];\n\n          _this._stickies.forEach(function (sticky) {\n            if (sticky.root && sticky.root.contains(mutation[0].target)) {\n              stickyList_2.push(sticky);\n            }\n          });\n\n          if (stickyList_2.length) {\n            stickyList_2.forEach(function (sticky) {\n              sticky.forceUpdate();\n            });\n          }\n        }\n      });\n\n      if (this.root) {\n        this._mutationObserver.observe(this.root, {\n          childList: true,\n          attributes: true,\n          subtree: true,\n          characterData: true\n        });\n      }\n    }\n  };\n\n  ScrollablePaneBase.prototype.componentWillUnmount = function () {\n    this._events.dispose();\n\n    this._async.dispose();\n\n    if (this._mutationObserver) {\n      this._mutationObserver.disconnect();\n    }\n  }; // Only updates if props/state change, just to prevent excessive setState with updateStickyRefHeights\n\n\n  ScrollablePaneBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    return this.props.children !== nextProps.children || this.props.initialScrollPosition !== nextProps.initialScrollPosition || this.props.className !== nextProps.className || this.state.stickyTopHeight !== nextState.stickyTopHeight || this.state.stickyBottomHeight !== nextState.stickyBottomHeight || this.state.scrollbarWidth !== nextState.scrollbarWidth || this.state.scrollbarHeight !== nextState.scrollbarHeight;\n  };\n\n  ScrollablePaneBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var initialScrollPosition = this.props.initialScrollPosition;\n\n    if (this.contentContainer && typeof initialScrollPosition === 'number' && prevProps.initialScrollPosition !== initialScrollPosition) {\n      this.contentContainer.scrollTop = initialScrollPosition;\n    } // Update subscribers when stickyTopHeight/stickyBottomHeight changes\n\n\n    if (prevState.stickyTopHeight !== this.state.stickyTopHeight || prevState.stickyBottomHeight !== this.state.stickyBottomHeight) {\n      this.notifySubscribers();\n    }\n\n    this._async.setTimeout(this._onWindowResize, 0);\n  };\n\n  ScrollablePaneBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        theme = _a.theme,\n        styles = _a.styles;\n    var _b = this.state,\n        stickyTopHeight = _b.stickyTopHeight,\n        stickyBottomHeight = _b.stickyBottomHeight;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      scrollbarVisibility: this.props.scrollbarVisibility\n    });\n    return React.createElement(\"div\", __assign({}, getNativeProps(this.props, divProperties), {\n      ref: this._root,\n      className: classNames.root\n    }), React.createElement(\"div\", {\n      ref: this._stickyAboveRef,\n      className: classNames.stickyAbove,\n      style: this._getStickyContainerStyle(stickyTopHeight, true)\n    }), React.createElement(\"div\", {\n      ref: this._contentContainer,\n      className: classNames.contentContainer,\n      \"data-is-scrollable\": true\n    }, React.createElement(ScrollablePaneContext.Provider, {\n      value: this._getScrollablePaneContext()\n    }, this.props.children)), React.createElement(\"div\", {\n      className: classNames.stickyBelow,\n      style: this._getStickyContainerStyle(stickyBottomHeight, false)\n    }, React.createElement(\"div\", {\n      ref: this._stickyBelowRef,\n      className: classNames.stickyBelowItems\n    })));\n  };\n\n  ScrollablePaneBase.prototype.setStickiesDistanceFromTop = function () {\n    var _this = this;\n\n    if (this.contentContainer) {\n      this._stickies.forEach(function (sticky) {\n        sticky.setDistanceFromTop(_this.contentContainer);\n      });\n    }\n  };\n\n  ScrollablePaneBase.prototype.forceLayoutUpdate = function () {\n    this._onWindowResize();\n  };\n\n  ScrollablePaneBase.prototype._checkStickyStatus = function (sticky) {\n    if (this.stickyAbove && this.stickyBelow && this.contentContainer && sticky.nonStickyContent) {\n      // If sticky is sticky, then append content to appropriate container\n      if (sticky.state.isStickyTop || sticky.state.isStickyBottom) {\n        if (sticky.state.isStickyTop && !this.stickyAbove.contains(sticky.nonStickyContent) && sticky.stickyContentTop) {\n          sticky.addSticky(sticky.stickyContentTop);\n        }\n\n        if (sticky.state.isStickyBottom && !this.stickyBelow.contains(sticky.nonStickyContent) && sticky.stickyContentBottom) {\n          sticky.addSticky(sticky.stickyContentBottom);\n        }\n      } else if (!this.contentContainer.contains(sticky.nonStickyContent)) {\n        // Reset sticky if it's not sticky and not in the contentContainer element\n        sticky.resetSticky();\n      }\n    }\n  };\n\n  ScrollablePaneBase.prototype._getScrollbarWidth = function () {\n    var contentContainer = this.contentContainer;\n    return contentContainer ? contentContainer.offsetWidth - contentContainer.clientWidth : 0;\n  };\n\n  ScrollablePaneBase.prototype._getScrollbarHeight = function () {\n    var contentContainer = this.contentContainer;\n    return contentContainer ? contentContainer.offsetHeight - contentContainer.clientHeight : 0;\n  };\n\n  return ScrollablePaneBase;\n}(React.Component);\n\nexport { ScrollablePaneBase };","import { getStyles } from './ScrollablePane.styles';\nimport { ScrollablePaneBase } from './ScrollablePane.base';\nimport { styled } from '../../Utilities';\nexport var ScrollablePane = styled(ScrollablePaneBase, getStyles, undefined, {\n  scope: 'ScrollablePane'\n});","import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef } from '../../Utilities';\nimport { hiddenContentStyle } from '../../Styling';\nimport { ScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport { StickyPositionType } from './Sticky.types';\n\nvar Sticky =\n/** @class */\nfunction (_super) {\n  __extends(Sticky, _super);\n\n  function Sticky(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n    _this._stickyContentTop = React.createRef();\n    _this._stickyContentBottom = React.createRef();\n    _this._nonStickyContent = React.createRef();\n    _this._placeHolder = React.createRef();\n\n    _this.syncScroll = function (container) {\n      var nonStickyContent = _this.nonStickyContent;\n\n      if (nonStickyContent && _this.props.isScrollSynced) {\n        nonStickyContent.scrollLeft = container.scrollLeft;\n      }\n    }; // eslint-disable-next-line deprecation/deprecation\n\n\n    _this._getContext = function () {\n      return _this.context;\n    };\n\n    _this._onScrollEvent = function (container, footerStickyContainer) {\n      if (_this.root && _this.nonStickyContent) {\n        var distanceFromTop = _this._getNonStickyDistanceFromTop(container);\n\n        var isStickyTop = false;\n        var isStickyBottom = false;\n\n        if (_this.canStickyTop) {\n          var distanceToStickTop = distanceFromTop - _this._getStickyDistanceFromTop();\n\n          isStickyTop = distanceToStickTop < container.scrollTop;\n        } // Can sticky bottom if the scrollablePane - total sticky footer height is smaller than the sticky's distance\n        // from the top of the pane\n\n\n        if (_this.canStickyBottom && container.clientHeight - footerStickyContainer.offsetHeight <= distanceFromTop) {\n          isStickyBottom = distanceFromTop - Math.floor(container.scrollTop) >= _this._getStickyDistanceFromTopForFooter(container, footerStickyContainer);\n        }\n\n        if (document.activeElement && _this.nonStickyContent.contains(document.activeElement) && (_this.state.isStickyTop !== isStickyTop || _this.state.isStickyBottom !== isStickyBottom)) {\n          _this._activeElement = document.activeElement;\n        } else {\n          _this._activeElement = undefined;\n        }\n\n        _this.setState({\n          isStickyTop: _this.canStickyTop && isStickyTop,\n          isStickyBottom: isStickyBottom,\n          distanceFromTop: distanceFromTop\n        });\n      }\n    };\n\n    _this._getStickyDistanceFromTop = function () {\n      var distance = 0;\n\n      if (_this.stickyContentTop) {\n        distance = _this.stickyContentTop.offsetTop;\n      }\n\n      return distance;\n    };\n\n    _this._getStickyDistanceFromTopForFooter = function (container, footerStickyVisibleContainer) {\n      var distance = 0;\n\n      if (_this.stickyContentBottom) {\n        distance = container.clientHeight - footerStickyVisibleContainer.offsetHeight + _this.stickyContentBottom.offsetTop;\n      }\n\n      return distance;\n    };\n\n    _this._getNonStickyDistanceFromTop = function (container) {\n      var distance = 0;\n      var currElem = _this.root;\n\n      if (currElem) {\n        while (currElem && currElem.offsetParent !== container) {\n          distance += currElem.offsetTop;\n          currElem = currElem.offsetParent;\n        }\n\n        if (currElem && currElem.offsetParent === container) {\n          distance += currElem.offsetTop;\n        }\n      }\n\n      return distance;\n    };\n\n    initializeComponentRef(_this);\n    _this.state = {\n      isStickyTop: false,\n      isStickyBottom: false,\n      distanceFromTop: undefined\n    };\n    _this._activeElement = undefined;\n    return _this;\n  }\n\n  Object.defineProperty(Sticky.prototype, \"root\", {\n    get: function get() {\n      return this._root.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"placeholder\", {\n    get: function get() {\n      return this._placeHolder.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"stickyContentTop\", {\n    get: function get() {\n      return this._stickyContentTop.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"stickyContentBottom\", {\n    get: function get() {\n      return this._stickyContentBottom.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"nonStickyContent\", {\n    get: function get() {\n      return this._nonStickyContent.current;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"canStickyTop\", {\n    get: function get() {\n      return this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Header;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"canStickyBottom\", {\n    get: function get() {\n      return this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Footer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sticky.prototype.componentDidMount = function () {\n    var scrollablePane = this._getContext().scrollablePane;\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.subscribe(this._onScrollEvent);\n    scrollablePane.addSticky(this);\n  };\n\n  Sticky.prototype.componentWillUnmount = function () {\n    var scrollablePane = this._getContext().scrollablePane;\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.unsubscribe(this._onScrollEvent);\n    scrollablePane.removeSticky(this);\n  };\n\n  Sticky.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var scrollablePane = this._getContext().scrollablePane;\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    var _a = this.state,\n        isStickyBottom = _a.isStickyBottom,\n        isStickyTop = _a.isStickyTop,\n        distanceFromTop = _a.distanceFromTop;\n    var syncScroll = false;\n\n    if (prevState.distanceFromTop !== distanceFromTop) {\n      scrollablePane.sortSticky(this, true\n      /*sortAgain*/\n      );\n      syncScroll = true;\n    }\n\n    if (prevState.isStickyTop !== isStickyTop || prevState.isStickyBottom !== isStickyBottom) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n\n      scrollablePane.updateStickyRefHeights();\n      syncScroll = true;\n    }\n\n    if (syncScroll) {\n      // Sync Sticky scroll position with content container on each update\n      scrollablePane.syncScrollSticky(this);\n    }\n  };\n\n  Sticky.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!this.context.scrollablePane) {\n      return true;\n    }\n\n    var _a = this.state,\n        isStickyTop = _a.isStickyTop,\n        isStickyBottom = _a.isStickyBottom,\n        distanceFromTop = _a.distanceFromTop;\n    return isStickyTop !== nextState.isStickyTop || isStickyBottom !== nextState.isStickyBottom || this.props.stickyPosition !== nextProps.stickyPosition || this.props.children !== nextProps.children || distanceFromTop !== nextState.distanceFromTop || _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentTop) || _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentBottom) || _isOffsetHeightDifferent(this._nonStickyContent, this._placeHolder);\n  };\n\n  Sticky.prototype.render = function () {\n    var _a = this.state,\n        isStickyTop = _a.isStickyTop,\n        isStickyBottom = _a.isStickyBottom;\n    var _b = this.props,\n        stickyClassName = _b.stickyClassName,\n        children = _b.children; // eslint-disable-next-line deprecation/deprecation\n\n    if (!this.context.scrollablePane) {\n      return React.createElement(\"div\", null, this.props.children);\n    }\n\n    return React.createElement(\"div\", {\n      ref: this._root\n    }, this.canStickyTop && React.createElement(\"div\", {\n      ref: this._stickyContentTop,\n      style: {\n        pointerEvents: isStickyTop ? 'auto' : 'none'\n      }\n    }, React.createElement(\"div\", {\n      style: this._getStickyPlaceholderHeight(isStickyTop)\n    })), this.canStickyBottom && React.createElement(\"div\", {\n      ref: this._stickyContentBottom,\n      style: {\n        pointerEvents: isStickyBottom ? 'auto' : 'none'\n      }\n    }, React.createElement(\"div\", {\n      style: this._getStickyPlaceholderHeight(isStickyBottom)\n    })), React.createElement(\"div\", {\n      style: this._getNonStickyPlaceholderHeightAndWidth(),\n      ref: this._placeHolder\n    }, (isStickyTop || isStickyBottom) && React.createElement(\"span\", {\n      style: hiddenContentStyle\n    }, children), React.createElement(\"div\", {\n      ref: this._nonStickyContent,\n      className: isStickyTop || isStickyBottom ? stickyClassName : undefined,\n      style: this._getContentStyles(isStickyTop || isStickyBottom)\n    }, children)));\n  };\n\n  Sticky.prototype.addSticky = function (stickyContent) {\n    if (this.nonStickyContent) {\n      stickyContent.appendChild(this.nonStickyContent);\n    }\n  };\n\n  Sticky.prototype.resetSticky = function () {\n    if (this.nonStickyContent && this.placeholder) {\n      this.placeholder.appendChild(this.nonStickyContent);\n    }\n  };\n\n  Sticky.prototype.setDistanceFromTop = function (container) {\n    var distanceFromTop = this._getNonStickyDistanceFromTop(container);\n\n    this.setState({\n      distanceFromTop: distanceFromTop\n    });\n  };\n\n  Sticky.prototype._getContentStyles = function (isSticky) {\n    return {\n      backgroundColor: this.props.stickyBackgroundColor || this._getBackground(),\n      overflow: isSticky ? 'hidden' : ''\n    };\n  };\n\n  Sticky.prototype._getStickyPlaceholderHeight = function (isSticky) {\n    var height = this.nonStickyContent ? this.nonStickyContent.offsetHeight : 0;\n    return {\n      visibility: isSticky ? 'hidden' : 'visible',\n      height: isSticky ? 0 : height\n    };\n  };\n\n  Sticky.prototype._getNonStickyPlaceholderHeightAndWidth = function () {\n    var _a = this.state,\n        isStickyTop = _a.isStickyTop,\n        isStickyBottom = _a.isStickyBottom;\n\n    if (isStickyTop || isStickyBottom) {\n      var height = 0;\n      var width = 0; // Why is placeholder width needed?\n      // ScrollablePane's content container is reponsible for providing scrollbars depending on content overflow.\n      // - If the overflow is caused by content of sticky component when it is in non-sticky state, the container will\n      //   provide horizontal scrollbar.\n      // - If the component becomes sticky, i.e., when state.isStickyTop || state.isStickyBottom becomes true,\n      //   its actual content is no longer inside the container, so the container will see no need for horizontal\n      //   scrollbar (assuming no other content is causing overflow). The complete content of sticky component will\n      //   not be viewable. So it is necessary to provide a placeholder of a certain width (height is already being set)\n      //   in the container, to get a horizontal scrollbar & be able to view the complete content of sticky component.\n\n      if (this.nonStickyContent && this.nonStickyContent.firstElementChild) {\n        height = this.nonStickyContent.offsetHeight; // What value should be substituted for placeholder width?\n        // Assumptions:\n        //    1. Content inside <Sticky> should always be wrapped in a single div.\n        //        <Sticky><div id={'firstElementChild'}>{intended_content}</div><Sticky/>\n        //    2. -ve padding, margin, etc. are not be used.\n        //    3. scrollWidth of a parent is greater than or equal to max of scrollWidths of its children, and same holds\n        //       for children.\n        // placeholder width should be computed in the best possible way to prevent overscroll/underscroll.\n\n        width = this.nonStickyContent.firstElementChild.scrollWidth + (this.nonStickyContent.firstElementChild.offsetWidth - this.nonStickyContent.firstElementChild.clientWidth);\n      }\n\n      return {\n        height: height,\n        width: width\n      };\n    } else {\n      return {};\n    }\n  }; // Gets background of nearest parent element that has a declared background-color attribute\n\n\n  Sticky.prototype._getBackground = function () {\n    if (!this.root) {\n      return undefined;\n    }\n\n    var curr = this.root;\n\n    while (window.getComputedStyle(curr).getPropertyValue('background-color') === 'rgba(0, 0, 0, 0)' || window.getComputedStyle(curr).getPropertyValue('background-color') === 'transparent') {\n      if (curr.tagName === 'HTML') {\n        // Fallback color if no element has a declared background-color attribute\n        return undefined;\n      }\n\n      if (curr.parentElement) {\n        curr = curr.parentElement;\n      }\n    }\n\n    return window.getComputedStyle(curr).getPropertyValue('background-color');\n  };\n\n  Sticky.defaultProps = {\n    stickyPosition: StickyPositionType.Both,\n    isScrollSynced: true\n  };\n  Sticky.contextType = ScrollablePaneContext;\n  return Sticky;\n}(React.Component);\n\nexport { Sticky };\n\nfunction _isOffsetHeightDifferent(a, b) {\n  return a && b && a.current && b.current && a.current.offsetHeight !== b.current.offsetHeight;\n}","import * as React from 'react';\nimport { TRIALS } from '@static/datamodel';\nimport { formatAccuracy } from '@static/function';\n\n// oview page table: default metric column render\ninterface DefaultMetricProps {\n    trialId: string;\n}\n\nclass DefaultMetric extends React.Component<DefaultMetricProps, {}> {\n    constructor(props: DefaultMetricProps) {\n        super(props);\n    }\n\n    render(): React.ReactNode {\n        const accuracy = TRIALS.getTrial(this.props.trialId).accuracy;\n        return <div className='succeed-padding'>{accuracy !== undefined ? formatAccuracy(accuracy) : '--'}</div>;\n    }\n}\n\nexport default DefaultMetric;\n","import * as React from 'react';\nimport {\n    Stack,\n    DetailsList,\n    IDetailsListProps,\n    IColumn,\n    Icon,\n    DetailsRow,\n    IRenderFunction,\n    IDetailsHeaderProps,\n    Sticky,\n    StickyPositionType,\n    ScrollablePane,\n    ScrollbarVisibility\n} from '@fluentui/react';\nimport DefaultMetric from './DefaultMetric';\nimport OpenRow from '@components/common/OpenRow';\nimport CopyButton from '@components/common/CopyButton';\nimport { convertDuration, copyAndSort } from '@static/function';\nimport { TRIALS } from '@static/datamodel';\nimport { SortInfo } from '@static/interface';\nimport { DETAILTABS } from '@components/nav/slideNav/NNItabs';\nimport '@style/experiment/overview/succTable.scss';\nimport '@style/common/trialStatus.css';\nimport '@style/openRow.scss';\n\ninterface SuccessTableProps {\n    trialIds: string[];\n    updateOverviewPage: () => void;\n    expandRowIDs: Set<string>;\n    changeExpandRowIDs: Function;\n}\n\ninterface SuccessTableState {\n    columns: IColumn[];\n    source: Array<any>;\n    sortInfo: SortInfo;\n}\n\nclass SuccessTable extends React.Component<SuccessTableProps, SuccessTableState> {\n    constructor(props: SuccessTableProps) {\n        super(props);\n        this.state = {\n            columns: this.columns,\n            source: TRIALS.table(this.props.trialIds),\n            sortInfo: { field: '', isDescend: false }\n        };\n    }\n\n    componentDidUpdate(prevProps: SuccessTableProps): void {\n        if (this.props.trialIds !== prevProps.trialIds) {\n            const { trialIds } = this.props;\n            this.setState(() => ({ source: TRIALS.table(trialIds) }));\n        }\n    }\n\n    render(): React.ReactNode {\n        const { columns, source, sortInfo } = this.state;\n        const keepSortedSource = copyAndSort(source, sortInfo.field, sortInfo.isDescend);\n        const isNoneData = source.length === 0 ? true : false;\n\n        return (\n            <div id='succTable'>\n                <ScrollablePane className='scrollPanel' scrollbarVisibility={ScrollbarVisibility.auto}>\n                    <DetailsList\n                        columns={columns}\n                        items={keepSortedSource}\n                        setKey='set'\n                        compact={true}\n                        onRenderRow={this.onRenderRow}\n                        onRenderDetailsHeader={this.onRenderDetailsHeader}\n                        selectionMode={0} // close selector function\n                        className='succTable'\n                    />\n                </ScrollablePane>\n                {isNoneData && <div className='succTable-tooltip'>{this.tooltipStr}</div>}\n            </div>\n        );\n    }\n\n    private onColumnClick = (_ev: React.MouseEvent<HTMLElement>, getColumn: IColumn): void => {\n        const { columns, source } = this.state;\n        const newColumns: IColumn[] = columns.slice();\n        const currColumn: IColumn = newColumns.filter(item => getColumn.key === item.key)[0];\n        newColumns.forEach((newCol: IColumn) => {\n            if (newCol === currColumn) {\n                currColumn.isSortedDescending = !currColumn.isSortedDescending;\n                currColumn.isSorted = true;\n            } else {\n                newCol.isSorted = false;\n                newCol.isSortedDescending = true;\n            }\n        });\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const newItems = copyAndSort(source, currColumn.fieldName!, currColumn.isSortedDescending);\n        this.setState({\n            columns: newColumns,\n            source: newItems,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            sortInfo: { field: currColumn.fieldName!, isDescend: currColumn.isSortedDescending }\n        });\n    };\n\n    private tooltipStr = (\n        <React.Fragment>\n            The experiment is running, please wait for the final metric patiently. You could also find status of trial\n            job with <span>{DETAILTABS}</span> button.\n        </React.Fragment>\n    );\n\n    private columns: IColumn[] = [\n        {\n            key: '_expand',\n            name: '',\n            onRender: (item: any): any => (\n                <Icon\n                    aria-hidden={true}\n                    iconName='ChevronRight'\n                    styles={{\n                        root: {\n                            transition: 'all 0.2s',\n                            transform: `rotate(${this.props.expandRowIDs.has(item.id) ? 90 : 0}deg)`\n                        }\n                    }}\n                    className='cursor'\n                    onClick={this.expandTrialId.bind(this, Event, item.id)}\n                />\n            ),\n            fieldName: 'expand',\n            isResizable: false,\n            minWidth: 20,\n            maxWidth: 20\n        },\n        {\n            name: 'Trial No.',\n            key: 'sequenceId',\n            fieldName: 'sequenceId', // required!\n            minWidth: 60,\n            maxWidth: 80,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <div className='succeed-padding'>{item.sequenceId}</div>\n        },\n        {\n            name: 'ID',\n            key: 'id',\n            fieldName: 'id',\n            minWidth: 90,\n            maxWidth: 100,\n            isResizable: true,\n            className: 'tableHead leftTitle',\n            data: 'string',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => (\n                <Stack horizontal className='idCopy'>\n                    <div className='succeed-padding'>{item.id}</div>\n                    <CopyButton value={item.id} />\n                </Stack>\n            )\n        },\n        {\n            name: 'Duration',\n            key: 'duration',\n            minWidth: 70,\n            maxWidth: 120,\n            isResizable: true,\n            fieldName: 'duration',\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => (\n                <div className='durationsty succeed-padding'>\n                    <div>{convertDuration(item.duration)}</div>\n                </div>\n            )\n        },\n        {\n            name: 'Status',\n            key: 'status',\n            minWidth: 88,\n            maxWidth: 120,\n            isResizable: true,\n            fieldName: 'status',\n            onRender: (item: any): React.ReactNode => (\n                <div className={`${item.status} commonStyle succeed-padding`}>{item.status}</div>\n            )\n        },\n        {\n            name: 'Default metric',\n            key: 'accuracy',\n            fieldName: 'accuracy',\n            minWidth: 100,\n            maxWidth: 166,\n            isResizable: true,\n            data: 'number',\n            onColumnClick: this.onColumnClick,\n            onRender: (item: any): React.ReactNode => <DefaultMetric trialId={item.id} />\n        }\n    ];\n\n    private onRenderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (props, defaultRender) => {\n        if (!props) {\n            return null;\n        }\n        return (\n            <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced>\n                {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    defaultRender!({\n                        ...props\n                    })\n                }\n            </Sticky>\n        );\n    };\n\n    private onRenderRow: IDetailsListProps['onRenderRow'] = props => {\n        const { expandRowIDs } = this.props;\n        if (props) {\n            return (\n                <div>\n                    <div>\n                        <DetailsRow {...props} />\n                    </div>\n                    {Array.from(expandRowIDs).map(\n                        item => item === props.item.id && <OpenRow key={item} trialId={item} />\n                    )}\n                </div>\n            );\n        }\n        return null;\n    };\n\n    private expandTrialId = (_event: any, id: string): void => {\n        const { updateOverviewPage, changeExpandRowIDs } = this.props;\n        changeExpandRowIDs(id);\n        updateOverviewPage();\n    };\n}\n\nexport default SuccessTable;\n","import * as React from 'react';\nimport { getId } from '@uifabric/utilities/lib/getId';\n/**\n * Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).\n *\n * @param prefix - Optional prefix for the ID\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */\n\nexport function useId(prefix, providedId) {\n  // getId should only be called once since it updates the global constant for the next ID value.\n  // (While an extra update isn't likely to cause problems in practice, it's better to avoid it.)\n  var ref = React.useRef(providedId);\n\n  if (!ref.current) {\n    ref.current = getId(prefix);\n  }\n\n  return ref.current;\n}","import React, { useState, useCallback } from 'react';\nimport { Stack, Callout, Link, IconButton } from '@fluentui/react';\nimport { useId } from '@uifabric/react-hooks';\nimport { EXPERIMENT } from '@static/datamodel';\nimport { formatTimestamp } from '@static/function';\nimport LogPanel from '@components/nav/slideNav/LogPanel';\nimport { BestMetricContext } from '../Overview';\nimport { styles } from './basicInfoStyles';\nimport '@style/common/experimentStatusColor.scss';\nimport '@style/experiment/overview/basic.scss';\n\nexport const BasicInfo = (): any => {\n    const labelId: string = useId('callout-label');\n    const descriptionId: string = useId('callout-description');\n    const ref = React.createRef<HTMLDivElement>();\n    const [isCalloutVisible, setCalloutVisible] = useState(false);\n    const [isShowLogDrawer, setShowLogDrawer] = useState(false);\n    const onDismiss = useCallback(() => setCalloutVisible(false), []);\n    const showCallout = useCallback(() => setCalloutVisible(true), []);\n\n    const closeLogDrawer = useCallback(() => setShowLogDrawer(false), []);\n    const ShowLogDrawer = useCallback(() => setShowLogDrawer(true), []);\n\n    return (\n        <div>\n            <Stack horizontal horizontalAlign='space-between' className='marginTop'>\n                <div className='basic'>\n                    <p>Name</p>\n                    <div className='ellipsis'>{EXPERIMENT.profile.params.experimentName || '--'}</div>\n                    <p className='marginTop'>ID</p>\n                    <div className='ellipsis'>{EXPERIMENT.profile.id}</div>\n                </div>\n                <div className='basic'>\n                    <p>Status</p>\n                    <Stack horizontal className='status'>\n                        <span className={`${EXPERIMENT.status} status-text`}>{EXPERIMENT.status}</span>\n                        {EXPERIMENT.status === 'ERROR' ? (\n                            <div>\n                                <div className={`${styles.buttonArea} error-info-icon`} ref={ref}>\n                                    <IconButton\n                                        iconProps={{ iconName: 'info' }}\n                                        onClick={isCalloutVisible ? onDismiss : showCallout}\n                                    />\n                                </div>\n                                {isCalloutVisible && (\n                                    <Callout\n                                        className={styles.callout}\n                                        ariaLabelledBy={labelId}\n                                        ariaDescribedBy={descriptionId}\n                                        role='alertdialog'\n                                        gapSpace={0}\n                                        target={ref}\n                                        onDismiss={onDismiss}\n                                        setInitialFocus={true}\n                                    >\n                                        <div className={styles.header}>\n                                            <p className={`${styles.title} color`} id={labelId}>\n                                                Error\n                                            </p>\n                                        </div>\n                                        <div className={styles.inner}>\n                                            <p className={`${styles.subtext} color`} id={descriptionId}>\n                                                {EXPERIMENT.error}\n                                            </p>\n                                            <div className={styles.actions}>\n                                                <Link className={styles.link} onClick={ShowLogDrawer}>\n                                                    Learn about\n                                                </Link>\n                                            </div>\n                                        </div>\n                                    </Callout>\n                                )}\n                            </div>\n                        ) : null}\n                    </Stack>\n                    <BestMetricContext.Consumer>\n                        {(value): React.ReactNode => (\n                            <Stack className='bestMetric'>\n                                <p className='marginTop'>Best metric</p>\n                                <div className={EXPERIMENT.status}>\n                                    {isNaN(value.bestAccuracy) ? 'N/A' : value.bestAccuracy.toFixed(6)}\n                                </div>\n                            </Stack>\n                        )}\n                    </BestMetricContext.Consumer>\n                </div>\n                <div className='basic'>\n                    <p>Start time</p>\n                    <div className='ellipsis'>{formatTimestamp(EXPERIMENT.profile.startTime)}</div>\n                    <p className='marginTop'>End time</p>\n                    <div className='ellipsis'>{formatTimestamp(EXPERIMENT.profile.endTime)}</div>\n                </div>\n            </Stack>\n            {/* learn about click -> default active key is dispatcher. */}\n            {isShowLogDrawer ? <LogPanel closePanel={closeLogDrawer} activeTab='dispatcher' /> : null}\n        </div>\n    );\n};\n","import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, getId } from '../../Utilities';\nvar getClassNames = classNamesFunction(); // if the percentComplete is near 0, don't animate it.\n// This prevents animations on reset to 0 scenarios\n\nvar ZERO_THRESHOLD = 0.01;\n/**\n * ProgressIndicator with no default styles.\n * [Use the `styles` API to add your own styles.](https://github.com/microsoft/fluentui/wiki/Styling)\n */\n\nvar ProgressIndicatorBase =\n/** @class */\nfunction (_super) {\n  __extends(ProgressIndicatorBase, _super);\n\n  function ProgressIndicatorBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onRenderProgress = function (props) {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = _this.props,\n          ariaValueText = _a.ariaValueText,\n          barHeight = _a.barHeight,\n          className = _a.className,\n          description = _a.description,\n          _b = _a.label,\n          label = _b === void 0 ? _this.props.title : _b,\n          styles = _a.styles,\n          theme = _a.theme;\n      var percentComplete = typeof _this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, _this.props.percentComplete * 100)) : undefined;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        className: className,\n        barHeight: barHeight,\n        indeterminate: percentComplete === undefined ? true : false\n      });\n      var progressBarStyles = {\n        width: percentComplete !== undefined ? percentComplete + '%' : undefined,\n        transition: percentComplete !== undefined && percentComplete < ZERO_THRESHOLD ? 'none' : undefined\n      };\n      var ariaValueMin = percentComplete !== undefined ? 0 : undefined;\n      var ariaValueMax = percentComplete !== undefined ? 100 : undefined;\n      var ariaValueNow = percentComplete !== undefined ? Math.floor(percentComplete) : undefined;\n      return React.createElement(\"div\", {\n        className: classNames.itemProgress\n      }, React.createElement(\"div\", {\n        className: classNames.progressTrack\n      }), React.createElement(\"div\", {\n        className: classNames.progressBar,\n        style: progressBarStyles,\n        role: \"progressbar\",\n        \"aria-describedby\": description ? _this._descriptionId : undefined,\n        \"aria-labelledby\": label ? _this._labelId : undefined,\n        \"aria-valuemin\": ariaValueMin,\n        \"aria-valuemax\": ariaValueMax,\n        \"aria-valuenow\": ariaValueNow,\n        \"aria-valuetext\": ariaValueText\n      }));\n    };\n\n    var id = getId('progress-indicator');\n    _this._labelId = id + '-label';\n    _this._descriptionId = id + '-description';\n    return _this;\n  }\n\n  ProgressIndicatorBase.prototype.render = function () {\n    var _a = this.props,\n        barHeight = _a.barHeight,\n        className = _a.className,\n        // eslint-disable-next-line deprecation/deprecation\n    _b = _a.label,\n        // eslint-disable-next-line deprecation/deprecation\n    label = _b === void 0 ? this.props.title : _b,\n        // Fall back to deprecated value.\n    description = _a.description,\n        styles = _a.styles,\n        theme = _a.theme,\n        progressHidden = _a.progressHidden,\n        _c = _a.onRenderProgress,\n        onRenderProgress = _c === void 0 ? this._onRenderProgress : _c;\n    var percentComplete = typeof this.props.percentComplete === 'number' ? Math.min(100, Math.max(0, this.props.percentComplete * 100)) : undefined;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      barHeight: barHeight,\n      indeterminate: percentComplete === undefined ? true : false\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, label ? React.createElement(\"div\", {\n      id: this._labelId,\n      className: classNames.itemName\n    }, label) : null, !progressHidden ? onRenderProgress(__assign(__assign({}, this.props), {\n      percentComplete: percentComplete\n    }), this._onRenderProgress) : null, description ? React.createElement(\"div\", {\n      id: this._descriptionId,\n      className: classNames.itemDescription\n    }, description) : null);\n  };\n\n  ProgressIndicatorBase.defaultProps = {\n    label: '',\n    description: '',\n    width: 180\n  };\n  return ProgressIndicatorBase;\n}(React.Component);\n\nexport { ProgressIndicatorBase };","import { __assign } from \"tslib\";\nimport { HighContrastSelector, keyframes, noWrap, getGlobalClassNames, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { getRTL, memoizeFunction } from '../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-ProgressIndicator',\n  itemName: 'ms-ProgressIndicator-itemName',\n  itemDescription: 'ms-ProgressIndicator-itemDescription',\n  itemProgress: 'ms-ProgressIndicator-itemProgress',\n  progressTrack: 'ms-ProgressIndicator-progressTrack',\n  progressBar: 'ms-ProgressIndicator-progressBar'\n};\nvar IndeterminateProgress = memoizeFunction(function () {\n  return keyframes({\n    '0%': {\n      left: '-30%'\n    },\n    '100%': {\n      left: '100%'\n    }\n  });\n});\nvar IndeterminateProgressRTL = memoizeFunction(function () {\n  return keyframes({\n    '100%': {\n      right: '-30%'\n    },\n    '0%': {\n      right: '100%'\n    }\n  });\n});\nexport var getStyles = function getStyles(props) {\n  var _a, _b, _c;\n\n  var isRTL = getRTL(props.theme);\n  var className = props.className,\n      indeterminate = props.indeterminate,\n      theme = props.theme,\n      _d = props.barHeight,\n      barHeight = _d === void 0 ? 2 : _d;\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors,\n      fonts = theme.fonts;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var marginBetweenText = 8;\n  var textHeight = 18;\n  var progressTrackColor = palette.neutralLight;\n  return {\n    root: [classNames.root, fonts.medium, className],\n    itemName: [classNames.itemName, noWrap, {\n      color: semanticColors.bodyText,\n      paddingTop: marginBetweenText / 2,\n      lineHeight: textHeight + 2\n    }],\n    itemDescription: [classNames.itemDescription, {\n      color: semanticColors.bodySubtext,\n      fontSize: fonts.small.fontSize,\n      lineHeight: textHeight\n    }],\n    itemProgress: [classNames.itemProgress, {\n      position: 'relative',\n      overflow: 'hidden',\n      height: barHeight,\n      padding: marginBetweenText + \"px 0\"\n    }],\n    progressTrack: [classNames.progressTrack, {\n      position: 'absolute',\n      width: '100%',\n      height: barHeight,\n      backgroundColor: progressTrackColor,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        borderBottom: '1px solid WindowText'\n      }, _a)\n    }],\n    progressBar: [{\n      backgroundColor: palette.themePrimary,\n      height: barHeight,\n      position: 'absolute',\n      transition: 'width .3s ease',\n      width: 0,\n      selectors: (_b = {}, _b[HighContrastSelector] = __assign({\n        backgroundColor: 'highlight'\n      }, getHighContrastNoAdjustStyle()), _b)\n    }, indeterminate ? {\n      position: 'absolute',\n      minWidth: '33%',\n      background: \"linear-gradient(to right, \" + progressTrackColor + \" 0%, \" + (palette.themePrimary + \" 50%, \" + progressTrackColor + \" 100%)\"),\n      animation: (isRTL ? IndeterminateProgressRTL() : IndeterminateProgress()) + \" 3s infinite\",\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        background: \"highlight\"\n      }, _c)\n    } : {\n      transition: 'width .15s linear'\n    }, classNames.progressBar]\n  };\n};","import { styled } from '../../Utilities';\nimport { ProgressIndicatorBase } from './ProgressIndicator.base';\nimport { getStyles } from './ProgressIndicator.styles';\n/**\n * ProgressIndicator description\n */\n\nexport var ProgressIndicator = styled(ProgressIndicatorBase, getStyles, undefined, {\n  scope: 'ProgressIndicator'\n});","import React from 'react';\n/***\n * const CONTROLTYPE = ['MAX_EXEC_DURATION', 'MAX_TRIAL_NUM', 'TRIAL_CONCURRENCY', 'SEARCH_SPACE'];\n * [0], 'MAX_EXEC_DURATION', params.maxExecDuration\n * [1], 'MAX_TRIAL_NUM', params.maxTrialNum\n * [2], 'TRIAL_CONCURRENCY', params.trialConcurrency\n */\nexport const EditExpeParamContext = React.createContext({\n    editType: '',\n    field: '',\n    title: '',\n    maxExecDuration: '',\n    maxTrialNum: 0,\n    trialConcurrency: 0,\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    updateOverviewPage: (): void => {}\n});\n","const itemStyle1: React.CSSProperties = {\n    width: '75%'\n};\nconst itemStyleSucceed: React.CSSProperties = {\n    width: '28%'\n};\n\nconst itemStyle2: React.CSSProperties = {\n    height: 38\n};\n\n// top trials entries\nconst entriesOption = [\n    { key: '10', text: '10' },\n    { key: '20', text: '20' },\n    { key: '30', text: '30' },\n    { key: '50', text: '40' },\n    { key: '100', text: '100' }\n];\n\nconst durationUnit = [\n    { key: 'm', text: 'min' },\n    { key: 'h', text: 'hour' },\n    { key: 'd', text: 'day' }\n];\n\nexport { itemStyle1, itemStyleSucceed, itemStyle2, entriesOption, durationUnit };\n","import React, { useState, useCallback, useContext } from 'react';\nimport axios from 'axios';\nimport { Dropdown } from '@fluentui/react';\nimport { AppContext } from '@/App';\nimport { MANAGER_IP, MAX_TRIAL_NUMBERS } from '@static/const';\nimport { EXPERIMENT } from '@static/datamodel';\nimport { toSeconds } from '@static/experimentConfig';\nimport { EditExpeParamContext } from './context';\nimport { durationUnit } from '../overviewConst';\nimport { Edit, CheckMark, Cancel } from '@components/fluent/Icon';\nimport MessageInfo from '@components/common/MessageInfo';\nimport '@style/experiment/overview/count.scss';\n\nconst DurationInputRef = React.createRef<HTMLInputElement>();\n\nexport const EditExperimentParam = (): any => {\n    const [isShowPencil, setShowPencil] = useState(true);\n    const [isShowSucceedInfo, setShowSucceedInfo] = useState(false);\n    const [typeInfo, setTypeInfo] = useState('');\n    const [info, setInfo] = useState('');\n    const showPencil = useCallback(() => {\n        setShowPencil(true);\n    }, []);\n    const hidePencil = useCallback(() => {\n        setShowPencil(false);\n    }, []);\n    const showSucceedInfo = useCallback(() => setShowSucceedInfo(true), []);\n    const hideSucceedInfo = useCallback(() => {\n        setShowSucceedInfo(false);\n    }, []);\n    const { title, field, editType, maxExecDuration, maxTrialNum, trialConcurrency, updateOverviewPage } =\n        useContext(EditExpeParamContext);\n    const originMaxDurationStr = EXPERIMENT.profile.params.maxExperimentDuration;\n    const { maxDurationUnit, changeMaxDurationUnit } = useContext(AppContext);\n    const [unit, setUnit] = useState(maxDurationUnit);\n    let defaultVal = '';\n    let editVal = '';\n    if (title === 'Max duration') {\n        defaultVal = maxExecDuration;\n        editVal = maxExecDuration;\n    } else if (title === MAX_TRIAL_NUMBERS) {\n        defaultVal = maxTrialNum.toString();\n        editVal = maxTrialNum.toString();\n    } else {\n        defaultVal = trialConcurrency.toString();\n        editVal = trialConcurrency.toString();\n    }\n    const [editInputVal, setEditValInput] = useState(editVal);\n\n    function setInputVal(event: any): void {\n        setEditValInput(event.target.value);\n    }\n\n    function showMessageInfo(info: string, typeInfo: string): any {\n        setInfo(info);\n        setTypeInfo(typeInfo);\n        showSucceedInfo();\n        setTimeout(hideSucceedInfo, 2000);\n    }\n\n    function updateUnit(event: React.FormEvent<HTMLDivElement>, item: any): void {\n        if (item !== undefined) {\n            setUnit(item.key);\n        }\n    }\n\n    function promptErrorMessage(mess: string, type: string, value: string): void {\n        showMessageInfo(mess, type);\n        setEditValInput(value);\n    }\n\n    async function confirmEdit(): Promise<void> {\n        const isMaxDuration = title === 'Max duration';\n        const newProfile = Object.assign({}, EXPERIMENT.profile);\n        let beforeParam = '';\n        if (isMaxDuration) {\n            if (!editInputVal.match(/^\\d+(?=\\.{0,1}\\d+$|$)/)) {\n                promptErrorMessage('Please enter a number!', 'error', defaultVal);\n                return;\n            }\n            if (toSeconds(`${editInputVal}${unit}`) < EXPERIMENT.profile.execDuration) {\n                // maxDuration should > current run time(execDuration)\n                promptErrorMessage(\n                    'Please input a valid value. (Current duration is more than the number you input.)',\n                    'error',\n                    defaultVal\n                );\n                return;\n            }\n        } else {\n            if (!editInputVal.match(/^[1-9]\\d*$/)) {\n                promptErrorMessage('Please enter a positive integer!', 'error', defaultVal);\n                return;\n            }\n        }\n        if (isMaxDuration) {\n            beforeParam = maxExecDuration;\n        } else if (title === MAX_TRIAL_NUMBERS) {\n            beforeParam = maxTrialNum.toString();\n        } else {\n            beforeParam = trialConcurrency.toString();\n        }\n\n        if (editInputVal === beforeParam) {\n            if (isMaxDuration) {\n                if (maxDurationUnit === unit) {\n                    showMessageInfo(`Trial ${field} has not changed`, 'error');\n                    return;\n                }\n            } else {\n                showMessageInfo(`Trial ${field} has not changed`, 'error');\n                return;\n            }\n        }\n        if (isMaxDuration) {\n            const maxDura = JSON.parse(editInputVal);\n            newProfile.params[field] = `${maxDura}${unit}`;\n        } else {\n            newProfile.params[field] = parseInt(editInputVal, 10);\n        }\n        // rest api, modify trial concurrency value\n        try {\n            const res = await axios.put(`${MANAGER_IP}/experiment`, newProfile, {\n                params: { update_type: editType }\n            });\n            if (res.status === 200) {\n                if (isMaxDuration) {\n                    changeMaxDurationUnit(unit);\n                }\n                showMessageInfo(`Successfully updated experiment's ${field}`, 'success');\n                updateOverviewPage();\n            }\n        } catch (error: any) {\n            if (error.response && error.response.data.error) {\n                showMessageInfo(`Failed to update trial ${field}\\n${error.response.data.error}`, 'error');\n            } else if (error.response) {\n                showMessageInfo(`Failed to update trial ${field}\\nServer responsed ${error.response.status}`, 'error');\n            } else if (error.message) {\n                showMessageInfo(`Failed to update trial ${field}\\n${error.message}`, 'error');\n            } else {\n                showMessageInfo(`Failed to update trial ${field}\\nUnknown error`, 'error');\n            }\n            setEditValInput(defaultVal);\n            // confirm trial config panel val\n            if (isMaxDuration) {\n                newProfile.params[field] = originMaxDurationStr;\n            } else {\n                newProfile.params[field] = beforeParam;\n            }\n        }\n        showPencil();\n    }\n\n    function cancelEdit(): void {\n        setEditValInput(defaultVal);\n        showPencil();\n        setUnit(maxDurationUnit);\n    }\n\n    function convertUnit(val: string): string {\n        if (val === 'd') {\n            return 'day';\n        } else if (val === 'h') {\n            return 'hour';\n        } else if (val === 'm') {\n            return 'min';\n        } else {\n            return val;\n        }\n    }\n\n    return (\n        <AppContext.Consumer>\n            {(values): React.ReactNode => {\n                return (\n                    <EditExpeParamContext.Consumer>\n                        {(value): React.ReactNode => {\n                            let editClassName = '';\n                            if (value.field === 'maxExperimentDuration') {\n                                editClassName = isShowPencil ? 'noEditDuration' : 'editDuration';\n                            }\n                            return (\n                                <React.Fragment>\n                                    <div className={`${editClassName} editparam`}>\n                                        <div className='title'>{value.title}</div>\n                                        <input\n                                            className={`${value.field} editparam-Input`}\n                                            ref={DurationInputRef}\n                                            disabled={isShowPencil ? true : false}\n                                            value={editInputVal}\n                                            onChange={setInputVal}\n                                        />\n                                        {isShowPencil && title === 'Max duration' && (\n                                            <span>{convertUnit(values.maxDurationUnit)}</span>\n                                        )}\n                                        {!isShowPencil && title === 'Max duration' && (\n                                            <Dropdown\n                                                selectedKey={unit}\n                                                options={durationUnit}\n                                                className='editparam-dropdown'\n                                                onChange={updateUnit}\n                                            />\n                                        )}\n                                        {isShowPencil && (\n                                            <span className='edit cursor' onClick={hidePencil}>\n                                                {Edit}\n                                            </span>\n                                        )}\n                                        {!isShowPencil && (\n                                            <span className='series'>\n                                                <span className='confirm cursor' onClick={confirmEdit}>\n                                                    {CheckMark}\n                                                </span>\n                                                <span className='cancel cursor' onClick={cancelEdit}>\n                                                    {Cancel}\n                                                </span>\n                                            </span>\n                                        )}\n\n                                        {isShowSucceedInfo && (\n                                            <MessageInfo className='info' typeInfo={typeInfo} info={info} />\n                                        )}\n                                    </div>\n                                </React.Fragment>\n                            );\n                        }}\n                    </EditExpeParamContext.Consumer>\n                );\n            }}\n        </AppContext.Consumer>\n    );\n};\n","import React from 'react';\n\nexport const ExpDurationContext = React.createContext({\n    maxExecDuration: 0,\n    execDuration: 0,\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    updateOverviewPage: (): void => {},\n    maxDurationUnit: 'm',\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    changeMaxDurationUnit: (_val: 'd' | 'h' | 'm'): void => {}\n});\n","const leftProgress: React.CSSProperties = {\n    width: '60%',\n    position: 'relative'\n};\nconst rightEidtParam: React.CSSProperties = {\n    paddingLeft: '9%',\n    boxSizing: 'border-box'\n};\n\nconst progressHeight = 8;\n\nexport { leftProgress, rightEidtParam, progressHeight };\n","import React from 'react';\nimport { Stack, ProgressIndicator, TooltipHost, DirectionalHint } from '@fluentui/react';\nimport { EXPERIMENT } from '@static/datamodel';\nimport { CONTROLTYPE, TOOLTIP_BACKGROUND_COLOR } from '@static/const';\nimport { convertDuration, convertTimeAsUnit } from '@static/function';\nimport { EditExperimentParam } from './EditExperimentParam';\nimport { ExpDurationContext } from './ExpDurationContext';\nimport { EditExpeParamContext } from './context';\nimport { leftProgress, rightEidtParam, progressHeight } from './commonStyle';\nimport '@style/experiment/overview/count.scss';\n\nexport const ExpDuration = (): any => (\n    <ExpDurationContext.Consumer>\n        {(value): React.ReactNode => {\n            const { maxExecDuration, execDuration, maxDurationUnit, updateOverviewPage } = value;\n            const tooltip = maxExecDuration - execDuration;\n            const percent = execDuration / maxExecDuration;\n            const execDurationStr = convertDuration(execDuration);\n            const maxExecDurationStr = convertTimeAsUnit(maxDurationUnit, maxExecDuration).toString();\n            return (\n                <Stack horizontal className='ExpDuration'>\n                    <div style={leftProgress}>\n                        <TooltipHost\n                            content={`${convertDuration(tooltip)} remaining`}\n                            directionalHint={DirectionalHint.bottomCenter}\n                            tooltipProps={{\n                                calloutProps: {\n                                    styles: {\n                                        beak: { background: TOOLTIP_BACKGROUND_COLOR },\n                                        beakCurtain: { background: TOOLTIP_BACKGROUND_COLOR },\n                                        calloutMain: { background: TOOLTIP_BACKGROUND_COLOR }\n                                    }\n                                }\n                            }}\n                        >\n                            <ProgressIndicator\n                                className={EXPERIMENT.status}\n                                percentComplete={percent}\n                                barHeight={progressHeight}\n                            />\n                        </TooltipHost>\n                        {/* execDuration / maxDuration: 20min / 1h */}\n                        <div className='exp-progress'>\n                            <span className={`${EXPERIMENT.status} bold`}>{execDurationStr}</span>\n                            <span className='joiner'>/</span>\n                            <span>{`${maxExecDurationStr} ${maxDurationUnit}`}</span>\n                        </div>\n                    </div>\n                    <div style={rightEidtParam}>\n                        <EditExpeParamContext.Provider\n                            value={{\n                                editType: CONTROLTYPE[0],\n                                field: 'maxExperimentDuration',\n                                title: 'Max duration',\n                                maxExecDuration: maxExecDurationStr,\n                                maxTrialNum: EXPERIMENT.maxTrialNumber,\n                                trialConcurrency: EXPERIMENT.profile.params.trialConcurrency,\n                                updateOverviewPage\n                            }}\n                        >\n                            <EditExperimentParam />\n                        </EditExpeParamContext.Provider>\n                    </div>\n                </Stack>\n            );\n        }}\n    </ExpDurationContext.Consumer>\n);\n","import * as React from 'react';\nimport { Stack, TooltipHost, ProgressIndicator, DirectionalHint, IStackTokens } from '@fluentui/react';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport { CONTROLTYPE, TOOLTIP_BACKGROUND_COLOR, MAX_TRIAL_NUMBERS } from '@static/const';\nimport { EditExperimentParam } from './EditExperimentParam';\nimport { EditExpeParamContext } from './context';\nimport { ExpDurationContext } from './ExpDurationContext';\nimport { leftProgress, rightEidtParam, progressHeight } from './commonStyle';\n\nconst line1Tokens: IStackTokens = {\n    childrenGap: 60\n};\nconst line2Tokens: IStackTokens = {\n    childrenGap: 80\n};\n\nexport const TrialCount = (): any => {\n    const count = TRIALS.countStatus();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const stoppedCount = count.get('USER_CANCELED')! + count.get('SYS_CANCELED')! + count.get('EARLY_STOPPED')!;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const bar2 = count.get('RUNNING')! + count.get('SUCCEEDED')! + count.get('FAILED')! + stoppedCount;\n    const maxTrialNum = EXPERIMENT.maxTrialNumber;\n    // support type [0, 1], not 98%\n    const bar2Percent = bar2 / maxTrialNum;\n    return (\n        <ExpDurationContext.Consumer>\n            {(value): React.ReactNode => {\n                const { updateOverviewPage } = value;\n                return (\n                    <React.Fragment>\n                        <Stack horizontal className='ExpDuration'>\n                            <div style={leftProgress}>\n                                <TooltipHost\n                                    content={`${bar2.toString()} trials`}\n                                    directionalHint={DirectionalHint.bottomCenter}\n                                    tooltipProps={{\n                                        calloutProps: {\n                                            styles: {\n                                                beak: { background: TOOLTIP_BACKGROUND_COLOR },\n                                                beakCurtain: { background: TOOLTIP_BACKGROUND_COLOR },\n                                                calloutMain: { background: TOOLTIP_BACKGROUND_COLOR }\n                                            }\n                                        }\n                                    }}\n                                >\n                                    <ProgressIndicator\n                                        className={EXPERIMENT.status}\n                                        percentComplete={bar2Percent}\n                                        barHeight={progressHeight}\n                                    />\n                                </TooltipHost>\n                                <div className='exp-progress'>\n                                    <span className={`${EXPERIMENT.status} bold`}>{bar2}</span>\n                                    <span className='joiner'>/</span>\n                                    <span>{maxTrialNum}</span>\n                                </div>\n                            </div>\n                        </Stack>\n                        <Stack horizontal className='marginTop'>\n                            <div style={leftProgress}>\n                                <Stack horizontal className='status-count' tokens={line1Tokens}>\n                                    <div>\n                                        <span>Running</span>\n                                        <p>{count.get('RUNNING')}</p>\n                                    </div>\n                                    <div>\n                                        <span>Succeeded</span>\n                                        <p>{count.get('SUCCEEDED')}</p>\n                                    </div>\n                                    <div>\n                                        <span>Stopped</span>\n                                        <p>{stoppedCount}</p>\n                                    </div>\n                                </Stack>\n                                <Stack horizontal className='status-count marginTop' tokens={line2Tokens}>\n                                    <div>\n                                        <span>Failed</span>\n                                        <p>{count.get('FAILED')}</p>\n                                    </div>\n                                    <div>\n                                        <span>Waiting</span>\n                                        <p>{count.get('WAITING')}</p>\n                                    </div>\n                                </Stack>\n                            </div>\n\n                            <div style={rightEidtParam}>\n                                <EditExpeParamContext.Provider\n                                    value={{\n                                        title: MAX_TRIAL_NUMBERS,\n                                        field: 'maxTrialNumber',\n                                        editType: CONTROLTYPE[1],\n                                        maxExecDuration: '',\n                                        maxTrialNum: EXPERIMENT.maxTrialNumber,\n                                        trialConcurrency: EXPERIMENT.profile.params.trialConcurrency,\n                                        updateOverviewPage\n                                    }}\n                                >\n                                    <div className='maxTrialNum'>\n                                        <EditExperimentParam />\n                                    </div>\n                                </EditExpeParamContext.Provider>\n                                <div className='concurrency'>\n                                    <EditExpeParamContext.Provider\n                                        value={{\n                                            title: 'Concurrency',\n                                            field: 'trialConcurrency',\n                                            editType: CONTROLTYPE[2],\n                                            // maxExecDuration: EXPERIMENT.profile.params.maxExecDuration,\n                                            maxExecDuration: '',\n                                            maxTrialNum: EXPERIMENT.maxTrialNumber,\n                                            trialConcurrency: EXPERIMENT.profile.params.trialConcurrency,\n                                            updateOverviewPage\n                                        }}\n                                    >\n                                        <EditExperimentParam />\n                                    </EditExpeParamContext.Provider>\n                                </div>\n                            </div>\n                        </Stack>\n                    </React.Fragment>\n                );\n            }}\n        </ExpDurationContext.Consumer>\n    );\n};\n","import React from 'react';\nimport { EXPERIMENT } from '@static/datamodel';\nimport { rightEidtParam } from '../count/commonStyle';\nimport '@style/experiment/overview/command.scss';\n\nexport const Command1 = (): any => {\n    const tuner = EXPERIMENT.profile.params.tuner;\n    const advisor = EXPERIMENT.profile.params.advisor;\n    const assessor = EXPERIMENT.profile.params.assessor;\n    const title: string[] = [];\n    const builtinName: string[] = [];\n    if (tuner !== undefined) {\n        title.push('Tuner');\n        builtinName.push(tuner.name || tuner.className || 'unknown');\n    }\n\n    if (advisor !== undefined) {\n        title.push('Advisor');\n        builtinName.push(advisor.name || advisor.className || 'unknown');\n    }\n\n    if (assessor !== undefined) {\n        title.push('Assessor');\n        builtinName.push(assessor.name || assessor.className || 'unknown');\n    }\n\n    return (\n        <div className='basic' style={rightEidtParam}>\n            <div>\n                <p className='command'>Training platform</p>\n                <div className='ellipsis'>{EXPERIMENT.trainingServicePlatform}</div>\n                <p className='lineMargin'>{title.join('/')}</p>\n                <div className='ellipsis'>{builtinName.join('/')}</div>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport { TooltipHost, DirectionalHint } from '@fluentui/react';\nimport { EXPERIMENT } from '@static/datamodel';\nimport { leftProgress } from '../count/commonStyle';\nimport { TOOLTIP_BACKGROUND_COLOR } from '@static/const';\nimport '@style/experiment/overview/command.scss';\n\nexport const Command2 = (): any => {\n    return (\n        <div className='basic' style={leftProgress}>\n            <p className='command'>Log directory</p>\n            <div className='ellipsis'>\n                <TooltipHost\n                    content={EXPERIMENT.profile.logDir || 'unknown'}\n                    className='ellipsis'\n                    directionalHint={DirectionalHint.bottomCenter}\n                    tooltipProps={{\n                        calloutProps: {\n                            styles: {\n                                beak: { background: TOOLTIP_BACKGROUND_COLOR },\n                                beakCurtain: { background: TOOLTIP_BACKGROUND_COLOR },\n                                calloutMain: { background: TOOLTIP_BACKGROUND_COLOR }\n                            }\n                        }\n                    }}\n                >\n                    {EXPERIMENT.profile.logDir || 'unknown'}\n                </TooltipHost>\n            </div>\n            <p className='lineMargin'>Trial command</p>\n            <div className='ellipsis'>\n                <TooltipHost\n                    content={EXPERIMENT.config.trialCommand || 'unknown'}\n                    className='ellipsis'\n                    directionalHint={DirectionalHint.bottomCenter}\n                    tooltipProps={{\n                        calloutProps: {\n                            styles: {\n                                beak: { background: TOOLTIP_BACKGROUND_COLOR },\n                                beakCurtain: { background: TOOLTIP_BACKGROUND_COLOR },\n                                calloutMain: { background: TOOLTIP_BACKGROUND_COLOR }\n                            }\n                        }\n                    }}\n                >\n                    {EXPERIMENT.config.trialCommand || 'unknown'}\n                </TooltipHost>\n            </div>\n        </div>\n    );\n};\n","import * as React from 'react';\nimport { Stack, Icon, Dropdown, DefaultButton } from '@fluentui/react';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport { Trial } from '@static/model/trial';\nimport { AppContext } from '@/App';\nimport { Title } from './Title';\nimport SuccessTable from './table/SuccessTable';\nimport DefaultPoint from '../trialdetail/chart/DefaultMetricPoint';\nimport { BasicInfo } from './params/BasicInfo';\nimport { ExpDuration } from './count/ExpDuration';\nimport { ExpDurationContext } from './count/ExpDurationContext';\nimport { TrialCount } from './count/TrialCount';\nimport { Command1 } from './command/Command1';\nimport { Command2 } from './command/Command2';\nimport { TitleContext } from './TitleContext';\nimport { itemStyleSucceed, entriesOption } from './overviewConst';\nimport '@style/experiment/overview/overview.scss';\nimport '@style/experiment/overview/topTrial.scss';\nimport '@style/logPath.scss';\n\n/**\n * single experiment\n * overview page\n */\n\ninterface OverviewState {\n    trialConcurrency: number;\n}\n\nexport const BestMetricContext = React.createContext({\n    bestAccuracy: 0\n});\n\nclass Overview extends React.Component<{}, OverviewState> {\n    static contextType = AppContext;\n    context!: React.ContextType<typeof AppContext>;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            trialConcurrency: EXPERIMENT.trialConcurrency\n        };\n    }\n\n    clickMaxTop = (event: React.SyntheticEvent<EventTarget>): void => {\n        event.stopPropagation();\n        // #999 panel active bgcolor; #b3b3b3 as usual\n        const { changeMetricGraphMode } = this.context;\n        changeMetricGraphMode('max');\n    };\n\n    clickMinTop = (event: React.SyntheticEvent<EventTarget>): void => {\n        event.stopPropagation();\n        const { changeMetricGraphMode } = this.context;\n        changeMetricGraphMode('min');\n    };\n\n    updateEntries = (event: React.FormEvent<HTMLDivElement>, item: any): void => {\n        if (item !== undefined) {\n            this.context.changeEntries(item.key);\n        }\n    };\n\n    render(): React.ReactNode {\n        const bestTrials = this.findBestTrials();\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const bestAccuracy = bestTrials.length > 0 ? bestTrials[0].accuracy! : NaN;\n        const execDuration = EXPERIMENT.profile.execDuration;\n\n        return (\n            <AppContext.Consumer>\n                {(value): React.ReactNode => {\n                    const {\n                        metricGraphMode,\n                        bestTrialEntries,\n                        maxDurationUnit,\n                        expandRowIDs,\n                        updateOverviewPage,\n                        changeMaxDurationUnit,\n                        changeExpandRowIDs\n                    } = value;\n                    const maxActive = metricGraphMode === 'max' ? 'active' : '';\n                    const minActive = metricGraphMode === 'min' ? 'active' : '';\n                    return (\n                        <div className='overview'>\n                            <div className='overviewWrapper'>\n                                {/* exp params */}\n                                <div className='overviewBasicInfo'>\n                                    <TitleContext.Provider value={{ text: 'Experiment', icon: 'AutoRacing' }}>\n                                        <Title />\n                                    </TitleContext.Provider>\n                                    <BestMetricContext.Provider value={{ bestAccuracy: bestAccuracy }}>\n                                        <BasicInfo />\n                                    </BestMetricContext.Provider>\n                                </div>\n                                {/* duration & trial numbers */}\n                                <div className='duration'>\n                                    <TitleContext.Provider value={{ text: 'Duration', icon: 'Timer' }}>\n                                        <Title />\n                                    </TitleContext.Provider>\n                                    <ExpDurationContext.Provider\n                                        value={{\n                                            maxExecDuration: EXPERIMENT.maxExperimentDurationSeconds,\n                                            execDuration,\n                                            updateOverviewPage,\n                                            maxDurationUnit,\n                                            changeMaxDurationUnit\n                                        }}\n                                    >\n                                        <ExpDuration />\n                                    </ExpDurationContext.Provider>\n                                </div>\n                                <div className='trialCount'>\n                                    <TitleContext.Provider value={{ text: 'Trial numbers', icon: 'NumberSymbol' }}>\n                                        <Title />\n                                    </TitleContext.Provider>\n                                    <ExpDurationContext.Provider\n                                        value={{\n                                            maxExecDuration: EXPERIMENT.maxExperimentDurationSeconds,\n                                            execDuration,\n                                            updateOverviewPage,\n                                            maxDurationUnit,\n                                            changeMaxDurationUnit\n                                        }}\n                                    >\n                                        <TrialCount />\n                                    </ExpDurationContext.Provider>\n                                </div>\n                                {/* table */}\n                                <div className='overviewBestMetric'>\n                                    <Stack horizontal>\n                                        <div style={itemStyleSucceed}>\n                                            <TitleContext.Provider value={{ text: 'Top trials', icon: 'BulletedList' }}>\n                                                <Title />\n                                            </TitleContext.Provider>\n                                        </div>\n                                        <div className='topTrialTitle'>\n                                            <Stack horizontal horizontalAlign='end'>\n                                                <DefaultButton\n                                                    onClick={this.clickMaxTop}\n                                                    className={maxActive}\n                                                    styles={{ root: { minWidth: 70, padding: 0 } }}\n                                                >\n                                                    <Icon iconName='Market' />\n                                                    <span className='max'>Max</span>\n                                                </DefaultButton>\n                                                <div className='mincenter'>\n                                                    <DefaultButton\n                                                        onClick={this.clickMinTop}\n                                                        className={minActive}\n                                                        styles={{ root: { minWidth: 70, padding: 0 } }}\n                                                    >\n                                                        <Icon iconName='MarketDown' />\n                                                        <span className='max'>Min</span>\n                                                    </DefaultButton>\n                                                </div>\n                                                <div>\n                                                    <Stack horizontal>\n                                                        <div className='chooseEntry'>Display top</div>\n                                                        <div>\n                                                            <Dropdown\n                                                                selectedKey={bestTrialEntries}\n                                                                options={entriesOption}\n                                                                onChange={this.updateEntries}\n                                                                styles={{ root: { width: 70 } }}\n                                                            />\n                                                        </div>\n                                                    </Stack>\n                                                </div>\n                                            </Stack>\n                                        </div>\n                                    </Stack>\n                                    <div className='overviewChart'>\n                                        <DefaultPoint\n                                            trialIds={bestTrials.map(trial => trial.info.trialJobId)}\n                                            chartHeight={300}\n                                            hasBestCurve={false}\n                                            changeExpandRowIDs={changeExpandRowIDs}\n                                        />\n                                        <SuccessTable\n                                            trialIds={bestTrials.map(trial => trial.info.trialJobId)}\n                                            updateOverviewPage={updateOverviewPage}\n                                            expandRowIDs={expandRowIDs}\n                                            changeExpandRowIDs={changeExpandRowIDs}\n                                        />\n                                    </div>\n                                </div>\n                                <Stack className='overviewCommand' horizontal>\n                                    <Command2 />\n                                    <Command1 />\n                                </Stack>\n                            </div>\n                        </div>\n                    );\n                }}\n            </AppContext.Consumer>\n        );\n    }\n\n    private findBestTrials(): Trial[] {\n        const bestTrials = TRIALS.sort();\n        const { bestTrialEntries, metricGraphMode } = this.context;\n        if (metricGraphMode === 'max') {\n            bestTrials.reverse().splice(JSON.parse(bestTrialEntries));\n        } else {\n            bestTrials.splice(JSON.parse(bestTrialEntries));\n        }\n        return bestTrials;\n    }\n}\n\nexport default Overview;\n","import React from 'react';\nimport { Stack, Icon } from '@fluentui/react';\nimport { TitleContext } from './TitleContext';\nimport '@style/experiment/overview/overviewTitle.scss';\n\nexport const Title = (): any => (\n    <TitleContext.Consumer>\n        {(value): React.ReactNode => (\n            <Stack horizontal className='panelTitle'>\n                <Icon iconName={value.icon} />\n                <span>{value.text}</span>\n            </Stack>\n        )}\n    </TitleContext.Consumer>\n);\n","import * as React from 'react';\n\nexport const TitleContext = React.createContext({\n    text: '',\n    icon: ''\n});\n","import { FontWeights, mergeStyleSets, getTheme } from '@fluentui/react';\n\nconst theme = getTheme();\n\nexport const styles = mergeStyleSets({\n    buttonArea: {\n        verticalAlign: 'top',\n        display: 'inline-block',\n        textAlign: 'center',\n        // margin: '0 100px',\n        minWidth: 30,\n        height: 30\n    },\n    callout: {\n        maxWidth: 300\n    },\n    header: {\n        padding: '18px 24px 12px'\n    },\n    title: [\n        theme.fonts.xLarge,\n        {\n            margin: 0,\n            color: theme.palette.neutralPrimary,\n            fontWeight: FontWeights.semilight\n        }\n    ],\n    inner: {\n        height: '100%',\n        padding: '0 24px 20px'\n    },\n    actions: {\n        position: 'relative',\n        marginTop: 20,\n        width: '100%',\n        whiteSpace: 'nowrap'\n    },\n    subtext: [\n        theme.fonts.small,\n        {\n            margin: 0,\n            color: theme.palette.neutralPrimary,\n            fontWeight: FontWeights.semilight\n        }\n    ],\n    link: [\n        theme.fonts.medium,\n        {\n            color: theme.palette.neutralPrimary\n        }\n    ],\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        padding: '0 24px 24px'\n    }\n});\n","import * as React from 'react';\nimport { Toggle, Stack } from '@fluentui/react';\nimport ReactEcharts from 'echarts-for-react';\nimport { Trial } from '@model/trial';\nimport { EXPERIMENT, TRIALS } from '@static/datamodel';\nimport { TooltipForAccuracy, EventMap } from '@static/interface';\nimport { reformatRetiariiParameter } from '@static/function';\nimport 'echarts/lib/chart/scatter';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/title';\n\nconst EmptyGraph = {\n    grid: {\n        left: '8%'\n    },\n    xAxis: {\n        name: 'Trial',\n        type: 'category'\n    },\n    yAxis: {\n        name: 'Default metric',\n        type: 'value'\n    }\n};\n\ninterface DefaultPointProps {\n    trialIds: string[];\n    chartHeight: number;\n    hasBestCurve: boolean;\n    changeExpandRowIDs: Function;\n}\n\ninterface DefaultPointState {\n    bestCurveEnabled?: boolean | undefined;\n    startY: number; // dataZoomY\n    endY: number;\n}\n\nclass DefaultPoint extends React.Component<DefaultPointProps, DefaultPointState> {\n    constructor(props: DefaultPointProps) {\n        super(props);\n        this.state = {\n            bestCurveEnabled: false,\n            startY: 0, // dataZoomY\n            endY: 100\n        };\n    }\n\n    loadDefault = (ev: React.MouseEvent<HTMLElement>, checked?: boolean): void => {\n        this.setState({ bestCurveEnabled: checked });\n    };\n\n    metricDataZoom = (e: EventMap): void => {\n        if (e.batch !== undefined) {\n            this.setState(() => ({\n                startY: e.batch[0].start !== null ? e.batch[0].start : 0,\n                endY: e.batch[0].end !== null ? e.batch[0].end : 100\n            }));\n        }\n    };\n\n    pointClick = (params: any): void => {\n        // [hasBestCurve: true]: is detail page, otherwise, is overview page\n        const { hasBestCurve } = this.props;\n        if (!hasBestCurve) {\n            this.props.changeExpandRowIDs(params.data[2], 'chart');\n        }\n    };\n\n    generateGraphConfig(_maxSequenceId: number): any {\n        const { startY, endY } = this.state;\n        const { hasBestCurve } = this.props;\n        return {\n            grid: {\n                left: '8%'\n            },\n            tooltip: {\n                trigger: 'item',\n                enterable: hasBestCurve,\n                confine: true, // confirm always show tooltip box rather than hidden by background\n                formatter: (data: TooltipForAccuracy): React.ReactNode => `\n                    <div class=\"tooldetailAccuracy\">\n                        <div>Trial No.: ${data.data[0]}</div>\n                        <div>Trial ID: ${data.data[2]}</div>\n                        <div>Default metric: ${data.data[1]}</div>\n                        <div>Parameters: <pre>${JSON.stringify(\n                            reformatRetiariiParameter(data.data[3]),\n                            null,\n                            4\n                        )}</pre></div>\n                    </div>\n                `\n            },\n            dataZoom: [\n                {\n                    id: 'dataZoomY',\n                    type: 'inside',\n                    yAxisIndex: [0],\n                    filterMode: 'empty',\n                    start: startY,\n                    end: endY\n                }\n            ],\n            xAxis: {\n                name: 'Trial',\n                type: 'category'\n            },\n            yAxis: {\n                name: 'Default metric',\n                type: 'value',\n                scale: true\n            },\n            series: undefined\n        };\n    }\n\n    generateScatterSeries(trials: Trial[]): any {\n        const data = trials.map(trial => [trial.sequenceId, trial.accuracy, trial.id, trial.description.parameters]);\n        return {\n            symbolSize: 6,\n            type: 'scatter',\n            data\n        };\n    }\n\n    generateBestCurveSeries(trials: Trial[]): any {\n        let best = trials[0];\n        const data = [[best.sequenceId, best.accuracy, best.id, best.description.parameters]];\n\n        for (let i = 1; i < trials.length; i++) {\n            const trial = trials[i];\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const delta = trial.accuracy! - best.accuracy!;\n            const better = EXPERIMENT.optimizeMode === 'minimize' ? delta < 0 : delta > 0;\n            if (better) {\n                data.push([trial.sequenceId, trial.accuracy, best.id, trial.description.parameters]);\n                best = trial;\n            } else {\n                data.push([trial.sequenceId, best.accuracy, best.id, trial.description.parameters]);\n            }\n        }\n\n        return {\n            type: 'line',\n            lineStyle: { color: '#FF6600' },\n            data\n        };\n    }\n\n    render(): React.ReactNode {\n        const { hasBestCurve, chartHeight } = this.props;\n        const graph = this.generateGraph();\n        const accNodata = graph === EmptyGraph ? 'No data' : '';\n        const onEvents = { dataZoom: this.metricDataZoom, click: this.pointClick };\n\n        return (\n            <div>\n                {hasBestCurve && (\n                    <Stack horizontalAlign='end' className='default-metric'>\n                        <Toggle label='Optimization curve' inlineLabel onChange={this.loadDefault} />\n                    </Stack>\n                )}\n                <div className='default-metric-graph graph'>\n                    <ReactEcharts\n                        option={graph}\n                        style={{\n                            width: '100%',\n                            height: chartHeight,\n                            margin: '0 auto'\n                        }}\n                        theme='nni_theme'\n                        notMerge={true} // update now\n                        onEvents={onEvents}\n                    />\n                    <div className='default-metric-noData'>{accNodata}</div>\n                </div>\n            </div>\n        );\n    }\n\n    private generateGraph(): any {\n        const trials = TRIALS.getTrials(this.props.trialIds).filter(trial => trial.sortable);\n        if (trials.length === 0) {\n            return EmptyGraph;\n        }\n        const graph = this.generateGraphConfig(trials[trials.length - 1].sequenceId);\n        if (this.state.bestCurveEnabled) {\n            (graph as any).series = [this.generateBestCurveSeries(trials), this.generateScatterSeries(trials)];\n        } else {\n            (graph as any).series = [this.generateScatterSeries(trials)];\n        }\n        return graph;\n    }\n}\n\nexport default DefaultPoint;\n"],"names":["CopyButton","value","hideTooltip","ref","useRef","iconProps","iconName","styles","icon","fontSize","FontSizes","onClick","event","stopPropagation","copy","current","show","setTimeout","dismiss","onMouseDown","e","onMouseUp","hidden","content","componentRef","delay","tooltipProps","calloutProps","beak","background","TOOLTIP_BACKGROUND_COLOR","beakCurtain","calloutMain","propTypes","PropTypes","LogPathChild","React","constructor","props","super","render","eachLogpath","logName","this","isLink","test","className","rel","href","target","PaiTrialChild","logString","id","logCollect","DOWNLOAD_IP","style","marginRight","PaitrialLog","logStr","logCollection","isTwopath","indexOf","split","TrialLog","PanelMonacoEditor","state","panelInnerHeight","window","innerHeight","setLogPanelHeight","setState","innerWidth","addEventListener","componentWillUnmount","removeEventListener","hideConfigPanel","panelName","panelContent","monacoEditorHeight","caclMonacoEditorHeight","Stack","Panel","isOpen","hasCloseButton","isFooterAtBottom","isLightDismiss","onLightDismissClick","height","language","theme","options","minimap","enabled","readOnly","automaticLayout","wordWrap","PrimaryButton","text","OpenRow","typeInfo","info","isHidenInfo","showRetiaParamPanel","hideMessageInfo","hideRetiaParam","isshowRetiaParamPanel","getCopyStatus","copyParams","trial","params","JSON","stringify","reformatRetiariiParameter","description","parameters","openTrialLog","filename","open","MANAGER_IP","trialId","openModelOnnx","TRIALS","logPathRow","logPath","originParameters","hasVisualHyperParams","RETIARIIPARAMETERS","Pivot","PivotItem","headerText","key","itemIcon","undefined","hyperParameters","hideRoot","shouldExpandNode","getItemString","data","horizontal","bind","root","width","DefaultButton","MessageInfo","EXPERIMENT","PaiTrialLog","marginTop","marginLeft","StickyPositionType","GlobalClassNames","contentContainer","ScrollbarVisibility","ScrollablePaneContext","scrollablePane","getClassNames","classNamesFunction","ScrollablePaneBase","_super","_this","call","_root","_stickyAboveRef","_stickyBelowRef","_contentContainer","subscribe","handler","_subscribers","add","unsubscribe","delete","addSticky","sticky","_stickies","setDistanceFromTop","sortSticky","removeSticky","_removeStickyFromContainers","notifySubscribers","sortAgain","stickyAbove","stickyBelow","canStickyTop","stickyContentTop","_addToStickyContainer","canStickyBottom","stickyContentBottom","updateStickyRefHeights","stickyItems","stickyTopHeight","stickyBottomHeight","forEach","_a","isStickyTop","isStickyBottom","nonStickyContent","offsetHeight","_checkStickyStatus","handle","getScrollPosition","scrollTop","syncScrollSticky","syncScroll","_getScrollablePaneContext","stickyContainer","stickyContentToAdd","children","length","contains","stickyChildrenElements_1","slice","stickyList_1","stickyItem","push","targetStickyToAppendBefore","_i","stickyListSorted_1","sort","a","b","distanceFromTop","filter","item","stickyContent","stickyListItem","targetContainer","insertBefore","appendChild","removeChild","_onWindowResize","scrollbarWidth","_getScrollbarWidth","scrollbarHeight","_getScrollbarHeight","_getStickyContainerStyle","isTop","right","left","top","bottom","_onScroll","_notifyThrottled","Set","initializeComponentRef","_async","Async","_events","EventGroup","throttle","Object","defineProperty","prototype","get","enumerable","configurable","componentDidMount","initialScrollPosition","on","setStickiesDistanceFromTop","_mutationObserver","MutationObserver","mutation","some","mutationRecord","stickyList_2","forceUpdate","observe","childList","attributes","subtree","characterData","dispose","disconnect","shouldComponentUpdate","nextProps","nextState","componentDidUpdate","prevProps","prevState","_b","classNames","scrollbarVisibility","Provider","stickyBelowItems","forceLayoutUpdate","resetSticky","offsetWidth","clientWidth","clientHeight","ScrollablePane","styled","AboveAndBelowStyles","position","pointerEvents","positioningStyle","WebkitOverflowScrolling","fonts","medium","overflowY","zIndex","selectors","borderBottom","borderTop","scope","Sticky","_stickyContentTop","_stickyContentBottom","_nonStickyContent","_placeHolder","container","isScrollSynced","scrollLeft","_getContext","context","_onScrollEvent","footerStickyContainer","_getNonStickyDistanceFromTop","_getStickyDistanceFromTop","Math","floor","_getStickyDistanceFromTopForFooter","document","activeElement","_activeElement","distance","offsetTop","footerStickyVisibleContainer","currElem","offsetParent","stickyPosition","Both","Header","Footer","focus","_isOffsetHeightDifferent","stickyClassName","_getStickyPlaceholderHeight","_getNonStickyPlaceholderHeightAndWidth","_getContentStyles","placeholder","isSticky","backgroundColor","stickyBackgroundColor","_getBackground","overflow","visibility","firstElementChild","scrollWidth","curr","getComputedStyle","getPropertyValue","tagName","parentElement","defaultProps","contextType","DefaultMetric","accuracy","formatAccuracy","SuccessTable","columns","source","trialIds","sortInfo","field","isDescend","keepSortedSource","copyAndSort","isNoneData","DetailsList","items","setKey","compact","onRenderRow","onRenderDetailsHeader","selectionMode","tooltipStr","onColumnClick","_ev","getColumn","newColumns","currColumn","newCol","isSortedDescending","isSorted","newItems","fieldName","DETAILTABS","name","onRender","Icon","transition","transform","expandRowIDs","has","expandTrialId","Event","isResizable","minWidth","maxWidth","sequenceId","convertDuration","duration","status","defaultRender","DetailsRow","Array","from","map","_event","updateOverviewPage","changeExpandRowIDs","useId","prefix","providedId","getId","BasicInfo","labelId","descriptionId","isCalloutVisible","setCalloutVisible","useState","isShowLogDrawer","setShowLogDrawer","onDismiss","useCallback","showCallout","closeLogDrawer","ShowLogDrawer","horizontalAlign","IconButton","Callout","ariaLabelledBy","ariaDescribedBy","role","gapSpace","setInitialFocus","Link","BestMetricContext","Consumer","isNaN","bestAccuracy","toFixed","formatTimestamp","LogPanel","closePanel","activeTab","ProgressIndicatorBase","_onRenderProgress","ariaValueText","barHeight","label","title","percentComplete","min","max","indeterminate","progressBarStyles","ariaValueMin","ariaValueMax","ariaValueNow","itemProgress","progressTrack","progressBar","_descriptionId","_labelId","progressHidden","_c","onRenderProgress","itemName","itemDescription","IndeterminateProgress","memoize","IndeterminateProgressRTL","ProgressIndicator","isRTL","_d","palette","semanticColors","progressTrackColor","neutralLight","color","bodyText","paddingTop","marginBetweenText","lineHeight","textHeight","bodySubtext","small","padding","themePrimary","animation","EditExpeParamContext","editType","maxExecDuration","maxTrialNum","trialConcurrency","itemStyleSucceed","entriesOption","durationUnit","DurationInputRef","EditExperimentParam","isShowPencil","setShowPencil","isShowSucceedInfo","setShowSucceedInfo","setTypeInfo","setInfo","showPencil","hidePencil","showSucceedInfo","hideSucceedInfo","useContext","originMaxDurationStr","maxDurationUnit","changeMaxDurationUnit","AppContext","unit","setUnit","defaultVal","editVal","MAX_TRIAL_NUMBERS","toString","editInputVal","setEditValInput","setInputVal","showMessageInfo","updateUnit","promptErrorMessage","mess","type","async","confirmEdit","isMaxDuration","newProfile","assign","beforeParam","match","toSeconds","maxDura","parse","parseInt","axios","update_type","error","response","message","cancelEdit","App","values","editClassName","disabled","onChange","val","Dropdown","selectedKey","Edit","CheckMark","Cancel","ExpDurationContext","execDuration","_val","leftProgress","rightEidtParam","paddingLeft","boxSizing","ExpDuration","tooltip","percent","execDurationStr","maxExecDurationStr","convertTimeAsUnit","TooltipHost","directionalHint","DirectionalHint","CONTROLTYPE","line1Tokens","childrenGap","line2Tokens","TrialCount","count","stoppedCount","bar2","bar2Percent","tokens","Command1","tuner","advisor","assessor","builtinName","join","Command2","Overview","clickMaxTop","changeMetricGraphMode","clickMinTop","updateEntries","changeEntries","bestTrials","findBestTrials","NaN","metricGraphMode","bestTrialEntries","maxActive","minActive","TitleContext","Title","trialJobId","chartHeight","hasBestCurve","reverse","splice","getTheme","mergeStyleSets","buttonArea","verticalAlign","display","textAlign","callout","header","xLarge","margin","neutralPrimary","fontWeight","FontWeights","inner","actions","whiteSpace","subtext","link","buttons","justifyContent","EmptyGraph","grid","xAxis","yAxis","DefaultPoint","bestCurveEnabled","startY","endY","loadDefault","ev","checked","metricDataZoom","batch","start","end","pointClick","generateGraphConfig","_maxSequenceId","trigger","enterable","confine","formatter","dataZoom","yAxisIndex","filterMode","scale","series","generateScatterSeries","trials","symbolSize","generateBestCurveSeries","best","i","delta","lineStyle","graph","generateGraph","accNodata","onEvents","click","inlineLabel","option","notMerge","sortable"],"sourceRoot":""}